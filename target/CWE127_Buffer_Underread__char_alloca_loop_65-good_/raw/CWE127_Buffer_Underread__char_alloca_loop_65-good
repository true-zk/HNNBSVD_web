//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
// Copyright (c) Retargetable Decompiler <info@retdec.com>
//

#include <ctype.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <wchar.h>
#include <wctype.h>

// ---------------- Integer Types Definitions -----------------

typedef int64_t int128_t;

// ----------------- Float Types Definitions ------------------

typedef double float64_t;

// ------------------- Function Prototypes --------------------

int64_t __do_global_dtors_aux(void);
int64_t __libc_csu_fini(void);
int64_t __libc_csu_init(int64_t a1, int64_t a2, int64_t a3);
int64_t _fini(void);
int64_t _init(void);
int64_t _start(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t bad1(void);
int64_t bad2(void);
int64_t bad3(void);
int64_t bad4(void);
int64_t bad5(void);
int64_t bad6(void);
int64_t bad7(void);
int64_t bad8(void);
int64_t bad9(void);
int64_t CWE127_Buffer_Underread__char_alloca_loop_65_good(void);
int64_t CWE127_Buffer_Underread__char_alloca_loop_65b_goodG2BSink(int64_t a1);
int64_t decodeHexChars(int64_t a1, uint64_t a2, int64_t a3);
int64_t decodeHexWChars(int64_t a1, uint64_t a2, int64_t a3);
int64_t deregister_tm_clones(void);
int64_t frame_dummy(void);
int32_t function_7f0(char * s);
int32_t function_800(int32_t wc);
void function_810(void);
int32_t function_820(char * format, ...);
int64_t * function_830(int64_t * s, int32_t c, int32_t n);
void function_840(int32_t seed);
int32_t function_850(int32_t * s, int32_t * format, ...);
int32_t function_860(int32_t * timer);
int32_t function_870(int32_t * format, ...);
int32_t function_880(char * s, char * format, ...);
int32_t function_890(void);
int16_t ** function_8a0(void);
void function_8b0(int64_t * d);
int64_t globalReturnsFalse(void);
int64_t globalReturnsTrue(void);
int64_t globalReturnsTrueOrFalse(void);
int64_t good1(void);
int64_t good2(void);
int64_t good3(void);
int64_t good4(void);
int64_t good5(void);
int64_t good6(void);
int64_t good7(void);
int64_t good8(void);
int64_t good9(void);
int64_t goodG2B(void);
int64_t printBytesLine(int64_t a1, int64_t a2);
int64_t printDoubleLine(void);
int64_t printFloatLine(void);
int64_t printHexCharLine(int64_t a1);
int64_t printHexUnsignedCharLine(int64_t a1);
int64_t printIntLine(int64_t a1);
int64_t printLine(char * str);
int64_t printLongLine(int64_t a1);
int64_t printLongLongLine(int64_t a1);
int64_t printShortLine(int64_t a1);
int64_t printSizeTLine(int64_t a1);
int64_t printStructLine(int64_t a1);
int64_t printUnsignedLine(int64_t a1);
int64_t printWcharLine(int64_t a1);
int64_t printWLine(int64_t a1);
int64_t register_tm_clones(void);

// --------------------- Global Variables ---------------------

char * g1; // 0x1195
int64_t g2 = 2496; // 0x201d60
int64_t g3 = 2432; // 0x201d68
int64_t g4 = 0; // 0x202018
int32_t g5;

// ------------------------ Functions -------------------------

// Address range: 0x7c0 - 0x7d7
int64_t _init(void) {
    int64_t result = 0; // 0x7ce
    if (*(int64_t *)0x201fe8 != 0) {
        // 0x7d0
        __gmon_start__();
        result = &g5;
    }
    // 0x7d2
    return result;
}

// Address range: 0x7f0 - 0x7f6
int32_t function_7f0(char * s) {
    // 0x7f0
    return puts(s);
}

// Address range: 0x800 - 0x806
int32_t function_800(int32_t wc) {
    // 0x800
    return iswxdigit(wc);
}

// Address range: 0x810 - 0x816
void function_810(void) {
    // 0x810
    __stack_chk_fail();
}

// Address range: 0x820 - 0x826
int32_t function_820(char * format, ...) {
    // 0x820
    return printf(format);
}

// Address range: 0x830 - 0x836
int64_t * function_830(int64_t * s, int32_t c, int32_t n) {
    // 0x830
    return memset(s, c, n);
}

// Address range: 0x840 - 0x846
void function_840(int32_t seed) {
    // 0x840
    srand(seed);
}

// Address range: 0x850 - 0x856
int32_t function_850(int32_t * s, int32_t * format, ...) {
    // 0x850
    return swscanf(s, format);
}

// Address range: 0x860 - 0x866
int32_t function_860(int32_t * timer) {
    // 0x860
    return time(timer);
}

// Address range: 0x870 - 0x876
int32_t function_870(int32_t * format, ...) {
    // 0x870
    return wprintf(format);
}

// Address range: 0x880 - 0x886
int32_t function_880(char * s, char * format, ...) {
    // 0x880
    return sscanf(s, format);
}

// Address range: 0x890 - 0x896
int32_t function_890(void) {
    // 0x890
    return rand();
}

// Address range: 0x8a0 - 0x8a6
int16_t ** function_8a0(void) {
    // 0x8a0
    return __ctype_b_loc();
}

// Address range: 0x8b0 - 0x8b6
void function_8b0(int64_t * d) {
    // 0x8b0
    __cxa_finalize(d);
}

// Address range: 0x8c0 - 0x8eb
int64_t _start(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x8c0
    int64_t v1; // 0x8c0
    __libc_start_main(2686, (int32_t)a4, (char **)&v1, (void (*)())0x10a0, (void (*)())0x1110, (void (*)())a3);
    __asm_hlt();
    // UNREACHABLE
}

// Address range: 0x8f0 - 0x922
int64_t deregister_tm_clones(void) {
    // 0x8f0
    return &g4;
}

// Address range: 0x930 - 0x972
int64_t register_tm_clones(void) {
    // 0x930
    return 0;
}

// Address range: 0x980 - 0x9ba
int64_t __do_global_dtors_aux(void) {
    // 0x980
    if (*(char *)&g4 != 0) {
        // 0x9b8
        int64_t result; // 0x980
        return result;
    }
    // 0x989
    if (*(int64_t *)0x201ff8 != 0) {
        // 0x997
        __cxa_finalize((int64_t *)*(int64_t *)0x202008);
    }
    int64_t result2 = deregister_tm_clones(); // 0x9a3
    *(char *)&g4 = 1;
    return result2;
}

// Address range: 0x9c0 - 0x9ca
int64_t frame_dummy(void) {
    // 0x9c0
    return register_tm_clones();
}

// Address range: 0x9ca - 0xa6d
int64_t goodG2B(void) {
    int64_t v1 = __readfsqword(40); // 0x9d2
    int64_t v2 = 2759; // bp-40, 0x9e8
    int64_t v3 = (int64_t)&v2 - 113 & -16; // 0xa14
    memset((int64_t *)v3, 65, 99);
    *(char *)(v3 + 99) = 0;
    int64_t result = 0; // 0xa64
    if (v1 != __readfsqword(40)) {
        // 0xa66
        __stack_chk_fail();
        result = &g5;
    }
    // 0xa6b
    return result;
}

// Address range: 0xa6d - 0xa7e
int64_t CWE127_Buffer_Underread__char_alloca_loop_65_good(void) {
    // 0xa6d
    return goodG2B();
}

// Address range: 0xa7e - 0xac7
int main(int argc, char ** argv) {
    // 0xa7e
    srand(time(NULL));
    printLine("Calling good()...");
    CWE127_Buffer_Underread__char_alloca_loop_65_good();
    printLine("Finished good()");
    return 0;
}

// Address range: 0xac7 - 0xb5d
int64_t CWE127_Buffer_Underread__char_alloca_loop_65b_goodG2BSink(int64_t a1) {
    int64_t v1 = __readfsqword(40); // 0xad9
    int64_t v2; // bp-120, 0xac7
    memset(&v2, 67, 99);
    for (int64_t i = 0; i < 100; i++) {
        char v3 = *(char *)(i + a1); // 0xb1a
        *(char *)(i + (int64_t)&v2) = v3;
    }
    // 0xb36
    printLine((char *)&v2);
    int64_t result = 0; // 0xb54
    if (v1 != __readfsqword(40)) {
        // 0xb56
        __stack_chk_fail();
        result = &g5;
    }
    // 0xb5b
    return result;
}

// Address range: 0xb5d - 0xb7f
int64_t printLine(char * str) {
    int64_t puts_rc; // 0xb5d
    if (str != NULL) {
        // 0xb70
        puts_rc = puts(str);
    }
    // 0xb7c
    return puts_rc;
}

// Address range: 0xb7f - 0xbad
int64_t printWLine(int64_t a1) {
    int64_t result; // 0xb7f
    if (a1 != 0) {
        // 0xb92
        result = wprintf(L"%ls\n");
    }
    // 0xbaa
    return result;
}

// Address range: 0xbad - 0xbd1
int64_t printIntLine(int64_t a1) {
    // 0xbad
    return printf("%d\n", a1 & 0xffffffff);
}

// Address range: 0xbd1 - 0xbf9
int64_t printShortLine(int64_t a1) {
    // 0xbd1
    return printf("%hd\n", (int16_t)a1);
}

// Address range: 0xbf9 - 0xc1f
int64_t printFloatLine(void) {
    // 0xbf9
    int128_t v1; // 0xbf9
    int128_t v2 = __asm_cvtss2sd((int32_t)__asm_movss(v1)); // 0xc06
    return printf("%f\n", (float64_t)(int64_t)v2);
}

// Address range: 0xc1f - 0xc46
int64_t printLongLine(int64_t a1) {
    // 0xc1f
    return printf("%ld\n", (int32_t)a1);
}

// Address range: 0xc46 - 0xc6d
int64_t printLongLongLine(int64_t a1) {
    // 0xc46
    return printf("%ld\n", (int32_t)a1);
}

// Address range: 0xc6d - 0xc94
int64_t printSizeTLine(int64_t a1) {
    // 0xc6d
    return printf("%zu\n", a1);
}

// Address range: 0xc94 - 0xcbb
int64_t printHexCharLine(int64_t a1) {
    // 0xc94
    return printf("%02x\n", 0x1000000 * (int32_t)a1 / 0x1000000);
}

// Address range: 0xcbb - 0xd11
int64_t printWcharLine(int64_t a1) {
    int64_t v1 = __readfsqword(40); // 0xcc6
    int64_t v2 = 0x100000000 * a1 / 0x100000000; // bp-24, 0xcd8
    printf("%ls\n", &v2);
    int64_t result = 0; // 0xd08
    if (v1 != __readfsqword(40)) {
        // 0xd0a
        __stack_chk_fail();
        result = &g5;
    }
    // 0xd0f
    return result;
}

// Address range: 0xd11 - 0xd35
int64_t printUnsignedLine(int64_t a1) {
    // 0xd11
    return printf("%u\n", (int32_t)a1);
}

// Address range: 0xd35 - 0xd5c
int64_t printHexUnsignedCharLine(int64_t a1) {
    // 0xd35
    return printf("%02x\n", (uint32_t)(int32_t)a1 % 256);
}

// Address range: 0xd5c - 0xd8a
int64_t printDoubleLine(void) {
    // 0xd5c
    int128_t v1; // 0xd5c
    return printf("%g\n", (float64_t)(int64_t)__asm_movsd_1(__asm_movsd(v1)));
}

// Address range: 0xd8a - 0xdb9
int64_t printStructLine(int64_t a1) {
    uint32_t v1 = *(int32_t *)(a1 + 4); // 0xd9a
    int64_t v2; // 0xd8a
    return printf("%d -- %d\n", v2 & 0xffffffff, (int64_t)v1);
}

// Address range: 0xdb9 - 0xe15
int64_t printBytesLine(int64_t a1, int64_t a2) {
    // 0xdb9
    if (a2 == 0) {
        // 0xe06
        return puts((char *)&g1);
    }
    int64_t v1 = 0; // 0xe04
    printf("%02x", (int32_t)*(char *)(v1 + a1));
    v1++;
    while (v1 != a2) {
        // 0xdd3
        printf("%02x", (int32_t)*(char *)(v1 + a1));
        v1++;
    }
    // 0xe06
    return puts((char *)&g1);
}

// Address range: 0xe15 - 0xf13
int64_t decodeHexChars(int64_t a1, uint64_t a2, int64_t a3) {
    int64_t v1 = __readfsqword(40); // 0xe29
    int64_t v2 = 0; // 0xe8a
    int64_t v3 = 0; // 0xe8a
    if (a2 != 0) {
        int16_t * v4 = *__ctype_b_loc(); // 0xe91
        int64_t v5 = 2 * v2; // 0xe98
        char * str = (char *)(v5 + a3); // 0xea3
        v3 = v2;
        while ((*(int16_t *)(2 * (int64_t)*str + (int64_t)v4) & 0x1000) != 0) {
            int16_t ** v6 = __ctype_b_loc(); // 0xebf
            char v7 = *(char *)((v5 | 1) + a3); // 0xed9
            v3 = v2;
            if ((*(int16_t *)(2 * (int64_t)v7 + (int64_t)*v6) & 0x1000) == 0) {
                // break -> 0xef9
                break;
            }
            // 0xe42
            int32_t v8; // bp-28, 0xe15
            sscanf(str, "%02x", &v8);
            *(char *)(v2 + a1) = (char)v8;
            v2++;
            v3 = v2;
            if (v2 >= a2) {
                // break -> 0xef9
                break;
            }
            v4 = *__ctype_b_loc();
            v5 = 2 * v2;
            str = (char *)(v5 + a3);
            v3 = v2;
        }
    }
    int64_t result = v3; // 0xf0a
    if (v1 != __readfsqword(40)) {
        // 0xf0c
        __stack_chk_fail();
        result = &g5;
    }
    // 0xf11
    return result;
}

// Address range: 0xf13 - 0xfec
int64_t decodeHexWChars(int64_t a1, uint64_t a2, int64_t a3) {
    int64_t v1 = __readfsqword(40); // 0xf27
    int64_t v2 = 0; // 0xf8c
    if (a2 != 0) {
        int64_t v3 = 0; // 0xf7f
        int64_t v4 = 8 * v3; // 0xf92
        int32_t * wc = (int32_t *)(v4 + a3); // 0xfa1
        v2 = v3;
        while (iswxdigit(*wc) != 0) {
            // 0xfae
            v2 = v3;
            if (iswxdigit(*(int32_t *)((v4 || 4) + a3)) == 0) {
                // break -> 0xfd2
                break;
            }
            // 0xf40
            swscanf(wc, L"%02x");
            int32_t v5; // 0xf13
            *(char *)(v3 + a1) = (char)v5;
            v3++;
            v2 = v3;
            if (v3 >= a2) {
                // break -> 0xfd2
                break;
            }
            v4 = 8 * v3;
            wc = (int32_t *)(v4 + a3);
            v2 = v3;
        }
    }
    int64_t result = v2; // 0xfe3
    if (v1 != __readfsqword(40)) {
        // 0xfe5
        __stack_chk_fail();
        result = &g5;
    }
    // 0xfea
    return result;
}

// Address range: 0xfec - 0xff7
int64_t globalReturnsTrue(void) {
    // 0xfec
    return 1;
}

// Address range: 0xff7 - 0x1002
int64_t globalReturnsFalse(void) {
    // 0xff7
    return 0;
}

// Address range: 0x1002 - 0x1020
int64_t globalReturnsTrueOrFalse(void) {
    // 0x1002
    return rand() % 2;
}

// Address range: 0x1020 - 0x1027
int64_t good1(void) {
    // 0x1020
    int64_t result; // 0x1020
    return result;
}

// Address range: 0x1027 - 0x102e
int64_t good2(void) {
    // 0x1027
    int64_t result; // 0x1027
    return result;
}

// Address range: 0x102e - 0x1035
int64_t good3(void) {
    // 0x102e
    int64_t result; // 0x102e
    return result;
}

// Address range: 0x1035 - 0x103c
int64_t good4(void) {
    // 0x1035
    int64_t result; // 0x1035
    return result;
}

// Address range: 0x103c - 0x1043
int64_t good5(void) {
    // 0x103c
    int64_t result; // 0x103c
    return result;
}

// Address range: 0x1043 - 0x104a
int64_t good6(void) {
    // 0x1043
    int64_t result; // 0x1043
    return result;
}

// Address range: 0x104a - 0x1051
int64_t good7(void) {
    // 0x104a
    int64_t result; // 0x104a
    return result;
}

// Address range: 0x1051 - 0x1058
int64_t good8(void) {
    // 0x1051
    int64_t result; // 0x1051
    return result;
}

// Address range: 0x1058 - 0x105f
int64_t good9(void) {
    // 0x1058
    int64_t result; // 0x1058
    return result;
}

// Address range: 0x105f - 0x1066
int64_t bad1(void) {
    // 0x105f
    int64_t result; // 0x105f
    return result;
}

// Address range: 0x1066 - 0x106d
int64_t bad2(void) {
    // 0x1066
    int64_t result; // 0x1066
    return result;
}

// Address range: 0x106d - 0x1074
int64_t bad3(void) {
    // 0x106d
    int64_t result; // 0x106d
    return result;
}

// Address range: 0x1074 - 0x107b
int64_t bad4(void) {
    // 0x1074
    int64_t result; // 0x1074
    return result;
}

// Address range: 0x107b - 0x1082
int64_t bad5(void) {
    // 0x107b
    int64_t result; // 0x107b
    return result;
}

// Address range: 0x1082 - 0x1089
int64_t bad6(void) {
    // 0x1082
    int64_t result; // 0x1082
    return result;
}

// Address range: 0x1089 - 0x1090
int64_t bad7(void) {
    // 0x1089
    int64_t result; // 0x1089
    return result;
}

// Address range: 0x1090 - 0x1097
int64_t bad8(void) {
    // 0x1090
    int64_t result; // 0x1090
    return result;
}

// Address range: 0x1097 - 0x109e
int64_t bad9(void) {
    // 0x1097
    int64_t result; // 0x1097
    return result;
}

// Address range: 0x10a0 - 0x1105
int64_t __libc_csu_init(int64_t a1, int64_t a2, int64_t a3) {
    int64_t result = _init(); // 0x10cc
    if ((int64_t)&g3 - (int64_t)&g2 >> 3 == 0) {
        // 0x10f6
        return result;
    }
    int64_t v1 = 0; // 0x10d4
    while (v1 + 1 != (int64_t)&g3 - (int64_t)&g2 >> 3) {
        // 0x10e0
        v1++;
    }
    // 0x10f6
    return result;
}

// Address range: 0x1110 - 0x1112
int64_t __libc_csu_fini(void) {
    // 0x1110
    int64_t result; // 0x1110
    return result;
}

// Address range: 0x1114 - 0x111d
int64_t _fini(void) {
    // 0x1114
    int64_t result; // 0x1114
    return result;
}

// --------------- Dynamically Linked Functions ---------------

// const unsigned short int ** __ctype_b_loc(void);
// void __cxa_finalize(void * d);
// void __gmon_start__(void);
// int __libc_start_main(int *(main)(int, char **, char **), int argc, char ** ubp_av, void(* init)(void), void(* fini)(void), void(* rtld_fini)(void), void(* stack_end));
// void __stack_chk_fail(void);
// int iswxdigit(wint_t wc);
// void * memset(void * s, int c, size_t n);
// int printf(const char * restrict format, ...);
// int puts(const char * s);
// int rand(void);
// void srand(unsigned int seed);
// int sscanf(const char * restrict s, const char * restrict format, ...);
// int swscanf(const wchar_t * restrict s, const wchar_t * restrict format, ...);
// time_t time(time_t * timer);
// int wprintf(const wchar_t * restrict format, ...);

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: gcc (7.5.0)
// Detected functions: 64
