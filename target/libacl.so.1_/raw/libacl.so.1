//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
// Copyright (c) Retargetable Decompiler <info@retdec.com>
//

#include <errno.h>
#include <grp.h>
#include <libintl.h>
#include <pwd.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>

// ---------------- Integer Types Definitions -----------------

typedef int64_t int128_t;

// ------------------------ Structures ------------------------

struct group {
    char * e0;
    char * e1;
    int32_t e2;
    char ** e3;
};

struct passwd {
    char * e0;
    char * e1;
    int32_t e2;
    int32_t e3;
    char * e4;
    char * e5;
    char * e6;
};

struct stat {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
    int32_t e7;
    int32_t e8;
    int32_t e9;
    int32_t e10;
    int32_t e11;
    int32_t e12;
    int32_t e13;
    int32_t e14;
    int32_t e15;
    int32_t e16;
    int32_t e17;
    int32_t e18;
    int32_t e19;
};

// ------------------- Function Prototypes --------------------

int64_t acl_add_perm(void);
int64_t acl_calc_mask(void);
int64_t acl_check(void);
int64_t acl_clear_perms(void);
int64_t acl_cmp(void);
int64_t acl_copy_entry(int64_t a1, int64_t * a2);
int64_t acl_copy_ext(void);
int64_t acl_copy_int(void);
int64_t acl_create_entry(int64_t * a1, int64_t * a2);
int64_t acl_delete_def_file(int64_t a1);
int64_t acl_delete_entry(void);
int64_t acl_delete_perm(void);
int64_t acl_dup(void);
int64_t acl_entries(int64_t a1);
int64_t acl_equiv_mode(void);
int64_t acl_error(void);
int64_t acl_extended_fd(void);
int64_t acl_extended_file(void);
int64_t acl_extended_file_nofollow(void);
int64_t acl_free(int64_t a1, int64_t a2);
int64_t acl_from_mode(int32_t a1);
int64_t acl_from_text(void);
int64_t acl_get_entry(int64_t a1, int64_t a2, int64_t * a3);
int64_t acl_get_fd(int64_t a1);
int64_t acl_get_file(int64_t a1, int64_t * a2);
int64_t acl_get_perm(int64_t a1, int64_t a2);
int64_t acl_get_permset(int64_t a1, int64_t * a2);
int64_t acl_get_qualifier(void);
int64_t acl_get_tag_type(int64_t a1, int64_t * a2);
int64_t acl_init(int64_t a1);
int64_t acl_set_fd(int64_t a1, int64_t a2);
int64_t acl_set_file(int64_t a1, int64_t * a2, int64_t a3);
int64_t acl_set_permset(void);
int64_t acl_set_qualifier(void);
int64_t acl_set_tag_type(void);
int64_t acl_size(void);
int64_t acl_to_any_text(void);
int64_t acl_to_text(void);
int64_t acl_valid(void);
int64_t function_2003(void);
int64_t function_21d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int32_t function_21d3(char * path, char * name, int64_t * value, int32_t size);
int64_t function_21e0(int64_t a1);
void function_21e3(int64_t * d);
int64_t function_21f0(int64_t a1);
void function_21f3(int64_t * ptr);
int64_t function_2200(int64_t a1, char * a2, int32_t a3, int32_t a4, int64_t a5);
int32_t * function_2203(void);
int64_t function_2210(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6);
char * function_2213(char * dest, char * src, int32_t n);
int64_t function_2220(int64_t a1, int64_t a2, int64_t a3);
int32_t function_2223(char * s1, char * s2, int32_t n);
int64_t function_2230(int64_t a1, int64_t a2);
char * function_2233(char * dest, char * src);
int64_t function_2240(int64_t a1);
void function_2243(int64_t * base, int32_t nmemb, int32_t size, int32_t (*compar)(int64_t *, int64_t *));
int64_t function_2250(int64_t a1, char * a2, int64_t a3, int64_t a4, int32_t a5);
int32_t function_2253(int32_t fd, char * name, int64_t * value, int32_t size, int32_t flags);
int64_t function_2260(int64_t a1);
struct passwd * function_2263(int32_t uid);
int64_t function_2270(int32_t a1, char * a2, int64_t a3);
char * function_2273(char * domainname, char * msgid, int32_t category);
int64_t function_2280(int64_t a1);
int32_t function_2283(char * s);
int64_t function_2290(void);
void function_2293(void);
int64_t function_22a0(int64_t a1, char a2);
char * function_22a3(char * s, int32_t c);
int64_t function_22b0(int64_t a1);
struct group * function_22b3(int32_t gid);
int64_t function_22c0(int64_t a1);
struct passwd * function_22c3(char * name);
int64_t function_22d0(int64_t a1, int64_t * a2);
int32_t function_22d3(char * file, struct stat * buf);
int64_t function_22e0(int64_t a1, int64_t * a2, int32_t a3);
int32_t function_22e3(char * nptr, char ** endptr, int32_t base);
int64_t function_22f0(int64_t a1, int64_t a2, int64_t a3);
int64_t * function_22f3(int64_t * dest, int64_t * src, int32_t n);
int64_t function_2300(int64_t a1);
struct group * function_2303(char * name);
int64_t function_2310(int64_t a1);
int64_t * function_2313(int32_t size);
int64_t function_2320(int64_t a1, char * a2, int32_t a3, int32_t a4, int64_t a5);
int32_t function_2323(int32_t fd, char * name, int64_t * value, int32_t size);
int64_t function_2330(int64_t a1, int64_t a2);
int64_t * function_2333(int64_t * ptr, int32_t size);
int64_t function_2340(int64_t a1, int64_t a2);
int32_t function_2343(int32_t fd, int32_t mode);
int64_t function_2350(int64_t a1, int32_t a2);
int32_t function_2353(char * file, int32_t mode);
int64_t function_2360(void);
int32_t function_2363(char * path, char * name);
int64_t function_2370(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int32_t a5);
int32_t function_2373(char * path, char * name, int64_t * value, int32_t size, int32_t flags);
int64_t function_2380(int64_t a1, int64_t * a2);
int32_t function_2383(int32_t fd, struct stat * buf);
int64_t function_2390(void);
int64_t function_23c0(void);
int64_t function_2403(void);
int64_t function_2443(void);
int64_t function_2453(int64_t a1, int64_t a2);
int64_t function_2490(int64_t a1, int64_t a2, uint32_t a3);
int64_t function_2560(int64_t result);
int64_t function_2630(int64_t a1);
int64_t function_26c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_2750(int64_t a1, int64_t a2);
int64_t function_27e0(int64_t a1);
int64_t function_2870(int64_t a1, int64_t * a2);
int64_t function_28f0(int64_t a1);
int64_t function_2950(int64_t * a1, char * a2);
int64_t function_2a50(int64_t * a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5);
int64_t function_2b60(int64_t a1);
int64_t function_2dc0(int64_t result);
int64_t function_2f60(int64_t a1, int64_t a2, int32_t a3, int64_t a4, int64_t * a5, uint64_t a6, int64_t a7);
int64_t function_38d3(int64_t a1, int64_t a2);
int64_t function_3923(int64_t a1);
int64_t function_39e3(int64_t a1);
int64_t function_3a23(int64_t a1, int64_t a2);
int64_t function_3ab3(int64_t a1, int64_t a2, int64_t a3);
int64_t function_3b53(uint64_t a1);
int64_t function_3d03(int64_t a1, int64_t a2);
int64_t function_3d73(void);
int64_t function_3db3(int64_t a1, int64_t a2);
int64_t function_3e73(int64_t a1, int64_t a2);
int64_t function_3ec3(int64_t a1);
int64_t function_4013(int64_t a1);
int64_t function_4093(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4153(int64_t a1, int64_t a2);
int64_t function_41a3(int64_t a1, int64_t a2);
int64_t function_4203(int64_t a1);
int64_t function_4263(int64_t a1, int64_t a2);
int64_t function_42b3(int64_t a1);
int64_t function_42f3(int64_t a1);
int64_t function_4993(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5);
int64_t function_4a33(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5);
int64_t function_4b03(int64_t a1, int64_t a2);
int64_t function_4b63(int64_t a1);
int64_t function_4bc3(int64_t a1, uint64_t a2);
int64_t function_4c23(int64_t a1);
int64_t function_4c73(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4c93(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6);
int64_t function_4e23(int64_t a1, int64_t a2);
int64_t function_4e63(int64_t a1, int64_t a2);
int64_t function_4f33(int64_t a1);
int64_t function_4f70(int64_t * a1, int64_t a2);
int64_t function_5063(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6);
int64_t function_5163(int64_t a1);
int64_t function_51f3(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_5273(void);
int64_t function_5283(void);
int64_t function_5293(int64_t a1);
int64_t function_5353(int64_t a1);
int64_t function_54e3(int64_t a1, int64_t a2);
int64_t function_5713(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5);
int64_t function_5733(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5);
int64_t function_5a53(int64_t a1, int64_t a2, int64_t a3);
int64_t function_5f07(void);
int64_t perm_copy_fd(void);
int64_t perm_copy_file(void);

// --------------------- Global Variables ---------------------

int32_t g1; // 0x1000
int64_t g2 = 0x7069746c754d000a; // 0x6079
int32_t * g3 = (int32_t *)-0x2d6500003010; // 0x6110
int32_t g4 = -0x1168; // 0x6218
char g5[3] = "@$"; // 0x8000
int64_t g6 = 0; // 0x9008
int64_t g7 = 0; // 0x9010
char * g8; // 0x9018
int32_t g9; // 0xfff
int32_t g10;

// ------------------------ Functions -------------------------

// Address range: 0x2003 - 0x201b
int64_t function_2003(void) {
    int64_t result = 0; // 0x2012
    if (*(int64_t *)0x8318 != 0) {
        // 0x2014
        __gmon_start__();
        result = &g10;
    }
    // 0x2016
    return result;
}

// Address range: 0x21d0 - 0x21d1
int64_t function_21d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x21d0
    int64_t result; // 0x21d0
    return result;
}

// Address range: 0x21d3 - 0x21db
int32_t function_21d3(char * path, char * name, int64_t * value, int32_t size) {
    // 0x21d3
    return getxattr(path, name, value, size);
}

// Address range: 0x21e0 - 0x21e1
int64_t function_21e0(int64_t a1) {
    // 0x21e0
    int64_t result; // 0x21e0
    return result;
}

// Address range: 0x21e3 - 0x21eb
void function_21e3(int64_t * d) {
    // 0x21e3
    __cxa_finalize(d);
}

// Address range: 0x21f0 - 0x21f1
int64_t function_21f0(int64_t a1) {
    // 0x21f0
    int64_t result; // 0x21f0
    return result;
}

// Address range: 0x21f3 - 0x21fb
void function_21f3(int64_t * ptr) {
    // 0x21f3
    free(ptr);
}

// Address range: 0x2200 - 0x2201
int64_t function_2200(int64_t a1, char * a2, int32_t a3, int32_t a4, int64_t a5) {
    // 0x2200
    int64_t result; // 0x2200
    return result;
}

// Address range: 0x2203 - 0x220b
int32_t * function_2203(void) {
    // 0x2203
    return __errno_location();
}

// Address range: 0x2210 - 0x2211
int64_t function_2210(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {
    // 0x2210
    int64_t result; // 0x2210
    return result;
}

// Address range: 0x2213 - 0x221b
char * function_2213(char * dest, char * src, int32_t n) {
    // 0x2213
    return strncpy(dest, src, n);
}

// Address range: 0x2220 - 0x2221
int64_t function_2220(int64_t a1, int64_t a2, int64_t a3) {
    // 0x2220
    int64_t result; // 0x2220
    return result;
}

// Address range: 0x2223 - 0x222b
int32_t function_2223(char * s1, char * s2, int32_t n) {
    // 0x2223
    return strncmp(s1, s2, n);
}

// Address range: 0x2230 - 0x2231
int64_t function_2230(int64_t a1, int64_t a2) {
    // 0x2230
    int64_t result; // 0x2230
    return result;
}

// Address range: 0x2233 - 0x223b
char * function_2233(char * dest, char * src) {
    // 0x2233
    return strcpy(dest, src);
}

// Address range: 0x2240 - 0x2241
int64_t function_2240(int64_t a1) {
    // 0x2240
    int64_t result; // 0x2240
    return result;
}

// Address range: 0x2243 - 0x224b
void function_2243(int64_t * base, int32_t nmemb, int32_t size, int32_t (*compar)(int64_t *, int64_t *)) {
    // 0x2243
    qsort(base, nmemb, size, compar);
}

// Address range: 0x2250 - 0x2251
int64_t function_2250(int64_t a1, char * a2, int64_t a3, int64_t a4, int32_t a5) {
    // 0x2250
    int64_t result; // 0x2250
    return result;
}

// Address range: 0x2253 - 0x225b
int32_t function_2253(int32_t fd, char * name, int64_t * value, int32_t size, int32_t flags) {
    // 0x2253
    return fsetxattr(fd, name, value, size, flags);
}

// Address range: 0x2260 - 0x2261
int64_t function_2260(int64_t a1) {
    // 0x2260
    int64_t result; // 0x2260
    return result;
}

// Address range: 0x2263 - 0x226b
struct passwd * function_2263(int32_t uid) {
    // 0x2263
    return getpwuid(uid);
}

// Address range: 0x2270 - 0x2271
int64_t function_2270(int32_t a1, char * a2, int64_t a3) {
    // 0x2270
    int64_t result; // 0x2270
    return result;
}

// Address range: 0x2273 - 0x227b
char * function_2273(char * domainname, char * msgid, int32_t category) {
    // 0x2273
    return dcgettext(domainname, msgid, category);
}

// Address range: 0x2280 - 0x2281
int64_t function_2280(int64_t a1) {
    // 0x2280
    int64_t result; // 0x2280
    return result;
}

// Address range: 0x2283 - 0x228b
int32_t function_2283(char * s) {
    // 0x2283
    return strlen(s);
}

// Address range: 0x2290 - 0x2291
int64_t function_2290(void) {
    // 0x2290
    int64_t result; // 0x2290
    return result;
}

// Address range: 0x2293 - 0x229b
void function_2293(void) {
    // 0x2293
    __stack_chk_fail();
}

// Address range: 0x22a0 - 0x22a1
int64_t function_22a0(int64_t a1, char a2) {
    // 0x22a0
    int64_t result; // 0x22a0
    return result;
}

// Address range: 0x22a3 - 0x22ab
char * function_22a3(char * s, int32_t c) {
    // 0x22a3
    return strchr(s, c);
}

// Address range: 0x22b0 - 0x22b1
int64_t function_22b0(int64_t a1) {
    // 0x22b0
    int64_t result; // 0x22b0
    return result;
}

// Address range: 0x22b3 - 0x22bb
struct group * function_22b3(int32_t gid) {
    // 0x22b3
    return getgrgid(gid);
}

// Address range: 0x22c0 - 0x22c1
int64_t function_22c0(int64_t a1) {
    // 0x22c0
    int64_t result; // 0x22c0
    return result;
}

// Address range: 0x22c3 - 0x22cb
struct passwd * function_22c3(char * name) {
    // 0x22c3
    return getpwnam(name);
}

// Address range: 0x22d0 - 0x22d1
int64_t function_22d0(int64_t a1, int64_t * a2) {
    // 0x22d0
    int64_t result; // 0x22d0
    return result;
}

// Address range: 0x22d3 - 0x22db
int32_t function_22d3(char * file, struct stat * buf) {
    // 0x22d3
    return stat(file, buf);
}

// Address range: 0x22e0 - 0x22e1
int64_t function_22e0(int64_t a1, int64_t * a2, int32_t a3) {
    // 0x22e0
    int64_t result; // 0x22e0
    return result;
}

// Address range: 0x22e3 - 0x22eb
int32_t function_22e3(char * nptr, char ** endptr, int32_t base) {
    // 0x22e3
    return strtol(nptr, endptr, base);
}

// Address range: 0x22f0 - 0x22f1
int64_t function_22f0(int64_t a1, int64_t a2, int64_t a3) {
    // 0x22f0
    int64_t result; // 0x22f0
    return result;
}

// Address range: 0x22f3 - 0x22fb
int64_t * function_22f3(int64_t * dest, int64_t * src, int32_t n) {
    // 0x22f3
    return memcpy(dest, src, n);
}

// Address range: 0x2300 - 0x2301
int64_t function_2300(int64_t a1) {
    // 0x2300
    int64_t result; // 0x2300
    return result;
}

// Address range: 0x2303 - 0x230b
struct group * function_2303(char * name) {
    // 0x2303
    return getgrnam(name);
}

// Address range: 0x2310 - 0x2311
int64_t function_2310(int64_t a1) {
    // 0x2310
    int64_t result; // 0x2310
    return result;
}

// Address range: 0x2313 - 0x231b
int64_t * function_2313(int32_t size) {
    // 0x2313
    return malloc(size);
}

// Address range: 0x2320 - 0x2321
int64_t function_2320(int64_t a1, char * a2, int32_t a3, int32_t a4, int64_t a5) {
    // 0x2320
    int64_t result; // 0x2320
    return result;
}

// Address range: 0x2323 - 0x232b
int32_t function_2323(int32_t fd, char * name, int64_t * value, int32_t size) {
    // 0x2323
    return fgetxattr(fd, name, value, size);
}

// Address range: 0x2330 - 0x2331
int64_t function_2330(int64_t a1, int64_t a2) {
    // 0x2330
    int64_t result; // 0x2330
    return result;
}

// Address range: 0x2333 - 0x233b
int64_t * function_2333(int64_t * ptr, int32_t size) {
    // 0x2333
    return realloc(ptr, size);
}

// Address range: 0x2340 - 0x2341
int64_t function_2340(int64_t a1, int64_t a2) {
    // 0x2340
    int64_t result; // 0x2340
    return result;
}

// Address range: 0x2343 - 0x234b
int32_t function_2343(int32_t fd, int32_t mode) {
    // 0x2343
    return fchmod(fd, mode);
}

// Address range: 0x2350 - 0x2351
int64_t function_2350(int64_t a1, int32_t a2) {
    // 0x2350
    int64_t result; // 0x2350
    return result;
}

// Address range: 0x2353 - 0x235b
int32_t function_2353(char * file, int32_t mode) {
    // 0x2353
    return chmod(file, mode);
}

// Address range: 0x2360 - 0x2361
int64_t function_2360(void) {
    // 0x2360
    int64_t result; // 0x2360
    return result;
}

// Address range: 0x2363 - 0x236b
int32_t function_2363(char * path, char * name) {
    // 0x2363
    return removexattr(path, name);
}

// Address range: 0x2370 - 0x2371
int64_t function_2370(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int32_t a5) {
    // 0x2370
    int64_t result; // 0x2370
    return result;
}

// Address range: 0x2373 - 0x237b
int32_t function_2373(char * path, char * name, int64_t * value, int32_t size, int32_t flags) {
    // 0x2373
    return setxattr(path, name, value, size, flags);
}

// Address range: 0x2380 - 0x2381
int64_t function_2380(int64_t a1, int64_t * a2) {
    // 0x2380
    int64_t result; // 0x2380
    return result;
}

// Address range: 0x2383 - 0x238b
int32_t function_2383(int32_t fd, struct stat * buf) {
    // 0x2383
    return fstat(fd, buf);
}

// Address range: 0x2390 - 0x23b9
int64_t function_2390(void) {
    // 0x2390
    return &g6;
}

// Address range: 0x23c0 - 0x23f9
int64_t function_23c0(void) {
    // 0x23c0
    return 0;
}

// Address range: 0x2403 - 0x2439
int64_t function_2403(void) {
    // 0x2403
    if (*(char *)&g6 != 0) {
        // 0x2438
        int64_t result; // 0x2403
        return result;
    }
    // 0x240d
    if (*(int64_t *)0x8330 != 0) {
        // 0x241b
        function_21e0(*(int64_t *)0x9000);
    }
    int64_t result2 = function_2390(); // 0x2427
    *(char *)&g6 = 1;
    return result2;
}

// Address range: 0x2443 - 0x2449
int64_t function_2443(void) {
    // 0x2443
    return function_23c0();
}

// Address range: 0x2453 - 0x2483
int64_t function_2453(int64_t a1, int64_t a2) {
    int64_t v1 = (int64_t)*(int32_t *)(a2 + 32); // 0x245f
    int64_t v2 = (int64_t)*(int32_t *)(a1 + 32); // 0x2465
    if (v2 < v1) {
        // 0x2482
        return 0xffffffff;
    }
    int64_t result = 1; // 0x246c
    if (v1 >= v2) {
        uint32_t v3 = *(int32_t *)(a2 + 48); // 0x246e
        uint32_t v4 = *(int32_t *)(a1 + 48); // 0x2471
        result = v4 < v3 ? 0xffffffff : (int64_t)(v4 > v3);
    }
    // 0x2482
    return result;
}

// Address range: 0x2490 - 0x2553
int64_t function_2490(int64_t a1, int64_t a2, uint32_t a3) {
    int64_t result; // 0x2490
    int64_t v1; // 0x2490
    if (a3 < 10) {
        // 0x2528
        v1 = 1;
        result = 1;
        if (a2 != 0 && a3 == 0) {
            // 0x2531
            *(char *)a1 = 48;
            // 0x253d
            *(char *)(a1 + 1) = 0;
            return 1;
        }
    } else {
        int64_t v2 = a3;
        v2 = 0xcccccccd * v2 / 0x800000000;
        int64_t v3 = 2; // 0x24c5
        int64_t v4 = 10; // 0x24d0
        int64_t v5 = v4; // 0x24d9
        int64_t v6 = v3 & 0xffffffff; // 0x24d9
        while ((int32_t)v2 >= 10) {
            // 0x24c0
            v2 = 0xcccccccd * v2 / 0x800000000;
            v3 = v6 + 1;
            v4 = 10 * v5 & 0xfffffffe;
            v5 = v4;
            v6 = v3 & 0xffffffff;
        }
        // 0x24db
        v1 = v4;
        result = 0x100000000 * v3 / 0x100000000;
    }
    int32_t v7 = a3; // 0x24dd
    int64_t v8 = v1; // 0x24dd
    int64_t v9 = a1; // 0x24dd
    int64_t v10 = a2; // 0x24dd
    if (a2 < 1 || v1 == 0) {
        // 0x251c
        if (a2 != 0) {
            // 0x253d
            *(char *)a1 = 0;
            return result;
        }
    } else {
        uint32_t v11 = (int32_t)v8;
        *(char *)v9 = (char)(v7 / v11) + 48;
        while (v10 >= 2) {
            // 0x2517
            v9++;
            v7 %= v11;
            v8 = 0xcccccccd * (v8 & 0xffffffff) / 0x800000000;
            v10--;
            int64_t v12 = v9; // 0x251a
            if (v11 < 10) {
                // 0x253d
                *(char *)v12 = 0;
                return result;
            }
            v11 = (int32_t)v8;
            *(char *)v9 = (char)(v7 / v11) + 48;
        }
    }
    // 0x2524
    return result;
}

// Address range: 0x2560 - 0x2621
int64_t function_2560(int64_t result) {
    char v1 = result;
    char v2 = v1; // 0x2566
    if (result == 0 || v1 == 0) {
        // 0x2601
        return result;
    }
    int64_t v3 = result; // 0x2566
    int64_t v4 = v3; // 0x2595
    int64_t v5 = v3; // 0x2595
    while (v2 != 92) {
        // 0x2580
        v3++;
        v2 = *(char *)v3;
        if (v2 == 0) {
            // 0x2601
            return result;
        }
        v4 = v3;
        v5 = v3;
    }
    char * v6; // 0x2560
    int64_t v7; // 0x2560
    int64_t v8; // 0x2560
    int64_t v9; // 0x2560
    char v10; // 0x25ad
    while (true) {
      lab_0x25ad_2:
        // 0x25ad
        v9 = v5;
        int64_t v11 = v4;
        char * v12 = (char *)v11;
        v10 = *v12;
        v6 = v12;
        v8 = v11;
        if (v10 != 92) {
            goto lab_0x25a0;
        } else {
            unsigned char v13 = *(char *)(v11 + 1); // 0x25be
            int64_t v14 = (int64_t)v13 + 0xffffffd0; // 0x25c2
            if ((char)v14 < 8) {
                int64_t v15 = (int64_t)*(char *)(v11 + 2) + 0xffffffd0; // 0x25cf
                v6 = v12;
                v8 = v11;
                if ((char)v15 < 8) {
                    char * v16 = (char *)(v11 + 3); // 0x25d7
                    int64_t v17 = (int64_t)*v16 + 0xffffffd0; // 0x25dc
                    v6 = v12;
                    v8 = v11;
                    if ((char)v17 < 8) {
                        // 0x25e6
                        *(char *)v9 = (char)(8 * v15 + 64 * v14 + v17);
                        v7 = v11 + 4;
                        if (*v16 == 0) {
                            // break -> 0x2601
                            break;
                        }
                        goto lab_0x25ad;
                    } else {
                        goto lab_0x25a0;
                    }
                } else {
                    goto lab_0x25a0;
                }
            } else {
                int64_t v18 = v11 + (int64_t)(v13 == 92); // 0x2611
                v6 = (char *)v18;
                v8 = v18;
                goto lab_0x25a0;
            }
        }
    }
    // 0x2601
    return result;
  lab_0x25a0:
    // 0x25a0
    *(char *)v9 = v10;
    v7 = v8 + 1;
    if (*v6 == 0) {
        return result;
    }
    goto lab_0x25ad;
  lab_0x25ad:
    // 0x25ad
    v4 = v7;
    v5 = v9 + 1;
    goto lab_0x25ad_2;
}

// Address range: 0x2630 - 0x26b7
int64_t function_2630(int64_t a1) {
    int64_t v1 = *(int64_t *)(a1 + 24); // 0x2630
    int64_t result; // 0x2630
    if (*(int64_t *)(v1 + 48) < 2) {
        // 0x26a0
        return result;
    }
    uint32_t v2 = *(int32_t *)(a1 + 32); // 0x263b
    switch (v2) {
        case 2: {
        }
        case 8: {
            // 0x26b0
            if (*(int32_t *)(a1 + 48) == -1) {
                // 0x26a0
                return result;
            }
            // break -> 0x264c
            break;
        }
        case 0: {
            // 0x26a0
            return result;
        }
    }
    int64_t * v3 = (int64_t *)(a1 + 16); // 0x264c
    int64_t v4 = *v3; // 0x264c
    int64_t * v5 = (int64_t *)(a1 + 8); // 0x2650
    int64_t v6 = *v5; // 0x2650
    *(int64_t *)(v6 + 16) = v4;
    *(int64_t *)(v4 + 8) = v6;
    int64_t v7 = *(int64_t *)(v1 + 16); // 0x265c
    int64_t v8 = v7; // 0x2663
    if (v1 != v7) {
        uint32_t v9 = *(int32_t *)(v7 + 32); // 0x2681
        if (v9 >= v2) {
            // 0x2686
            if (v2 < v9) {
                // break -> 0x2688
                break;
            }
            // 0x2670
            if (*(int32_t *)(v7 + 48) > *(int32_t *)(a1 + 48)) {
                // break -> 0x2688
                break;
            }
        }
        int64_t v10 = *(int64_t *)(v7 + 16); // 0x2678
        v8 = v1;
        while (v1 != v10) {
            int64_t v11 = v10;
            v9 = *(int32_t *)(v11 + 32);
            if (v9 >= v2) {
                // 0x2686
                v8 = v11;
                if (v2 < v9) {
                    // break -> 0x2688
                    break;
                }
                // 0x2670
                v8 = v11;
                if (*(int32_t *)(v11 + 48) > *(int32_t *)(a1 + 48)) {
                    // break -> 0x2688
                    break;
                }
            }
            // 0x2678
            v10 = *(int64_t *)(v11 + 16);
            v8 = v1;
        }
    }
    int64_t v12 = *(int64_t *)(v8 + 8); // 0x2688
    *v3 = v8;
    *v5 = v12;
    *(int64_t *)(v12 + 16) = a1;
    int64_t result2 = *v3; // 0x2698
    *(int64_t *)(result2 + 8) = a1;
    // 0x26a0
    return result2;
}

// Address range: 0x26c0 - 0x274a
int64_t function_26c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x26c0
    int64_t v1; // 0x26c0
    int32_t v2 = v1;
    int32_t v3; // 0x26c0
    if (v2 < 0) {
        // 0x2730
        int64_t v4; // 0x26c0
        int64_t v5 = function_2200(a1, "system.posix_acl_access", 0, 0, v4); // 0x2730
        if (*(int32_t *)v5 != 61) {
            // 0x2706
            return 0xffffffff;
        }
        // 0x2730
        v3 = v5;
    } else {
        // 0x26dd
        v3 = v2;
        if (v2 > 28) {
            // 0x2706
            return 1;
        }
    }
    int32_t v6 = v3;
    int32_t v7 = v6 - 27; // 0x26fb
    int64_t result = v7 < 0 == (26 - v6 & v6) < 0 == (v7 != 0); // 0x26fe
    if (v6 >= 0) {
        // 0x2706
        return result;
    }
    int32_t v8 = *(int32_t *)function_2200(a1, "system.posix_acl_default", 0, 0, result); // 0x2718
    return v8 != 61 ? 0xffffffff : 0;
}

// Address range: 0x2750 - 0x27d7
int64_t function_2750(int64_t a1, int64_t a2) {
    int64_t * v1 = (int64_t *)(a1 + 40); // 0x2754
    int64_t v2 = *v1; // 0x2754
    int64_t result; // 0x2750
    if (*(int64_t *)(a1 + 32) == v2) {
        int64_t v3 = function_2310(72); // 0x27c5
        if (v3 == 0) {
            // 0x27b5
            return 0;
        }
        // 0x27cf
        *(int32_t *)v3 = 0x19d6b;
        result = v3;
    } else {
        int64_t v4 = v2 - 72; // 0x275e
        *v1 = v4;
        *(int16_t *)v4 = -0x6295;
        *(int16_t *)(v2 - 70) = 0;
        result = v4;
    }
    int64_t * v5 = (int64_t *)(a1 + 8); // 0x2775
    int64_t v6 = *v5; // 0x2775
    int64_t * v7 = (int64_t *)(a1 + 48); // 0x2779
    *v7 = *v7 + 1;
    *(int64_t *)(result + 16) = a1;
    *(int64_t *)(result + 8) = v6;
    *(int64_t *)(v6 + 16) = result;
    *v5 = result;
    *(int64_t *)(result + 24) = a1;
    *(int32_t *)(result + 32) = 0;
    *(int32_t *)(result + 56) = 0x1ed5;
    *(int32_t *)(result + 64) = 0;
    *(int32_t *)(result + 40) = 0x1c27;
    *(int32_t *)(result + 48) = -1;
    // 0x27b5
    return result;
}

// Address range: 0x27e0 - 0x286d
int64_t function_27e0(int64_t a1) {
    int64_t result = function_2310(56); // 0x27ef
    if (result == 0) {
        // 0x282e
        return result;
    }
    int64_t v1 = 0x100000000 * a1 / 0x100000000; // 0x27e3
    *(int32_t *)result = 0x1712c;
    *(int64_t *)(result + 48) = 0;
    *(int64_t *)(result + 16) = result;
    *(int64_t *)(result + 8) = result;
    *(int64_t *)(result + 24) = result;
    int32_t v2 = v1; // 0x2819
    if (v2 >= 0 != v2 != 0) {
        // 0x281d
        *(int64_t *)(result + 32) = 0;
        // 0x2825
        *(int64_t *)(result + 40) = 0;
        // 0x282e
        return result;
    }
    int64_t v3 = 72 * v1; // 0x2844
    int64_t v4 = function_2310(v3); // 0x284b
    *(int64_t *)(result + 32) = v4;
    if (v4 != 0) {
        // 0x285a
        *(int64_t *)(result + 40) = v4 + v3;
        return result;
    }
    // 0x2825
    *(int64_t *)(result + 40) = 0;
    // 0x282e
    return result;
}

// Address range: 0x2870 - 0x28e9
int64_t function_2870(int64_t a1, int64_t * a2) {
    int64_t v1 = 8 * *(int64_t *)(a1 + 48) | 4; // 0x2878
    *a2 = v1;
    int64_t result = function_2310(v1); // 0x2883
    if (result == 0) {
        // 0x28e7
        return result;
    }
    int64_t v2 = *(int64_t *)(a1 + 16); // 0x288d
    *(int32_t *)result = 2;
    if (v2 == a1) {
        // 0x28e7
        return result;
    }
    int64_t v3 = result + 4; // 0x2870
    int64_t v4 = v2; // 0x2870
    while (true) {
        int64_t v5 = v4;
        int64_t v6 = v3;
        int32_t v7 = *(int32_t *)(v5 + 32); // 0x28b8
        *(int16_t *)v6 = (int16_t)v7;
        *(int16_t *)(v6 + 2) = (int16_t)*(int32_t *)(v5 + 64);
        if (v7 != 2 == (v7 != 8)) {
            int64_t v8 = *(int64_t *)(v5 + 16); // 0x28a8
            *(int32_t *)(v6 + 4) = -1;
            v4 = v8;
            if (v8 == a1) {
                // break -> 0x28e7
                break;
            }
        } else {
            int64_t v9 = *(int64_t *)(v5 + 16); // 0x28d7
            *(int32_t *)(v6 + 4) = *(int32_t *)(v5 + 48);
            v4 = v9;
            if (v9 == a1) {
                // break -> 0x28e7
                break;
            }
        }
        // 0x28b8
        v3 = v6 + 8;
    }
    // 0x28e7
    return result;
}

// Address range: 0x28f0 - 0x2949
int64_t function_28f0(int64_t a1) {
    int64_t * v1 = (int64_t *)(a1 + 16); // 0x28f4
    int64_t v2 = *v1; // 0x28f4
    if (v2 != a1) {
        int64_t v3 = v2;
        int64_t v4 = *(int64_t *)(v3 + 16); // 0x28fd
        *v1 = v4;
        *(int16_t *)v3 = 0;
        while (*(char *)(v3 + 2) % 2 == 0) {
            // 0x2910
            if (v4 == a1) {
                // break (via goto) -> 0x2918
                goto lab_0x2918;
            }
            v3 = v4;
            v4 = *(int64_t *)(v3 + 16);
            *v1 = v4;
            *(int16_t *)v3 = 0;
        }
        // 0x2930
        function_21f0(v3);
        int64_t v5 = *v1; // 0x28f4
        while (v5 != a1) {
            // 0x28fd
            v3 = v5;
            v4 = *(int64_t *)(v3 + 16);
            *v1 = v4;
            *(int16_t *)v3 = 0;
            while (*(char *)(v3 + 2) % 2 == 0) {
                // 0x2910
                if (v4 == a1) {
                    // break (via goto) -> 0x2918
                    goto lab_0x2918;
                }
                v3 = v4;
                v4 = *(int64_t *)(v3 + 16);
                *v1 = v4;
                *(int16_t *)v3 = 0;
            }
            // 0x2930
            function_21f0(v3);
            v5 = *v1;
        }
    }
  lab_0x2918:
    // 0x2918
    function_21f0(*(int64_t *)(a1 + 32));
    *(int16_t *)a1 = 0;
    if (*(char *)(a1 + 2) % 2 != 0) {
        // 0x2940
        return function_21f0(a1);
    }
    // 0x292d
    return 0;
}

// Address range: 0x2950 - 0x2a48
int64_t function_2950(int64_t * a1, char * a2) {
    int64_t v1 = (int64_t)a2;
    int64_t v2 = function_2280(v1); // 0x2963
    int64_t v3; // 0x2950
    char v4 = v3;
    char v5 = v4; // 0x2974
    int64_t v6 = v1; // 0x2974
    char v7 = v4; // 0x2974
    int64_t v8 = v1; // 0x2974
    int64_t v9; // 0x2950
    if (v4 < 33) {
        v9 = v6;
        while ((1 << (int64_t)(v5 % 64) & -0x100002601) == 0) {
            // 0x2986
            v6++;
            v5 = *(char *)v6;
            v7 = v5;
            v8 = v6;
            if (v5 >= 33) {
                goto lab_0x2992;
            }
            v9 = v6;
        }
    } else {
      lab_0x2992:
        // 0x2992
        v9 = v8;
        int64_t v10 = v8; // 0x2994
        if (v7 == 35) {
            while (true) {
              lab_0x29cc:;
                int64_t v11 = v10 + 1; // 0x29cc
                v9 = v11;
                v10 = v11;
                switch (*(char *)v11) {
                    case 10: {
                        goto lab_0x2996;
                    }
                    case 0: {
                        goto lab_0x2996;
                    }
                    default: {
                        goto lab_0x29cc;
                    }
                }
            }
        }
    }
  lab_0x2996:;
    int64_t v12 = function_2220(v9, v1, v2); // 0x299f
    int64_t v13 = v2; // 0x29a6
    if ((int32_t)v12 != 0) {
        // 0x29a8
        v13 = 1;
        int64_t v14; // 0x2950
        if (*(char *)v9 != (char)v14) {
            // 0x29b7
            return 0;
        }
    }
    int64_t v15 = v13 + v9;
    unsigned char v16 = *(char *)v15; // 0x29e3
    int64_t v17 = v16; // 0x29e3
    int64_t v18 = v17; // 0x29e8
    int64_t v19 = v15; // 0x29e8
    int64_t v20 = v17; // 0x29e8
    int64_t v21 = v15; // 0x29e8
    if (v16 >= 33) {
      lab_0x2a0a:;
        int64_t v22 = v20; // 0x2a0c
        int64_t v23 = v21; // 0x2a0c
        if (v20 == 35) {
            int64_t v24 = v21 + 1; // 0x2a30
            unsigned char v25 = *(char *)v24; // 0x2a30
            int64_t v26 = v24; // 0x2a3a
            while (v25 != 10 == (v25 != 0)) {
                // 0x2a30
                v24 = v26 + 1;
                v25 = *(char *)v24;
                v26 = v24;
            }
            // 0x2a0e
            v22 = v25;
            v23 = v24;
        }
        // 0x2a19
        *a1 = v23 + (int64_t)((char)v22 == 58);
        return 1;
    }
    while ((1 << v18 % 64 & -0x100002601) == 0) {
        int64_t v27 = v19 + 1; // 0x29fe
        unsigned char v28 = *(char *)v27; // 0x29fe
        int64_t v29 = v28; // 0x29fe
        v18 = v29;
        v19 = v27;
        v20 = v29;
        v21 = v27;
        if (v28 >= 33) {
            goto lab_0x2a0a;
        }
    }
    // 0x2a19
    *a1 = v19;
    return 1;
}

// Address range: 0x2a50 - 0x2b5c
int64_t function_2a50(int64_t * a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {
    int64_t v1 = (int64_t)a1;
    uint64_t v2; // 0x2a50
    int64_t v3 = v2 % 256; // 0x2a60
    int64_t v4 = v3; // 0x2a67
    int64_t v5 = v1; // 0x2a67
    int64_t v6; // 0x2a50
    int64_t v7; // 0x2a50
    bool v8; // 0x2a50
    if ((char)v2 < 33) {
        int64_t v9 = v1;
        int64_t v10 = v3;
        while ((1 << v10 % 64 & -0x100002601) == 0) {
            int64_t v11 = v9 + 1; // 0x2a8a
            unsigned char v12 = *(char *)v11; // 0x2a8a
            int64_t v13 = v12; // 0x2a8a
            v4 = v13;
            v5 = v11;
            if (v12 >= 33) {
                goto lab_0x2a96;
            }
            v9 = v11;
            v10 = v13;
        }
        // 0x2b55
        v6 = v10;
        v8 = v10 != 0;
        v7 = v9;
        goto lab_0x2b35;
    } else {
        goto lab_0x2a96;
    }
  lab_0x2a96:;
    int64_t v14 = v4; // 0x2a98
    int64_t v15 = v5; // 0x2a98
    if (v4 == 35) {
        int64_t v16 = v5 + 1; // 0x2b24
        unsigned char v17 = *(char *)v16; // 0x2b24
        int64_t v18 = v16; // 0x2b33
        while (v17 != 10 && v17 != 0) {
            // 0x2b24
            v16 = v18 + 1;
            v17 = *(char *)v16;
            v18 = v16;
        }
        // 0x2b35
        v6 = v17;
        v8 = v17 != 0;
        v7 = v16;
        goto lab_0x2b35;
    } else {
        goto lab_0x2a9e;
    }
  lab_0x2b35:
    // 0x2b35
    v14 = v6;
    v15 = v7;
    int64_t v19 = v7; // 0x2b37
    if ((char)v6 != 13 == v8) {
        goto lab_0x2a9e;
    } else {
        goto lab_0x2aca;
    }
  lab_0x2a9e:
    // 0x2a9e
    if (v14 < 59) {
        // 0x2ac4
        if ((1 << v14 % 64 & 0x400100000000400) != 0) {
            // break -> 0x2aca
            break;
        }
    }
    int64_t v20 = v15 + 1; // 0x2ab0
    unsigned char v21 = *(char *)v20; // 0x2ab0
    v19 = v20;
    while (v21 != 0) {
        // 0x2abc
        v19 = v20;
        if (v21 == 13) {
            // break -> 0x2aca
            break;
        }
        int64_t v22 = v20;
        uint64_t v23 = (int64_t)v21;
        if (v23 < 59) {
            // 0x2ac4
            v19 = v22;
            if ((1 << v23 % 64 & 0x400100000000400) != 0) {
                // break -> 0x2aca
                break;
            }
        }
        // 0x2ab0
        v20 = v22 + 1;
        v21 = *(char *)v20;
        v19 = v20;
    }
    goto lab_0x2aca;
  lab_0x2aca:;
    int64_t v24 = v19;
    if (v24 == v1) {
        // 0x2b00
        *a1 = v24 + (int64_t)(*(char *)v24 == 58);
        return 0;
    }
    int64_t v25 = v24 - v1; // 0x2ad6
    int64_t v26 = function_2310(v25 + 1); // 0x2add
    if (v26 == 0) {
        // 0x2b00
        *a1 = v24 + (int64_t)(*(char *)v24 == 58);
        return 0;
    }
    int64_t result = function_22f0(v26, v1, v25); // 0x2af3
    *(char *)(result + v25) = 0;
    // 0x2b00
    *a1 = v24 + (int64_t)(*(char *)v24 == 58);
    return result;
}

// Address range: 0x2b60 - 0x2dbf
int64_t function_2b60(int64_t a1) {
    // 0x2b60
    int64_t v1; // bp-40, 0x2b60
    int64_t v2 = &v1; // 0x2b6a
    int64_t * v3 = (int64_t *)(a1 + 48); // 0x2b6e
    uint64_t v4 = *v3; // 0x2b6e
    int64_t v5 = __readfsqword(40); // 0x2b72
    int64_t v6 = 8 * v4 + 23; // 0x2b84
    int64_t v7 = v6 & -0x1000; // 0x2b8f
    int64_t v8 = v2 - v7; // 0x2b95
    int64_t v9 = v2; // 0x2b9f
    int64_t v10 = v2; // 0x2b9f
    if (v7 != 0) {
        v9 -= (int64_t)&g1;
        v10 = v9;
        while (v9 != v8) {
            // 0x2ba1
            v9 -= (int64_t)&g1;
            v10 = v9;
        }
    }
    int64_t v11 = v6 & (int64_t)(int32_t)&g9 & -16; // 0x2bb6
    int64_t v12 = v10 - v11; // 0x2bbc
    int64_t v13 = v12 + 15 & -16; // 0x2bcd
    int64_t v14 = v8; // 0x2bd5
    int64_t v15 = v11; // 0x2bd5
    int64_t v16 = v4; // 0x2bd5
    int64_t v17 = a1; // 0x2bd5
    if (v4 >= 2) {
        int64_t * v18 = (int64_t *)(a1 + 16); // 0x2bdb
        int64_t v19 = *v18; // 0x2bdb
        int64_t v20 = v13; // 0x2be5
        if (v19 != a1) {
            *(int64_t *)v20 = v19;
            int64_t v21 = *(int64_t *)(v19 + 16); // 0x2bf3
            int64_t v22 = v21; // 0x2bfe
            v20 += 8;
            while (v21 != a1) {
                // 0x2bf0
                *(int64_t *)v20 = v22;
                v21 = *(int64_t *)(v22 + 16);
                v22 = v21;
                v20 += 8;
            }
        }
        // 0x2c00
        function_2240(v13);
        v17 = 8 * *v3;
        if (v17 != 0) {
            int64_t * v23 = (int64_t *)v13; // 0x2c30
            int64_t v24 = v13 + 8; // 0x2c33
            *(int64_t *)(*v23 + 8) = a1;
            int64_t v25 = v24; // 0x2c42
            int64_t v26 = *v23; // 0x2c42
            while (v24 != v17 + v13) {
                // 0x2c30
                v23 = (int64_t *)v25;
                v24 = v25 + 8;
                *(int64_t *)(*v23 + 8) = v26;
                v25 = v24;
                v26 = *v23;
            }
        }
        // 0x2c44
        v16 = v13 - 8;
        int64_t v27 = v17 + v16; // 0x2c44
        int64_t * v28 = (int64_t *)v27;
        int64_t v29 = *v28; // 0x2c51
        *(int64_t *)(a1 + 8) = v29;
        v14 = a1;
        v15 = v29;
        if (v17 != 0) {
            // 0x2c63
            *(int64_t *)(v29 + 16) = a1;
            int64_t v30 = v27 - 8; // 0x2c67
            int64_t v31 = *v28; // 0x2c6b
            v14 = v31;
            v15 = v29;
            if (v30 != v16) {
                int64_t * v32 = (int64_t *)v30;
                int64_t v33 = *v32; // 0x2c60
                *(int64_t *)(v33 + 16) = v31;
                int64_t v34 = v30 - 8; // 0x2c67
                int64_t v35 = *v32; // 0x2c6b
                int64_t v36 = v34; // 0x2c72
                v14 = v35;
                v15 = v33;
                while (v34 != v16) {
                    // 0x2c60
                    v32 = (int64_t *)v36;
                    v33 = *v32;
                    *(int64_t *)(v33 + 16) = v35;
                    v34 = v36 - 8;
                    v35 = *v32;
                    v36 = v34;
                    v14 = v35;
                    v15 = v33;
                }
            }
        }
        // 0x2c74
        *v18 = *(int64_t *)v13;
    }
    // 0x2c7c
    if (v5 == __readfsqword(40)) {
        // 0x2c8b
        return 0;
    }
    // 0x2cab
    function_2290();
    *(int64_t *)(v12 - 16) = v13;
    int64_t v37; // bp-8, 0x2b60
    *(int64_t *)(v12 - 24) = (int64_t)&v37;
    *(int64_t *)(v12 - 32) = a1;
    int64_t v38 = v16; // 0x2cbe
    int64_t v39; // 0x2b60
    int64_t v40; // 0x2cee
    int64_t v41; // 0x2ce2
    int32_t v42; // 0x2d22
    if (v16 >= 4) {
        // 0x2cc4
        v38 = v16;
        if (*(int32_t *)v17 == 2) {
            uint64_t v43 = v16 - 4; // 0x2ccd
            v38 = v43;
            if (v43 % 8 == 0) {
                // 0x2cdb
                v40 = function_27e0(v43 / 8);
                if (v40 == 0) {
                    // 0x2c8b
                    return 0;
                }
                int64_t v44 = v17 + 4; // 0x2cdb
                v41 = v43 & -8;
                int64_t v45 = v44; // 0x2d02
                if (v41 == 0) {
                  lab_0x2da3:
                    // 0x2da3
                    if ((int32_t)function_2b60(v40) == 0) {
                        // 0x2c8b
                        return v40 + 8;
                    }
                    // 0x2d54
                    function_28f0(v40);
                    return 0;
                }
                int64_t v46 = function_2750(v40, v41); // 0x2d15
                while (v46 != 0) {
                    int64_t v47 = v45;
                    uint16_t v48 = *(int16_t *)v47; // 0x2d1f
                    v42 = v48;
                    *(int32_t *)(v46 + 32) = v42;
                    uint16_t v49 = *(int16_t *)(v47 + 2); // 0x2d27
                    *(int32_t *)(v46 + 64) = (int32_t)v49;
                    if (v48 >= 33) {
                        // 0x2d49
                        v39 = v49;
                        goto lab_0x2d49_2;
                    }
                    uint16_t v50 = v48 % 64;
                    int64_t v51 = v50 == 0 ? 1 : 1 << (int64_t)v50;
                    int32_t v52 = -1; // 0x2d3f
                    if ((v51 & 0x100010012) == 0) {
                        // 0x2d41
                        v39 = v51;
                        if ((v51 & 260) == 0) {
                            goto lab_0x2d49_2;
                        }
                        // 0x2d90
                        v52 = *(int32_t *)(v47 + 4);
                    }
                    // 0x2d93
                    v45 = v47 + 8;
                    *(int32_t *)(v46 + 48) = v52;
                    if (v44 + v41 == v45) {
                        goto lab_0x2da3;
                    }
                    v46 = function_2750(v40, v41);
                }
              lab_0x2d54:
                // 0x2d54
                function_28f0(v40);
                return 0;
            }
        }
    }
    // 0x2d70
    int64_t v53; // 0x2b60
    int64_t v54 = function_2200(v17, (char *)v38, (int32_t)v15, (int32_t)v14, v53); // 0x2d70
    *(int32_t *)v54 = 22;
    // 0x2c8b
    return 0;
  lab_0x2d49_2:;
    int64_t v55 = function_2200(v40, (char *)v41, (int32_t)v39, v42, v53); // 0x2d49
    *(int32_t *)v55 = 22;
    goto lab_0x2d54;
}

// Address range: 0x2dc0 - 0x2f53
int64_t function_2dc0(int64_t result) {
    // 0x2dc0
    if (result == 0) {
        // 0x2edc
        return 0;
    }
    char v1 = result;
    int64_t v2 = result; // 0x2dda
    char v3 = v1; // 0x2dda
    if (v1 == 0) {
        // 0x2edc
        return result;
    }
    int64_t v4 = 0; // 0x2dda
    int64_t v5; // 0x2dc0
    while (true) {
      lab_0x2df8:;
        int64_t v6 = v4;
        char v7 = v3;
        if (v7 == 92) {
            // 0x2e0b
            v5 = v6 + 1;
            goto lab_0x2e0f;
        } else {
            // 0x2dfe
            v5 = v6;
            if (function_22a0((int64_t)":, \t\n\r", v7) == 0) {
                goto lab_0x2e0f;
            } else {
                // 0x2e0b
                v5 = v6 + 1;
                goto lab_0x2e0f;
            }
        }
    }
  lab_0x2e1c:;
    // 0x2e1c
    int64_t v8; // 0x2dc0
    if (v8 == 0) {
        // 0x2edc
        return result;
    }
    int64_t v9 = (int64_t)g8; // 0x2e2f
    int64_t v10 = 3 * v8 + v2 - result; // 0x2e36
    int64_t v11 = v9; // 0x2e44
    if (v10 + 1 > g7) {
        int64_t v12 = v10 + 256 & -256; // 0x2f0a
        int64_t v13 = function_2330(v9, v12); // 0x2f0f
        if (v13 == 0) {
            // 0x2edc
            return 0;
        }
        // 0x2f1c
        g8 = (char *)v13;
        g7 = v12;
        v11 = v13;
    }
    char v14 = v1; // 0x2e51
    int64_t v15 = result; // 0x2e51
    int64_t v16 = v11; // 0x2e51
    int64_t v17; // 0x2dc0
    int64_t v18; // 0x2dc0
    int64_t v19; // 0x2dc0
    int64_t v20; // 0x2dc0
    char v21; // 0x2dc0
    while (true) {
      lab_0x2ea0_2:;
        int64_t v22 = v16;
        v18 = v15;
        char v23 = v14;
        if (function_22a0((int64_t)":, \t\n\r", v23) != 0) {
            // 0x2e58
            *(char *)v22 = 92;
            char * v24 = (char *)v18; // 0x2e5d
            *(char *)(v22 + 1) = *v24 / 64 | 48;
            *(char *)(v22 + 2) = *v24 / 8 % 8 | 48;
            *(char *)(v22 + 3) = *v24 % 8 | 48;
            v19 = v22 + 4;
            goto lab_0x2e91;
        } else {
            if (v23 == 92) {
                // 0x2ee8
                *(int16_t *)v22 = 0x5c5c;
                v19 = v22 + 2;
                goto lab_0x2e91;
            } else {
                int64_t v25 = v18 + 1; // 0x2eb7
                *(char *)v22 = v23;
                char v26 = *(char *)v25; // 0x2ec3
                v21 = v26;
                v17 = v25;
                v20 = v22 + 1;
                if (v26 == 0) {
                    // break -> 0x2ed0
                    break;
                }
                goto lab_0x2ea0;
            }
        }
    }
  lab_0x2ed0:;
    // 0x2ed0
    int64_t v27; // 0x2dc0
    *(char *)v27 = 0;
    // 0x2edc
    return (int64_t)g8;
  lab_0x2e91:;
    int64_t v28 = v18 + 1; // 0x2e91
    char v29 = *(char *)v28; // 0x2e91
    v21 = v29;
    v17 = v28;
    v20 = v19;
    v27 = v19;
    if (v29 == 0) {
        // break -> 0x2ed0
        goto lab_0x2ed0;
    }
    goto lab_0x2ea0;
  lab_0x2ea0:
    // 0x2ea0
    v14 = v21;
    v15 = v17;
    v16 = v20;
    goto lab_0x2ea0_2;
  lab_0x2e0f:
    // 0x2e0f
    v8 = v5;
    v2++;
    char v30 = *(char *)v2; // 0x2e0f
    v3 = v30;
    v4 = v8;
    if (v30 == 0) {
        // break -> 0x2e1c
        goto lab_0x2e1c;
    }
    goto lab_0x2df8;
}

// Address range: 0x2f60 - 0x38c6
int64_t function_2f60(int64_t a1, int64_t a2, int32_t a3, int64_t a4, int64_t * a5, uint64_t a6, int64_t a7) {
    int64_t v1 = (int64_t)a5;
    if (a1 == 0 || *(int16_t *)(a1 - 8) != 0x712c) {
        // 0x388e
        *(int32_t *)function_2200(a1, (char *)a2, a3, (int32_t)a4, v1) = 22;
        // 0x3606
        return 0;
    }
    // 0x2f99
    if (a5 != NULL) {
        // 0x2fb1
        function_2280(v1);
    }
    int64_t v2 = 15 * *(int64_t *)(a1 + 40) + 9; // 0x2fce
    int64_t v3 = function_2310(v2); // 0x2fd6
    if (v3 == 0) {
        // 0x3606
        return 0;
    }
    // 0x2fe7
    *(int32_t *)v3 = 0x1d5f2;
    int64_t result = v3 + 8; // 0x2fed
    int64_t v4 = *(int64_t *)(a1 + 8); // 0x2ff1
    int64_t v5 = (0x100000000 * a1 - 0x800000000) / 0x100000000;
    int64_t v6; // 0x2f60
    if (a6 % 4 == 0) {
        // 0x3880
        if (v4 == v5) {
            goto lab_0x38bb;
        } else {
            // 0x3033
            v6 = 0;
            goto lab_dec_label_pc_unknown;
        }
    } else {
        // 0x300b
        if (v4 == v5) {
            goto lab_0x38bb;
        } else {
            int64_t v7 = v4;
            while (*(int32_t *)(v7 + 32) != 16) {
                int64_t v8 = *(int64_t *)(v7 + 16); // 0x3020
                if (v8 == v5) {
                    // 0x3033
                    v6 = 0;
                    goto lab_dec_label_pc_unknown;
                }
                v7 = v8;
            }
            // 0x3033
            v6 = v7 + 8;
            if (v7 == 0) {
                // 0x3033
                v6 = 0;
                goto lab_dec_label_pc_unknown;
            } else {
                goto lab_dec_label_pc_unknown;
            }
        }
    }
  lab_0x3118:;
    // 0x3118
    int64_t v9; // 0x2f60
    int64_t v10 = v9;
    int64_t v11 = 2 * v10; // 0x3118
    v9 = v11;
    int64_t v12; // 0x3108
    if (v12 < v11) {
        goto lab_0x3120;
    } else {
        goto lab_0x3118;
    }
  lab_0x3120:;
    int64_t v13 = v11 + 8; // 0x3120
    int64_t v14; // 0x2f60
    int64_t v15 = function_2330(v14, v13); // 0x3127
    if (v15 == 0) {
        goto lab_0x35eb;
    }
    int64_t v16 = v15 + 8; // 0x3135
    int64_t v17; // 0x2f60
    int64_t v18 = v16 + v17; // 0x3073
    int64_t v19 = v18; // 0x307a
    int64_t v20 = v11 - v17; // 0x307a
    int64_t v21; // 0x2f60
    int64_t v22 = v21; // 0x307a
    int64_t v23 = v15; // 0x307a
    int64_t v24 = v17; // 0x307a
    int64_t v25; // 0x30da
    int64_t v26 = v25; // 0x307a
    int64_t v27 = v13; // 0x307a
    int64_t v28 = v11; // 0x307a
    int64_t v29; // 0x2f60
    int64_t v30 = v29; // 0x307a
    int64_t v31 = v16; // 0x307a
    int64_t v32 = v16; // 0x307a
    if (v21 == 0) {
        // break -> 0x35e0
        goto lab_0x35e0_4;
    }
    goto lab_0x3080;
  lab_0x38bb:;
    int64_t v72 = 0;
    *(char *)(v72 + 8 + v3) = 0;
    goto lab_0x322f;
  lab_0x322f:
    // 0x322f
    if (a2 != 0) {
        // 0x323d
        *(int64_t *)a2 = v72;
    }
    // 0x3606
    return result;
  lab_dec_label_pc_unknown:;
    int64_t v57 = v6;
    if (v4 != 0) {
        int64_t v62 = a3;
        int64_t v73; // 0x2fcb
        int64_t v74 = v73 + 1; // 0x2fd2
        int64_t v75; // 0x3040
        int16_t * v59 = (int16_t *)v75;
        char v67 = a4;
        v19 = result;
        v20 = v74;
        v22 = v4;
        v23 = v3;
        v24 = 0;
        v26 = a6;
        v27 = v57;
        v28 = v74;
        int64_t v76; // 0x304c
        v30 = v76;
        v31 = a4;
        v32 = result;
        while (true) {
          lab_0x3080:;
            int64_t v33 = v31;
            int64_t v34 = v30;
            int64_t v35 = v27;
            v14 = v23;
            int64_t v36 = v22;
            int64_t v37 = v19;
            int16_t v38 = *(int16_t *)v36; // 0x3080
            if (v38 != -0x6295) {
                // break -> 0x35e0
                break;
            }
            int64_t v39 = v32;
            int64_t v40 = v28;
            int64_t v41 = v26;
            int64_t v42 = v24;
            int64_t v43 = v20;
            int64_t v44 = v14 + 8;
            int64_t v45 = v34; // 0x2f60
            int64_t v46 = v35; // 0x2f60
            int64_t v47 = v41; // 0x2f60
            int64_t v48 = v42; // 0x2f60
            int64_t v49 = v36; // 0x2f60
            int64_t v50 = v43; // 0x2f60
            int64_t v51 = v37; // 0x2f60
            while (true) {
                int64_t v52 = v51;
                int64_t v53 = v50;
                v21 = v49;
                v17 = v48;
                int64_t v54 = v47;
                int64_t v55 = v46;
                int64_t v56 = v45;
                if (v57 != 0) {
                    int16_t v58 = *v59; // 0x3096
                    if (v58 != -0x6295) {
                        // break (via goto) -> 0x35e0
                        goto lab_0x35e0_4;
                    }
                }
                int64_t v60 = v56; // 0x30a8
                int64_t v61 = v55; // 0x30a8
                if (a3 != 0) {
                    // 0x30aa
                    function_2210(v52, v62, v53, v33, v52, v54);
                    function_2280(v62);
                    v60 = v53;
                    v61 = v62;
                }
                uint32_t v63 = *(int32_t *)(v21 + 32); // 0x30da
                v25 = v63;
                if (v63 < 33) {
                    int32_t v64 = *(int32_t *)(4 * v25 + (int64_t)&g3); // 0x30ee
                    return (int64_t)v64 + (int64_t)&g3;
                }
                // 0x3100
                v29 = v60;
                int64_t v65; // 0x2f60
                v12 = v17 + v65;
                v9 = v40;
                if (v12 >= v40) {
                    goto lab_0x3118;
                }
                int64_t v66 = v61;
                *(char *)(v44 + v17) = v67;
                int64_t v68 = *(int64_t *)(v21 + 16); // 0x31fc
                if (v68 == v5) {
                    // 0x320b
                    if (a5 == NULL || v17 == 0) {
                        goto lab_0x38bb;
                    } else {
                        // 0x3222
                        function_2230(v52, v1);
                        goto lab_0x322f;
                    }
                }
                int64_t v69 = v17 + 1; // 0x31f3
                int64_t v70 = v69 + v39; // 0x3073
                if (v68 == 0) {
                    // break (via goto) -> 0x35e0
                    goto lab_0x35e0_4;
                }
                int16_t v71 = *(int16_t *)v68; // 0x3080
                v45 = v29;
                v46 = v66;
                v47 = v25;
                v48 = v69;
                v49 = v68;
                v50 = v40 - v69;
                v51 = v70;
                if (v71 != -0x6295) {
                    // break (via goto) -> 0x35e0
                    goto lab_0x35e0_4;
                }
            }
            goto lab_0x3120;
        }
    }
  lab_0x35e0_4:;
    int64_t v77 = v57 != 0 ? v57 - 8 : 0;
    int64_t v78 = function_2200(v2, (char *)v57, (int32_t)v77, (int32_t)a4, result); // 0x35e0
    *(int32_t *)v78 = 22;
  lab_0x35eb:
    // 0x35eb
    *(int16_t *)v3 = 0;
    if (*(char *)(v3 + 2) % 2 != 0) {
        // 0x389e
        function_21f0(v3);
    }
    // 0x3606
    return 0;
}

// Address range: 0x38d0 - 0x38d1
int64_t acl_add_perm(void) {
    // 0x38d0
    int64_t result; // 0x38d0
    return result;
}

// Address range: 0x38d3 - 0x391f
int64_t function_38d3(int64_t a1, int64_t a2) {
    // 0x38d3
    if (a1 == 0 || *(int16_t *)(a1 - 8) != 0x1ed5) {
        // 0x3900
        int64_t v1; // 0x38d3
        int64_t v2; // 0x38d3
        int64_t v3; // 0x38d3
        int64_t v4 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1); // 0x3900
        *(int32_t *)v4 = 22;
        return 0xffffffff;
    }
    int64_t result = 0xffffffff; // 0x38eb
    if ((a2 & 0xfffffff8) == 0) {
        // 0x38ed
        *(int32_t *)a1 = (int32_t)(a2 | a1);
        result = 0;
    }
    // 0x38f1
    return result;
}

// Address range: 0x3920 - 0x3921
int64_t acl_calc_mask(void) {
    // 0x3920
    int64_t result; // 0x3920
    return result;
}

// Address range: 0x3923 - 0x39db
int64_t function_3923(int64_t a1) {
    int64_t v1 = 0; // 0x3928
    int64_t v2; // 0x3923
    int64_t v3; // 0x3923
    int64_t v4; // 0x3923
    int64_t v5; // 0x3923
    int64_t v6; // 0x3923
    int64_t v7; // 0x3923
    int64_t v8; // 0x392d
    if (a1 == 0) {
        goto lab_0x397c_2;
    } else {
        // 0x392a
        v8 = a1 - 8;
        v1 = v8;
        if (*(int16_t *)v8 != 0x712c) {
            goto lab_0x397c_2;
        } else {
            int64_t v9 = *(int64_t *)(a1 + 8); // 0x393e
            v3 = 0;
            if (v9 == v8) {
                goto lab_0x39b8;
            } else {
                uint32_t v10 = *(int32_t *)(v9 + 32); // 0x395c
                int64_t v11 = v10; // 0x395c
                v4 = v11;
                v5 = v9;
                v1 = v8;
                v2 = 1;
                if (v10 < 33) {
                    int64_t v12 = 0;
                    int64_t v13 = 0;
                    int64_t v14 = 1 << v11 % 64;
                    int64_t v15; // 0x3923
                    int64_t v16; // 0x3923
                    if ((v14 & 276) != 0) {
                        // 0x3990
                        v16 = (int64_t)(*(int32_t *)(v9 + 64) | (int32_t)v12);
                        v15 = v13;
                    } else {
                        // 0x3972
                        v16 = v12;
                        v15 = v13;
                        if ((v14 & 0x100000002) == 0) {
                            // 0x3977
                            v4 = v11;
                            v5 = v9;
                            v6 = v14;
                            v1 = v8;
                            v2 = 1;
                            v16 = v12;
                            v15 = v9;
                            if (v10 != 16) {
                                goto lab_0x397c_2;
                            }
                        }
                    }
                    int64_t v17 = v15;
                    int64_t v18 = v16;
                    int64_t v19 = *(int64_t *)(v9 + 16); // 0x3993
                    while (v19 != v8) {
                        uint32_t v20 = *(int32_t *)(v19 + 32); // 0x395c
                        int64_t v21 = v20; // 0x395c
                        int32_t v22 = v20; // 0x3962
                        v4 = v21;
                        v5 = v19;
                        v6 = v14;
                        v1 = v8;
                        v2 = 1;
                        if (v20 >= 33) {
                            goto lab_0x397c_2;
                        }
                        int64_t v23 = v19;
                        v12 = v18;
                        v13 = v17;
                        int64_t v24 = v21;
                        v14 = 1 << v24 % 64;
                        if ((v14 & 276) != 0) {
                            int32_t v25 = *(int32_t *)(v23 + 64); // 0x3990
                            v16 = v25 | (int32_t)v12;
                            v15 = v13;
                        } else {
                            // 0x3972
                            v16 = v12;
                            v15 = v13;
                            if ((v14 & 0x100000002) == 0) {
                                // 0x3977
                                v4 = v24;
                                v5 = v23;
                                v6 = v14;
                                v1 = v8;
                                v2 = 1;
                                v16 = v12;
                                v15 = v23;
                                if (v22 != 16) {
                                    goto lab_0x397c_2;
                                }
                            }
                        }
                        // 0x3993
                        v17 = v15;
                        v18 = v16;
                        v19 = *(int64_t *)(v23 + 16);
                    }
                    // 0x399c
                    v3 = v18;
                    v7 = v14;
                    if (v17 != 0) {
                        // 0x39a1
                        *(int32_t *)(v17 + 64) = (int32_t)v18;
                        return 0;
                    }
                    goto lab_0x39b8;
                } else {
                    goto lab_0x397c_2;
                }
            }
        }
    }
  lab_0x397c_2:;
    int64_t v26 = function_2200(v1, (char *)v6, (int32_t)v5, (int32_t)v4, v2); // 0x397c
    *(int32_t *)v26 = 22;
    return 0xffffffff;
  lab_0x39b8:;
    int64_t v27 = function_2750(v8, v7); // 0x39b8
    if (v27 == 0) {
        // 0x39d6
        return 0xffffffff;
    }
    // 0x39c5
    *(int32_t *)(v27 + 32) = 16;
    function_2630(v27);
    // 0x39a1
    *(int32_t *)(v27 + 64) = (int32_t)v3;
    return 0;
}

// Address range: 0x39e0 - 0x39e1
int64_t acl_clear_perms(void) {
    // 0x39e0
    int64_t result; // 0x39e0
    return result;
}

// Address range: 0x39e3 - 0x3a1d
int64_t function_39e3(int64_t a1) {
    // 0x39e3
    int64_t v1; // 0x39e3
    int64_t v2; // 0x39e3
    int64_t v3; // 0x39e3
    int64_t v4; // 0x39e3
    int64_t v5; // 0x3a08
    if (a1 == 0) {
        // 0x3a08
        v5 = function_2200(a1, (char *)v2, (int32_t)v3, (int32_t)v4, v1);
        *(int32_t *)v5 = 22;
        return 0xffffffff;
    }
    // 0x39ed
    if (*(int16_t *)(a1 - 8) == 0x1ed5) {
        // 0x39f5
        *(int32_t *)a1 = 0;
        return 0;
    }
    // 0x3a08
    v5 = function_2200(a1, (char *)v2, (int32_t)v3, (int32_t)v4, v1);
    *(int32_t *)v5 = 22;
    return 0xffffffff;
}

// Address range: 0x3a20 - 0x3a21
int64_t acl_copy_entry(int64_t a1, int64_t * a2) {
    // 0x3a20
    int64_t result; // 0x3a20
    return result;
}

// Address range: 0x3a23 - 0x3aac
int64_t function_3a23(int64_t a1, int64_t a2) {
    int64_t v1 = 0; // 0x3a33
    int64_t v2; // 0x3a23
    if (a1 == 0) {
        goto lab_0x3a80;
    } else {
        // 0x3a35
        v1 = a1 - 8;
        v2 = v1;
        if (*(int16_t *)v1 != -0x6295) {
            goto lab_0x3a80;
        } else {
            goto lab_0x3a41;
        }
    }
  lab_0x3a80:;
    // 0x3a80
    int64_t v3; // 0x3a23
    int64_t v4; // 0x3a23
    int64_t v5; // 0x3a23
    int64_t v6 = function_2200(v1, (char *)a2, (int32_t)v4, (int32_t)v5, v3); // 0x3a80
    *(int32_t *)v6 = 22;
    v2 = 0;
    goto lab_0x3a41;
  lab_0x3a41:
    // 0x3a41
    if (a2 == 0 || *(int16_t *)(a2 - 8) != -0x6295) {
        int64_t v7 = function_2200(v2, (char *)a2, (int32_t)v4, (int32_t)v5, v3); // 0x3a90
        *(int32_t *)v7 = 22;
        return 0xffffffff;
    }
    int64_t result = 0xffffffff; // 0x3a51
    if (a1 != 0) {
        int128_t v8 = __asm_movdqu(*(int128_t *)(a2 + 32)); // 0x3a56
        int128_t v9 = __asm_movdqu(*(int128_t *)(a2 + 48)); // 0x3a5b
        *(int32_t *)(v2 + 32) = *(int32_t *)(a2 + 24);
        __asm_movups(*(int128_t *)(v2 + 40), v8);
        __asm_movups(*(int128_t *)(v2 + 56), v9);
        function_2630(v2);
        result = 0;
    }
    // 0x3a72
    return result;
}

// Address range: 0x3ab0 - 0x3ab1
int64_t acl_copy_ext(void) {
    // 0x3ab0
    int64_t result; // 0x3ab0
    return result;
}

// Address range: 0x3ab3 - 0x3b4b
int64_t function_3ab3(int64_t a1, int64_t a2, int64_t a3) {
    // 0x3ab3
    int64_t v1; // 0x3ab3
    int64_t v2; // 0x3ab3
    int64_t v3; // 0x3b20
    if (a2 == 0) {
        // 0x3b20
        v3 = function_2200(a1, (char *)a2, (int32_t)a3, (int32_t)v2, v1);
        *(int32_t *)v3 = 22;
        return -1;
    }
    int64_t v4 = a2 - 8; // 0x3abd
    if (*(int16_t *)v4 != 0x712c) {
        // 0x3b20
        v3 = function_2200(a1, (char *)a2, (int32_t)a3, (int32_t)v2, v1);
        *(int32_t *)v3 = 22;
        return -1;
    }
    int64_t v5 = 40 * *(int64_t *)(a2 + 40) + 8; // 0x3acd
    if (v5 > a3) {
        int64_t v6 = function_2200(a1, (char *)a2, (int32_t)a3, (int32_t)v2, v1); // 0x3b37
        *(int32_t *)v6 = 34;
        // 0x3b19
        return -1;
    }
    // 0x3ada
    *(int64_t *)a1 = v5;
    int64_t v7 = *(int64_t *)(a2 + 8); // 0x3add
    if (v7 == v4) {
        // 0x3b19
        return 0;
    }
    int64_t v8 = a1 + 8; // 0x3ab3
    __asm_movups(*(int128_t *)v8, __asm_movdqu(*(int128_t *)(v7 + 32)));
    __asm_movups(*(int128_t *)(v8 + 16), __asm_movdqu(*(int128_t *)(v7 + 48)));
    int64_t v9 = *(int64_t *)(v7 + 16); // 0x3b0a
    *(int64_t *)(v8 + 32) = *(int64_t *)(v7 + 64);
    v8 += 40;
    while (v9 != v4) {
        int64_t v10 = v9;
        __asm_movups(*(int128_t *)v8, __asm_movdqu(*(int128_t *)(v10 + 32)));
        __asm_movups(*(int128_t *)(v8 + 16), __asm_movdqu(*(int128_t *)(v10 + 48)));
        v9 = *(int64_t *)(v10 + 16);
        *(int64_t *)(v8 + 32) = *(int64_t *)(v10 + 64);
        v8 += 40;
    }
    // 0x3b19
    return 0;
}

// Address range: 0x3b50 - 0x3b51
int64_t acl_copy_int(void) {
    // 0x3b50
    int64_t result; // 0x3b50
    return result;
}

// Address range: 0x3b53 - 0x3cf6
int64_t function_3b53(uint64_t a1) {
    // 0x3b53
    int64_t v1; // 0x3b53
    int64_t v2; // 0x3b53
    int64_t v3; // 0x3b53
    if (a1 != 0) {
        // 0x3b67
        v2 = a1;
        if (a1 >= 8) {
            int64_t v4 = a1 - 8; // 0x3b81
            v1 = -0x3333333333333333;
            v2 = v4;
            v3 = 0x666666666666666;
            if ((-0x3333333333333333 * v4 / 8 || -0x6000000000000000 * a1) < 0x666666666666667) {
                int64_t v5 = function_27e0(0); // 0x3bb2
                if (v5 == 0) {
                    // 0x3cae
                    return 0;
                }
              lab_0x3cd8:
                // 0x3cd8
                if ((int32_t)function_2b60(v5) == 0) {
                    // 0x3ce4
                    return v5 + 8;
                }
                // 0x3cbc
                function_28f0(v5);
                return 0;
                while (true) {

                }
                // 0x3cbc
                function_28f0(v5);
                return 0;
            }
        }
    }
    // 0x3ca0
    int64_t v6; // 0x3b53
    int64_t v7 = function_2200(a1, (char *)v3, (int32_t)v2, (int32_t)v1, v6); // 0x3ca0
    *(int32_t *)v7 = 22;
    // 0x3cae
    return 0;
}

// Address range: 0x3d00 - 0x3d01
int64_t acl_create_entry(int64_t * a1, int64_t * a2) {
    // 0x3d00
    int64_t result; // 0x3d00
    return result;
}

// Address range: 0x3d03 - 0x3d65
int64_t function_3d03(int64_t a1, int64_t a2) {
    // 0x3d03
    int64_t v1; // 0x3d03
    int64_t v2; // 0x3d03
    int64_t v3; // 0x3d03
    int64_t v4; // 0x3d4c
    if (a1 == 0) {
        // 0x3d40
        if (a2 != 0) {
            // 0x3d45
            *(int64_t *)a2 = 0;
        }
        // 0x3d4c
        v4 = function_2200(0, (char *)a2, (int32_t)v2, (int32_t)v3, v1);
        *(int32_t *)v4 = 22;
        return 0xffffffff;
    }
    // 0x3d0d
    if (a2 == 0) {
        // 0x3d4c
        v4 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1);
        *(int32_t *)v4 = 22;
        return 0xffffffff;
    }
    int64_t v5 = a1 - 8; // 0x3d15
    if (*(int16_t *)v5 != 0x712c) {
        // 0x3d4c
        v4 = function_2200(v5, (char *)a2, (int32_t)v2, (int32_t)v3, v1);
        *(int32_t *)v4 = 22;
        return 0xffffffff;
    }
    int64_t v6 = function_2750(v5, a2); // 0x3d26
    if (v6 == 0) {
        // 0x3d5e
        return 0xffffffff;
    }
    // 0x3d30
    *(int64_t *)a2 = v6 + 8;
    return 0;
}

// Address range: 0x3d70 - 0x3d71
int64_t acl_delete_def_file(int64_t a1) {
    // 0x3d70
    int64_t result; // 0x3d70
    return result;
}

// Address range: 0x3d73 - 0x3da3
int64_t function_3d73(void) {
    int64_t v1 = function_2360(); // 0x3d7f
    int64_t result = 0; // 0x3d8c
    if ((int32_t)v1 < 0) {
        // 0x3d8e
        int64_t v2; // 0x3d73
        int64_t v3; // 0x3d73
        int64_t v4; // 0x3d73
        int64_t v5 = function_2200(v2, "system.posix_acl_default", (int32_t)v3, (int32_t)v4, v1 & 0xffffffff); // 0x3d8e
        result = *(int32_t *)v5 != 61 ? 0xffffffff : 0;
    }
    // 0x3d9e
    return result;
}

// Address range: 0x3db0 - 0x3db1
int64_t acl_delete_entry(void) {
    // 0x3db0
    int64_t result; // 0x3db0
    return result;
}

// Address range: 0x3db3 - 0x3e6d
int64_t function_3db3(int64_t a1, int64_t a2) {
    // 0x3db3
    int64_t v1; // 0x3db3
    int64_t v2; // 0x3db3
    int64_t v3; // 0x3db3
    int64_t v4; // 0x3e30
    if (a1 != 0) {
        // 0x3dc2
        if (*(int16_t *)(a1 - 8) == 0x712c) {
            // 0x3dcd
            if (a2 == 0) {
                // 0x3e30
                v4 = function_2200(-8, (char *)a2, (int32_t)v2, (int32_t)v3, v1);
                *(int32_t *)v4 = 22;
                // 0x3e3b
                return 0xffffffff;
            }
            int64_t v5 = a2 - 8; // 0x3dcd
            int16_t * v6 = (int16_t *)v5; // 0x3dd6
            if (*v6 != -0x6295) {
                // 0x3e30
                v4 = function_2200(v5, (char *)a2, (int32_t)v2, (int32_t)v3, v1);
                *(int32_t *)v4 = 22;
                // 0x3e3b
                return 0xffffffff;
            }
            int64_t * v7 = (int64_t *)(a1 + 16); // 0x3dde
            if (*v7 == v5) {
                // 0x3e60
                *v7 = *(int64_t *)a2;
            }
            int64_t * v8 = (int64_t *)(a2 + 8); // 0x3de7
            *(int64_t *)(a2 + 16) = *v8;
            *(int64_t *)(*v8 + 8) = a2;
            *v6 = 0;
            if (*(char *)(a2 - 6) % 2 != 0) {
                // 0x3e50
                function_21f0(v5);
            }
            int64_t * v9 = (int64_t *)(a1 + 40); // 0x3e03
            *v9 = *v9 - 1;
            return 0;
        }
    }
    int64_t v10 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1); // 0x3e18
    *(int32_t *)v10 = 22;
    if (a2 != 0) {
        // 0x3e28
        if (*(int16_t *)(a2 - 8) == -0x6295) {
            // 0x3e3b
            return 0xffffffff;
        }
    }
    // 0x3e30
    v4 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1);
    *(int32_t *)v4 = 22;
    // 0x3e3b
    return 0xffffffff;
}

// Address range: 0x3e70 - 0x3e71
int64_t acl_delete_perm(void) {
    // 0x3e70
    int64_t result; // 0x3e70
    return result;
}

// Address range: 0x3e73 - 0x3ebf
int64_t function_3e73(int64_t a1, int64_t a2) {
    // 0x3e73
    if (a1 == 0 || *(int16_t *)(a1 - 8) != 0x1ed5) {
        // 0x3ea0
        int64_t v1; // 0x3e73
        int64_t v2; // 0x3e73
        int64_t v3; // 0x3e73
        int64_t v4 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1); // 0x3ea0
        *(int32_t *)v4 = 22;
        return 0xffffffff;
    }
    int64_t result = 0xffffffff; // 0x3e8b
    if ((a2 & 0xfffffff8) == 0) {
        // 0x3e8d
        *(int32_t *)a1 = -1 - (int32_t)a2 & (int32_t)a1;
        result = 0;
    }
    // 0x3e93
    return result;
}

// Address range: 0x3ec0 - 0x3ec1
int64_t acl_dup(void) {
    // 0x3ec0
    int64_t result; // 0x3ec0
    return result;
}

// Address range: 0x3ec3 - 0x4001
int64_t function_3ec3(int64_t a1) {
    // 0x3ec3
    int64_t v1; // 0x3ec3
    int64_t v2; // 0x3ec3
    int64_t v3; // 0x3ec3
    int64_t v4; // 0x3ec3
    int64_t v5; // 0x3fd8
    if (a1 == 0) {
        // 0x3fd8
        v5 = function_2200(a1, (char *)v2, (int32_t)v3, (int32_t)v4, v1);
        *(int32_t *)v5 = 22;
        return 0;
    }
    int64_t v6 = a1 - 8; // 0x3ed7
    if (*(int16_t *)v6 != 0x712c) {
        // 0x3fd8
        v5 = function_2200(a1, (char *)v2, (int32_t)v3, (int32_t)v4, v1);
        *(int32_t *)v5 = 22;
        return 0;
    }
    int64_t v7 = function_27e0((int64_t)*(int32_t *)(a1 + 40)); // 0x3eed
    if (v7 == 0) {
        // 0x3fc4
        return 0;
    }
    int64_t v8 = *(int64_t *)(a1 + 8); // 0x3efe
    if (v8 == v6) {
        // 0x3fc4
        return v7 + 8;
    }
    int64_t * v9 = (int64_t *)(v7 + 40); // 0x3f94
    int64_t result = v7 + 8;
    int64_t * v10 = (int64_t *)result;
    int64_t * v11 = (int64_t *)(v7 + 48);
    int64_t v12 = *v9; // 0x3f94
    int64_t v13; // 0x3ec3
    int64_t v14; // 0x3f18
    int64_t v15; // 0x3fa7
    if (*(int64_t *)(v7 + 32) != v12) {
        // 0x3f18
        v14 = v12 - 72;
        *v9 = v14;
        *(int16_t *)v14 = -0x6295;
        *(int16_t *)(v12 - 70) = 0;
        v13 = v14;
    } else {
        // 0x3fa2
        v15 = function_2310(72);
        if (v15 == 0) {
            // break -> 0x3ff4
            break;
        }
        // 0x3fb1
        *(int32_t *)v15 = 0x19d6b;
        v13 = v15;
    }
    int64_t v16 = *v10; // 0x3f30
    *v11 = *v11 + 1;
    *(int64_t *)(v13 + 16) = v7;
    *(int64_t *)(v13 + 8) = v16;
    *(int64_t *)(v16 + 16) = v13;
    *v10 = v13;
    int64_t v17 = v13 + 56; // 0x3f4c
    *(int32_t *)v17 = 0x1ed5;
    int64_t v18 = v13 + 40; // 0x3f53
    *(int32_t *)v18 = 0x1c27;
    int32_t * v19 = (int32_t *)(v13 + 32); // 0x3f5a
    *v19 = 0;
    *(int32_t *)(v13 + 64) = 0;
    int128_t v20 = __asm_movdqu(*(int128_t *)(v8 + 56)); // 0x3f6b
    *(int32_t *)(v13 + 48) = -1;
    int128_t v21 = __asm_movdqu(*(int128_t *)(v8 + 40)); // 0x3f77
    int64_t v22 = *(int64_t *)(v8 + 16); // 0x3f7c
    *(int64_t *)(v13 + 24) = v7;
    *v19 = *(int32_t *)(v8 + 32);
    __asm_movups(*(int128_t *)v18, v21);
    __asm_movups(*(int128_t *)v17, v20);
    while (v22 != v6) {
        int64_t v23 = v22;
        v12 = *v9;
        if (*(int64_t *)(v7 + 32) != v12) {
            // 0x3f18
            v14 = v12 - 72;
            *v9 = v14;
            *(int16_t *)v14 = -0x6295;
            *(int16_t *)(v12 - 70) = 0;
            v13 = v14;
        } else {
            // 0x3fa2
            v15 = function_2310(72);
            if (v15 == 0) {
                // break -> 0x3ff4
                break;
            }
            // 0x3fb1
            *(int32_t *)v15 = 0x19d6b;
            v13 = v15;
        }
        // 0x3f30
        v16 = *v10;
        *v11 = *v11 + 1;
        *(int64_t *)(v13 + 16) = v7;
        *(int64_t *)(v13 + 8) = v16;
        *(int64_t *)(v16 + 16) = v13;
        *v10 = v13;
        v17 = v13 + 56;
        *(int32_t *)v17 = 0x1ed5;
        v18 = v13 + 40;
        *(int32_t *)v18 = 0x1c27;
        v19 = (int32_t *)(v13 + 32);
        *v19 = 0;
        *(int32_t *)(v13 + 64) = 0;
        v20 = __asm_movdqu(*(int128_t *)(v23 + 56));
        *(int32_t *)(v13 + 48) = -1;
        v21 = __asm_movdqu(*(int128_t *)(v23 + 40));
        v22 = *(int64_t *)(v23 + 16);
        *(int64_t *)(v13 + 24) = v7;
        *v19 = *(int32_t *)(v23 + 32);
        __asm_movups(*(int128_t *)v18, v21);
        __asm_movups(*(int128_t *)v17, v20);
    }
    // 0x3fc4
    return result;
}

// Address range: 0x4010 - 0x4011
int64_t acl_free(int64_t a1, int64_t a2) {
    // 0x4010
    int64_t result; // 0x4010
    return result;
}

// Address range: 0x4013 - 0x4087
int64_t function_4013(int64_t a1) {
    // 0x4013
    int64_t v1; // 0x4013
    if (a1 != 0) {
        int64_t v2 = a1 - 8; // 0x401d
        int16_t * v3 = (int16_t *)v2; // 0x401d
        v1 = v2;
        switch (*v3) {
            case 0x712c: {
                // 0x4078
                function_28f0(v2);
                return 0;
            }
            case -0x2a0e: {
            }
            case 0x1c27: {
                // 0x4050
                *v3 = 0;
                if (*(char *)(a1 - 6) % 2 == 0) {
                    // 0x4047
                    return 0;
                }
                // 0x405e
                function_21f0(v2);
                return 0;
            }
        }
    }
    // 0x4037
    int64_t v4; // 0x4013
    int64_t v5; // 0x4013
    int64_t v6; // 0x4013
    int64_t v7 = function_2200(a1, (char *)v4, (int32_t)v5, (int32_t)v6, v1); // 0x4037
    *(int32_t *)v7 = 22;
    // 0x4047
    return 0xffffffff;
}

// Address range: 0x4090 - 0x4091
int64_t acl_get_entry(int64_t a1, int64_t a2, int64_t * a3) {
    // 0x4090
    int64_t result; // 0x4090
    return result;
}

// Address range: 0x4093 - 0x4142
int64_t function_4093(int64_t a1, int64_t a2, int64_t a3) {
    // 0x4093
    int64_t v1; // 0x4093
    int64_t v2; // 0x4093
    int64_t v3; // 0x4093
    int64_t v4; // 0x4093
    int64_t v5; // 0x409d
    int64_t v6; // 0x4130
    if (a1 == 0) {
        goto lab_0x4108;
    } else {
        // 0x409d
        v5 = a1 - 8;
        if (*(int16_t *)v5 != 0x712c) {
            goto lab_0x4108;
        } else {
            // 0x40a5
            if (a3 == 0) {
                // 0x4130
                v6 = function_2200(a1, (char *)a2, (int32_t)a3, (int32_t)v4, v3);
                *(int32_t *)v6 = 22;
                return 0xffffffff;
            }
            int32_t v7 = a2; // 0x40ae
            if (v7 != 0) {
                int64_t * v8 = (int64_t *)(a1 + 16); // 0x40e0
                int64_t v9 = *v8; // 0x40e0
                v1 = v9;
                if (v7 != 1) {
                    goto lab_0x40ba;
                } else {
                    int64_t v10 = *(int64_t *)(v9 + 16); // 0x40e9
                    *v8 = v10;
                    v2 = v10;
                    if (v10 == v5) {
                        // 0x40fa
                        *(int64_t *)a3 = 0;
                        return 0;
                    }
                    goto lab_0x40c3;
                }
            } else {
                int64_t v11 = *(int64_t *)(a1 + 8); // 0x40b2
                *(int64_t *)(a1 + 16) = v11;
                v1 = v11;
                goto lab_0x40ba;
            }
        }
    }
  lab_0x4108:;
    int64_t v12 = function_2200(a1, (char *)a2, (int32_t)a3, (int32_t)v4, v3); // 0x4108
    *(int32_t *)v12 = 22;
    if (a3 != 0) {
        // 0x411d
        *(int64_t *)a3 = 0;
        return 0xffffffff;
    }
    // 0x40db
    return 0xffffffff;
  lab_0x40ba:
    // 0x40ba
    v2 = v1;
    if (v1 == v5) {
        // 0x40fa
        *(int64_t *)a3 = 0;
        return 0;
    }
    goto lab_0x40c3;
  lab_0x40c3:
    // 0x40c3
    if (v2 == 0) {
        // 0x4130
        v6 = function_2200(v5, (char *)a2, (int32_t)a3, (int32_t)v4, v3);
        *(int32_t *)v6 = 22;
        return 0xffffffff;
    }
    // 0x40c8
    if (*(int16_t *)v2 == -0x6295) {
        // 0x40cf
        *(int64_t *)a3 = v2 + 8;
        // 0x40db
        return 1;
    }
    // 0x4130
    v6 = function_2200(v5, (char *)a2, (int32_t)a3, (int32_t)v4, v3);
    *(int32_t *)v6 = 22;
    return 0xffffffff;
}

// Address range: 0x4150 - 0x4151
int64_t acl_get_perm(int64_t a1, int64_t a2) {
    // 0x4150
    int64_t result; // 0x4150
    return result;
}

// Address range: 0x4153 - 0x4195
int64_t function_4153(int64_t a1, int64_t a2) {
    // 0x4153
    if (a1 == 0 || *(int16_t *)(a1 - 8) != 0x1ed5) {
        // 0x4180
        int64_t v1; // 0x4153
        int64_t v2; // 0x4153
        int64_t v3; // 0x4153
        int64_t v4 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1); // 0x4180
        *(int32_t *)v4 = 22;
        return 0xffffffff;
    }
    int64_t result = 0xffffffff; // 0x4170
    if ((a2 & 0xfffffff8) == 0) {
        // 0x4172
        result = (int32_t)(a2 & a1) != 0;
    }
    // 0x4179
    return result;
}

// Address range: 0x41a0 - 0x41a1
int64_t acl_get_permset(int64_t a1, int64_t * a2) {
    // 0x41a0
    int64_t result; // 0x41a0
    return result;
}

// Address range: 0x41a3 - 0x41f8
int64_t function_41a3(int64_t a1, int64_t a2) {
    // 0x41a3
    int64_t v1; // 0x41a3
    int64_t v2; // 0x41a3
    int64_t v3; // 0x41a3
    if (a1 != 0) {
        // 0x41ad
        if (*(int16_t *)(a1 - 8) == -0x6295) {
            if (a2 == 0) {
                // 0x41e6
                *(int32_t *)function_2200(a1, NULL, (int32_t)v2, (int32_t)v3, v1) = 22;
                return 0xffffffff;
            }
            // 0x41ba
            *(int64_t *)a2 = a1 + 56;
            // 0x41c3
            return 0;
        }
    }
    int64_t v4 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1); // 0x41c8
    *(int32_t *)v4 = 22;
    if (a2 == 0) {
        // 0x41c3
        return 0xffffffff;
    }
    // 0x41dd
    *(int64_t *)a2 = 0;
    return 0xffffffff;
}

// Address range: 0x4200 - 0x4201
int64_t acl_get_qualifier(void) {
    // 0x4200
    int64_t result; // 0x4200
    return result;
}

// Address range: 0x4203 - 0x4258
int64_t function_4203(int64_t a1) {
    // 0x4203
    int64_t v1; // 0x4203
    int64_t v2; // 0x4203
    int64_t v3; // 0x4203
    int64_t v4; // 0x4203
    int64_t v5; // 0x4222
    if (a1 == 0 || *(int16_t *)(a1 - 8) != -0x6295) {
        // 0x4222
        v5 = function_2200(a1, (char *)v2, (int32_t)v3, (int32_t)v4, v1);
        *(int32_t *)v5 = 22;
        // 0x422f
        return 0;
    }
    // 0x4215
    switch (*(int32_t *)(a1 + 24)) {
        case 2: {
        }
        case 8: {
            int64_t v6 = function_2310(16); // 0x423d
            if (v6 == 0) {
                // 0x422f
                return 0;
            }
            // 0x4247
            *(int32_t *)v6 = 0x11c27;
            int64_t result = v6 + 8; // 0x4250
            *(int32_t *)result = *(int32_t *)(a1 + 40);
            return result;
        }
    }
    // 0x4222
    v5 = function_2200(a1, (char *)v2, (int32_t)v3, (int32_t)v4, v1);
    *(int32_t *)v5 = 22;
    // 0x422f
    return 0;
}

// Address range: 0x4260 - 0x4261
int64_t acl_get_tag_type(int64_t a1, int64_t * a2) {
    // 0x4260
    int64_t result; // 0x4260
    return result;
}

// Address range: 0x4263 - 0x42a5
int64_t function_4263(int64_t a1, int64_t a2) {
    // 0x4263
    if (a1 == 0 || a2 == 0 | *(int16_t *)(a1 - 8) != -0x6295) {
        // 0x4290
        int64_t v1; // 0x4263
        int64_t v2; // 0x4263
        int64_t v3; // 0x4263
        int64_t v4 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1); // 0x4290
        *(int32_t *)v4 = 22;
        return 0xffffffff;
    }
    // 0x427a
    *(int32_t *)a2 = *(int32_t *)(a1 + 24);
    return 0;
}

// Address range: 0x42b0 - 0x42b1
int64_t acl_init(int64_t a1) {
    // 0x42b0
    int64_t result; // 0x42b0
    return result;
}

// Address range: 0x42b3 - 0x42ea
int64_t function_42b3(int64_t a1) {
    // 0x42b3
    if ((int32_t)a1 >= 0) {
        int64_t v1 = function_27e0(a1); // 0x42bc
        return v1 != 0 ? v1 + 8 : v1;
    }
    // 0x42d8
    int64_t v2; // 0x42b3
    int64_t v3; // 0x42b3
    int64_t v4; // 0x42b3
    int64_t v5; // 0x42b3
    int64_t v6 = function_2200(a1, (char *)v3, (int32_t)v4, (int32_t)v5, v2); // 0x42d8
    *(int32_t *)v6 = 22;
    return 0;
}

// Address range: 0x42f0 - 0x42f1
int64_t acl_from_text(void) {
    // 0x42f0
    int64_t result; // 0x42f0
    return result;
}

// Address range: 0x42f3 - 0x4985
int64_t function_42f3(int64_t a1) {
    int64_t v1 = a1; // bp-160, 0x4302
    int64_t v2 = __readfsqword(40); // 0x4309
    int64_t v3 = acl_init(0); // 0x4319
    int64_t v4 = v3; // bp-152, 0x431e
    int64_t v5 = 0; // 0x4329
    int64_t result = 0; // 0x4329
    int64_t v6; // 0x42f3
    int64_t v7; // 0x42f3
    int64_t v8; // 0x42f3
    char v9; // 0x42f3
    int64_t v10; // 0x42f3
    if (v3 == 0) {
        goto lab_0x462b;
    } else {
        // 0x432f
        v8 = 0;
        v9 = 0;
        v6 = v1;
        v7 = -0x100002601;
        if (v1 == 0) {
            // 0x4968
            int64_t v11; // 0x42f3
            int64_t v12; // 0x42f3
            int64_t v13; // 0x42f3
            int64_t v14 = function_2200(0, (char *)v11, (int32_t)v12, (int32_t)v13, v10); // 0x4968
            *(int32_t *)v14 = 22;
            v5 = 0;
            result = 0;
            goto lab_0x462b;
        } else {
            goto lab_0x434c;
        }
    }
  lab_0x43df:;
    // 0x43df
    int64_t v15; // 0x42f3
    int64_t v16 = v15;
    char v17 = v16; // 0x43df
    int32_t * v18; // 0x42f3
    int64_t v19; // 0x42f3
    int64_t v20; // 0x42f3
    int64_t v21; // 0x42f3
    int64_t v22; // 0x42f3
    int64_t v23; // 0x42f3
    int64_t v24; // 0x42f3
    int64_t v25; // 0x42f3
    int64_t v26; // 0x42f3
    int64_t v27; // 0x42f3
    int64_t v28; // 0x42f3
    int64_t v29; // 0x42f3
    int64_t v30; // 0x42f3
    int64_t v31; // 0x42f3
    int64_t v32; // 0x42f3
    int64_t v33; // 0x42f3
    int64_t v34; // 0x42f3
    int64_t v35; // 0x42f3
    int64_t v36; // 0x42f3
    int64_t v37; // 0x42f3
    int64_t v38; // 0x42f3
    int64_t v39; // 0x42f3
    int64_t v40; // 0x42f3
    char * v41; // bp-144, 0x42f3
    int64_t v42; // 0x42f3
    if (v17 == 103) {
        int64_t v43 = function_2950(&v1, "group"); // 0x477b
        v32 = v42;
        v26 = v28;
        v33 = v16;
        v40 = (int64_t)"group";
        if ((int32_t)v43 == 0) {
            // break (via goto) -> 0x4750
            goto lab_0x4750_11;
        }
        int64_t v44 = function_2a50(&v1, (int64_t)"group", v16, v28, v10); // 0x478c
        if (v44 == 0) {
            // 0x4851
            v31 = v42;
            v37 = v1;
            v39 = (int64_t)"group";
            goto lab_0x445b_2;
        } else {
            int64_t v45 = function_2560(v44); // 0x47a8
            function_22e0(v45, (int64_t *)&v41, 0);
            v22 = v44;
            if (*v41 == 0) {
                goto lab_0x45ea;
            } else {
                int64_t v46 = function_2200(v45, (char *)&v41, (int32_t)(int64_t)v41, (int32_t)v28, v10); // 0x47cd
                *(int32_t *)v46 = 0;
                v19 = v44;
                if (function_2300(v45) == 0) {
                    // 0x4910
                    int32_t * v47; // 0x42f3
                    int32_t v48 = *v47; // 0x4910
                    v27 = v28;
                    v34 = v46;
                    v20 = v44;
                    int64_t v49; // 0x4787
                    v24 = v49;
                    v18 = v47;
                    v35 = v46;
                    v21 = v44;
                    v25 = v49;
                    if (v48 != 0) {
                        goto lab_0x48fb;
                    } else {
                        goto lab_0x4916;
                    }
                }
                goto lab_0x47f1;
            }
        }
    } else {
        // 0x43e8
        v32 = v30;
        v26 = v28;
        v33 = v16;
        v40 = v38;
        if (v17 != 109) {
            // break (via goto) -> 0x4750
            goto lab_0x4750_11;
        }
        int64_t v50 = function_2950(&v1, "mask"); // 0x43fd
        v32 = v42;
        v26 = v28;
        v33 = v16;
        v40 = (int64_t)"mask";
        if ((int32_t)v50 == 0) {
            // break (via goto) -> 0x4750
            goto lab_0x4750_11;
        }
        int64_t v51 = v1; // 0x440a
        unsigned char v52 = *(char *)v51; // 0x440f
        int64_t v53 = v52; // 0x440f
        v29 = v53;
        v36 = v51;
        if (v52 < 33) {
            int64_t v54 = v51; // 0x441b
            v31 = v42;
            v37 = v51;
            v39 = (int64_t)"mask";
            if ((1 << v53 % 64 & v23) == 0) {
                int64_t v55 = v54 + 1;
                v1 = v55;
                unsigned char v56 = *(char *)v55; // 0x442d
                int64_t v57 = v56; // 0x442d
                v29 = v57;
                v36 = v55;
                while (v56 < 33) {
                    // 0x4658
                    v54 = v55;
                    v31 = v42;
                    v37 = v55;
                    v39 = (int64_t)"mask";
                    if ((1 << v57 % 64 & v23) != 0) {
                        goto lab_0x445b_2;
                    }
                    v55 = v54 + 1;
                    v1 = v55;
                    v56 = *(char *)v55;
                    v57 = v56;
                    v29 = v57;
                    v36 = v55;
                }
                goto lab_0x443c;
            } else {
                goto lab_0x445b_2;
            }
        } else {
            goto lab_0x443c;
        }
    }
  lab_0x445b_2:;
    int64_t v58 = v39;
    int64_t v59 = v31;
    int32_t v60 = 0; // 0x445b
    int64_t v61 = 0; // 0x445b
    int64_t v62 = v37; // 0x445b
    int64_t v63; // 0x42f3
    int64_t v64; // 0x42f3
    int64_t v65; // 0x42f3
    int64_t v66; // 0x42f3
    while (true) {
        // 0x445d
        v65 = v62;
        v63 = v61;
        int32_t v67 = v60;
        char v68 = *(char *)v65; // 0x445d
        int32_t v69; // 0x42f3
        if (v68 == 119) {
            // 0x4730
            v32 = v59;
            v26 = v63;
            v33 = v65;
            v40 = v58;
            if ((v67 & 2) != 0) {
                // break (via goto) -> 0x4750
                goto lab_0x4750_11;
            }
            // 0x4738
            v69 = v67 | 2;
        } else {
            if (v68 > 119) {
                if (v68 != 120) {
                    // break -> 0x4748
                    break;
                }
                // 0x4678
                v32 = v59;
                v26 = v63;
                v33 = v65;
                v40 = v58;
                if (v67 % 2 != 0) {
                    // break (via goto) -> 0x4750
                    goto lab_0x4750_11;
                }
                // 0x4684
                v69 = v67 | 1;
            } else {
                // 0x446e
                v69 = v67;
                if (v68 != 45) {
                    if (v68 != 114) {
                        // break -> 0x4748
                        break;
                    }
                    // 0x447a
                    v32 = v59;
                    v26 = v63;
                    v33 = v65;
                    v40 = v58;
                    if ((v67 & 4) != 0) {
                        // break (via goto) -> 0x4750
                        goto lab_0x4750_11;
                    }
                    // 0x4486
                    v69 = v67 | 4;
                }
            }
        }
        int64_t v70 = v65 + 1; // 0x4490
        int64_t v71 = v63 + 1; // 0x4494
        int64_t v72 = v71 & 0xffffffff; // 0x4494
        v1 = v70;
        v60 = v69;
        v61 = v72;
        v62 = v70;
        v64 = v72;
        v66 = v70;
        if ((int32_t)v71 == 3) {
            goto lab_0x44a1;
        }
    }
    // 0x4748
    v64 = v63;
    v66 = v65;
    v32 = v59;
    v26 = v63;
    v33 = v65;
    v40 = v58;
    if (v63 == 0) {
        // break (via goto) -> 0x4750
        goto lab_0x4750_11;
    }
  lab_0x44a1:;
    int64_t v73 = v66;
    int64_t v74 = v64;
    int64_t v75 = acl_create_entry(&v4, (int64_t *)&v41); // 0x44ab
    int64_t v76 = v74; // 0x44b2
    int64_t v77 = v73; // 0x44b2
    int64_t v78; // 0x42f3
    int64_t v79 = v78; // 0x44b2
    if ((int32_t)v75 != 0) {
        goto lab_0x475b_2;
    }
    int64_t v80 = (int64_t)v41;
    int64_t v81; // bp-128, 0x42f3
    int64_t v82 = acl_copy_entry(v80, &v81); // 0x44c2
    v76 = v74;
    v77 = v73;
    int64_t v83; // 0x42f3
    v79 = v83;
    if ((int32_t)v82 != 0) {
        goto lab_0x475b_2;
    }
    int64_t v84 = v1; // 0x44cf
    unsigned char v85 = *(char *)v84; // 0x44d4
    int64_t v86 = v85; // 0x44d4
    int64_t v87 = v86; // 0x44dc
    int64_t v88 = v84; // 0x44dc
    if (v85 >= 33) {
        // break -> 0x4504
        goto lab_0x4504_2;
    }
    int64_t v89 = v84; // 0x44e2
    int64_t v90 = v86; // 0x44e2
    int64_t v91 = v84; // 0x44e2
    if ((1 << v86 % 64 & v23) != 0) {
        goto lab_0x4360;
    }
    int64_t v92 = v89 + 1;
    v1 = v92;
    unsigned char v93 = *(char *)v92; // 0x44f5
    int64_t v94 = v93; // 0x44f5
    v87 = v94;
    v88 = v92;
    if (v93 >= 33) {
        // break (via goto) -> 0x4504
        goto lab_0x4504_2;
    }
    // 0x4610
    v89 = v92;
    while ((1 << v94 % 64 & v23) == 0) {
        // 0x44f0
        v92 = v89 + 1;
        v1 = v92;
        v93 = *(char *)v92;
        v94 = v93;
        v87 = v94;
        v88 = v92;
        if (v93 >= 33) {
            // break (via goto) -> 0x4504
            goto lab_0x4504_2;
        }
        // 0x4610
        v89 = v92;
    }
    int64_t v95 = v80; // 0x4620
    char v96 = v93; // 0x4620
    int64_t v97 = v74; // 0x4620
    int64_t v98 = v83; // 0x4620
    int64_t v99 = v92; // 0x4620
    int64_t v100 = v80; // 0x4620
    int64_t v101 = v74; // 0x4620
    int64_t v102 = v94; // 0x4620
    int64_t v103 = v83; // 0x4620
    if (v93 == 0) {
        goto lab_0x4626_3;
    }
    goto lab_0x4368;
  lab_0x475b_2:
    // 0x475b
    acl_free(v4, v79);
    v5 = v4;
    int64_t v113 = v76; // 0x4768
    int64_t v114 = v77; // 0x4768
    int64_t v115; // 0x42f3
    int64_t v116 = v115; // 0x4768
    int64_t v117 = v79; // 0x4768
    result = 0;
    int64_t v118 = v23; // 0x4768
    goto lab_0x462b;
  lab_0x4626_3:
    // 0x4626
    v5 = v100;
    v113 = v101;
    v114 = v102;
    v116 = v115;
    v117 = v103;
    result = v4;
    v118 = v23;
    goto lab_0x462b;
  lab_0x43c4:;
    // 0x43c4
    int64_t v106; // 0x42f3
    int64_t v109 = v106; // 0x42f3
    int64_t v107; // 0x42f3
    int64_t v169 = v107; // 0x42f3
    int64_t v170 = v106; // 0x42f3
    int64_t v171; // 0x42f3
    switch ((char)v171) {
        case 35: {
            int64_t v172 = v169 + 1;
            v1 = v172;
            unsigned char v173 = *(char *)v172; // 0x469d
            v32 = v30;
            v26 = v28;
            v33 = 10;
            v40 = v38;
            if (v173 == 10) {
                // break (via goto) -> 0x4750
                goto lab_0x4750_11;
            }
            // 0x46af
            v169 = v172;
            while (v173 != 0) {
                // 0x4698
                v172 = v169 + 1;
                v1 = v172;
                v173 = *(char *)v172;
                v32 = v30;
                v26 = v28;
                v33 = 10;
                v40 = v38;
                if (v173 == 10) {
                    // break (via goto) -> 0x4750
                    goto lab_0x4750_11;
                }
                // 0x46af
                v169 = v172;
            }
            int64_t v174 = v173; // 0x469d
            v109 = v174;
            v170 = v174;
            if (v173 != 111) {
                goto lab_0x43d6;
            } else {
                goto lab_0x46bc;
            }
        }
        case 111: {
            goto lab_0x46bc;
        }
        default: {
            goto lab_0x43d6;
        }
    }
  lab_0x43d6:;
    int64_t v175 = v109;
    char v176 = v175;
    v15 = v175;
    char * v136; // 0x42f3
    if (v176 > 111) {
        // 0x4580
        v32 = v30;
        v26 = v28;
        v33 = v175;
        v40 = v38;
        if (v176 != 117) {
            // break (via goto) -> 0x4750
            goto lab_0x4750_11;
        }
        int64_t v177 = function_2950(&v1, v136); // 0x4594
        v32 = v42;
        v26 = v28;
        v33 = v175;
        v40 = v115;
        if ((int32_t)v177 == 0) {
            // break (via goto) -> 0x4750
            goto lab_0x4750_11;
        }
        int64_t v178 = v1; // 0x45a4
        int64_t v179 = function_2a50(&v1, v115, v175, v28, v10); // 0x45a9
        if (v179 == 0) {
            // 0x4863
            v31 = v42;
            v37 = v1;
            v39 = v115;
            goto lab_0x445b_2;
        } else {
            int64_t v180 = function_2560(v179); // 0x45c5
            function_22e0(v180, (int64_t *)&v41, 0);
            v22 = v179;
            if (*v41 != 0) {
                int64_t v181 = function_2200(v180, (char *)&v41, (int32_t)(int64_t)v41, (int32_t)v28, v10); // 0x48d1
                int32_t * v182 = (int32_t *)v181;
                *v182 = 0;
                v19 = v179;
                if (function_22c0(v180) == 0) {
                    uint32_t v183 = *v182; // 0x48f5
                    v27 = v183;
                    v34 = v181;
                    v20 = v179;
                    v24 = v178;
                    v18 = v182;
                    v35 = v181;
                    v21 = v179;
                    v25 = v178;
                    if (v183 == 0) {
                        goto lab_0x4916;
                    } else {
                        goto lab_0x48fb;
                    }
                }
                goto lab_0x47f1;
            } else {
                goto lab_0x45ea;
            }
        }
    } else {
        goto lab_0x43df;
    }
  lab_0x46bc:;
    int64_t v184 = function_2950(&v1, "other"); // 0x46c8
    v32 = v42;
    v26 = v28;
    v33 = v170;
    v40 = (int64_t)"other";
    if ((int32_t)v184 == 0) {
        // break (via goto) -> 0x4750
        goto lab_0x4750_11;
    }
    int64_t v185 = v1; // 0x46d1
    unsigned char v186 = *(char *)v185; // 0x46d6
    int64_t v187 = v186; // 0x46d6
    int64_t v188 = v187; // 0x46dc
    int64_t v189 = v185; // 0x46dc
    if (v186 < 33) {
        // 0x46de
        v31 = v42;
        v37 = v185;
        v39 = (int64_t)"other";
        int64_t v190 = v185; // 0x46e2
        if ((1 << v187 % 64 & v23) == 0) {
            int64_t v191 = v190 + 1;
            v1 = v191;
            unsigned char v192 = *(char *)v191; // 0x46f5
            int64_t v193 = v192; // 0x46f5
            v188 = v193;
            v189 = v191;
            while (v192 < 33) {
                // 0x4810
                v31 = v42;
                v37 = v191;
                v39 = (int64_t)"other";
                v190 = v191;
                if ((1 << v193 % 64 & v23) != 0) {
                    goto lab_0x445b_2;
                }
                v191 = v190 + 1;
                v1 = v191;
                v192 = *(char *)v191;
                v193 = v192;
                v188 = v193;
                v189 = v191;
            }
            goto lab_0x4704;
        } else {
            goto lab_0x445b_2;
        }
    } else {
        goto lab_0x4704;
    }
  lab_0x4704:;
    int64_t v194 = v188; // 0x4707
    int64_t v195 = v189; // 0x4707
    int64_t v196 = v189; // 0x4707
    if (v188 == 35) {
        int64_t v197; // 0x42f3
        unsigned char v198; // 0x488d
        while (true) {
          lab_0x4888:
            // 0x4888
            v197 = v196 + 1;
            v1 = v197;
            v198 = *(char *)v197;
            v196 = v197;
            switch (v198) {
                case 10: {
                    goto lab_0x470d;
                }
                case 0: {
                    goto lab_0x470d;
                }
                default: {
                    goto lab_0x4888;
                }
            }
        }
      lab_0x470d:
        // 0x470d
        v194 = v198;
        v195 = v197;
    }
    int64_t v199 = v195;
    v31 = v42;
    v37 = v199;
    v39 = (int64_t)"other";
    if ((char)v194 == 58) {
        int64_t v200 = v199 + 1; // 0x4712
        v1 = v200;
        v31 = v42;
        v37 = v200;
        v39 = (int64_t)"other";
    }
    goto lab_0x445b_2;
  lab_0x45ea:
    // 0x45ea
    function_21f0(v22);
    v31 = v22;
    v37 = v1;
    v39 = v78;
    goto lab_0x445b_2;
  lab_0x443c:;
    int64_t v201 = v29; // 0x443f
    int64_t v202 = v36; // 0x443f
    int64_t v203 = v36; // 0x443f
    if (v29 == 35) {
        int64_t v204; // 0x42f3
        unsigned char v205; // 0x48bd
        while (true) {
          lab_0x48b8:
            // 0x48b8
            v204 = v203 + 1;
            v1 = v204;
            v205 = *(char *)v204;
            v203 = v204;
            switch (v205) {
                case 10: {
                    goto lab_0x4445;
                }
                case 0: {
                    goto lab_0x4445;
                }
                default: {
                    goto lab_0x48b8;
                }
            }
        }
      lab_0x4445:
        // 0x4445
        v201 = v205;
        v202 = v204;
    }
    int64_t v206 = v202;
    v31 = v42;
    v37 = v206;
    v39 = (int64_t)"mask";
    if ((char)v201 == 58) {
        int64_t v207 = v206 + 1; // 0x444a
        v1 = v207;
        v31 = v42;
        v37 = v207;
        v39 = (int64_t)"mask";
    }
    goto lab_0x445b_2;
  lab_0x47f1:
    // 0x47f1
    function_21f0(v19);
    v31 = v19;
    v37 = v1;
    v39 = v78;
    goto lab_0x445b_2;
  lab_0x4948:;
    // 0x4948
    int64_t v162; // 0x42f3
    int64_t v208 = v162 + 1;
    v1 = v208;
    char v209 = *(char *)v208; // 0x494d
    v8 = v80;
    int64_t v164 = v74; // 0x42f3
    v9 = v209;
    int64_t v165 = v83; // 0x42f3
    v6 = v208;
    v7 = v23;
    v162 = v208;
    switch (v209) {
        case 10: {
            goto lab_0x434c;
        }
        case 0: {
            goto lab_0x434c;
        }
        default: {
            goto lab_0x4948;
        }
    }
  lab_0x462b:
    // 0x462b
    if (v2 == __readfsqword(40)) {
        // 0x463f
        return result;
    }
    int64_t v119 = v5; // 0x4978
    int64_t v120 = function_2290(); // 0x4978
    int64_t v121 = v113; // 0x4978
    int64_t v122 = v114; // 0x4978
    int64_t v123 = v116; // 0x4978
    int64_t v124 = v117; // 0x4978
    int64_t v125 = v118; // 0x4978
  lab_0x497d:;
    int64_t v126 = v119; // 0x4980
    int64_t v127 = v121; // 0x4980
    int64_t v128 = v122; // 0x4980
    int64_t v129 = v123; // 0x4980
    int64_t v130 = v124; // 0x4980
    int64_t v131 = v120; // 0x4980
    int64_t v132 = v125; // 0x4980
    goto lab_0x4353_2;
  lab_0x4353_2:
    // 0x4353
    v23 = v132;
    int64_t v133 = v130;
    v115 = v129;
    int64_t v134 = v127;
    int64_t v135 = v126;
    v100 = v135;
    v101 = v134;
    v102 = v128;
    v103 = v133;
    if ((char)v128 == 0) {
        goto lab_0x4626_3;
    } else {
        // 0x4368
        v42 = &v1;
        v136 = (char *)v115;
        v78 = (int64_t)&v41;
        v83 = &v81;
        int64_t v137 = v135; // 0x42f3
        int64_t v138 = v131;
        int64_t v139 = v133; // 0x42f3
        int64_t v140 = v134; // 0x42f3
        while (true) {
            int64_t v141 = v137; // 0x42f3
            int64_t v142 = v138;
            int64_t v143 = v139; // 0x42f3
            int64_t v144 = v140; // 0x42f3
            int64_t v145; // 0x42f3
            while (true) {
                // 0x4368
                v95 = v141;
                v96 = *(char *)v142;
                v97 = v144;
                v98 = v143;
                v99 = v142;
                while (true) {
                  lab_0x4368:;
                    int64_t v104 = v99;
                    v38 = v98;
                    v28 = v97;
                    v30 = v95;
                    int64_t v105 = v96; // 0x4398
                    v106 = v105;
                    v107 = v104;
                    if (v96 < 33) {
                        int64_t v108 = v104; // 0x43a6
                        v109 = v105;
                        if ((1 << v105 % 64 & v23) == 0) {
                            int64_t v110 = v108 + 1;
                            v1 = v110;
                            unsigned char v111 = *(char *)v110; // 0x43b5
                            int64_t v112 = v111; // 0x43b5
                            v106 = v112;
                            v107 = v110;
                            while (v111 < 33) {
                                // 0x4568
                                v108 = v110;
                                v15 = v112;
                                if ((1 << v112 % 64 & v23) != 0) {
                                    goto lab_0x43df;
                                }
                                v110 = v108 + 1;
                                v1 = v110;
                                v111 = *(char *)v110;
                                v112 = v111;
                                v106 = v112;
                                v107 = v110;
                            }
                            goto lab_0x43c4;
                        } else {
                            goto lab_0x43d6;
                        }
                    } else {
                        goto lab_0x43c4;
                    }
                }
              lab_0x4504_2:;
                int64_t v146 = v87; // 0x4507
                int64_t v147 = v88; // 0x4507
                int64_t v148 = v88; // 0x4507
                if (v87 == 35) {
                    int64_t v149; // 0x42f3
                    unsigned char v150; // 0x483d
                    while (true) {
                      lab_0x4838:
                        // 0x4838
                        v149 = v148 + 1;
                        v1 = v149;
                        v150 = *(char *)v149;
                        v148 = v149;
                        switch (v150) {
                            case 10: {
                                goto lab_0x450d;
                            }
                            case 0: {
                                goto lab_0x450d;
                            }
                            default: {
                                goto lab_0x4838;
                            }
                        }
                    }
                  lab_0x450d:
                    // 0x450d
                    v146 = v150;
                    v147 = v149;
                }
                // 0x450d
                v145 = v147;
                v90 = v146;
                v91 = v145;
                if ((char)v146 == 44) {
                    // break -> 0x4516
                    break;
                }
              lab_0x4360:
                // 0x4360
                v142 = v91;
                v141 = v80;
                v143 = v83;
                v144 = v74;
                v100 = v80;
                v101 = v74;
                v102 = v90;
                v103 = v83;
                if ((char)v90 == 0) {
                    goto lab_0x4626_3;
                }
            }
            int64_t v151 = v145 + 1; // 0x4516
            v1 = v151;
            unsigned char v152 = *(char *)v151; // 0x4520
            int64_t v153 = v152; // 0x4520
            int64_t v154 = v153; // 0x4529
            int64_t v155 = v151; // 0x4529
            int64_t v156; // 0x42f3
            int64_t v157; // 0x42f3
            if (v152 < 33) {
                // 0x452f
                v119 = v80;
                v120 = v151;
                v121 = v74;
                v122 = v153;
                v123 = v115;
                v124 = v83;
                v125 = v23;
                if ((1 << v153 % 64 & v23) != 0) {
                    goto lab_0x497d;
                }
                int64_t v158 = v145 + 2;
                v1 = v158;
                unsigned char v159 = *(char *)v158; // 0x4545
                int64_t v160 = v159; // 0x4545
                v154 = v160;
                v155 = v158;
                while (v159 < 33) {
                    int64_t v161 = v158 + 1; // 0x455c
                    v157 = v160;
                    v156 = v158;
                    if ((1 << v160 % 64 & v23) != 0) {
                        goto lab_0x4353;
                    }
                    v158 = v161;
                    v1 = v158;
                    v159 = *(char *)v158;
                    v160 = v159;
                    v154 = v160;
                    v155 = v158;
                }
            }
            // 0x4930
            v157 = v154;
            v156 = v155;
            v162 = v155;
            if (v154 == 35) {
                goto lab_0x4948;
            }
          lab_0x4353:
            // 0x4353
            v138 = v156;
            v137 = v80;
            v139 = v83;
            v140 = v74;
            v100 = v80;
            v101 = v74;
            v102 = v157;
            v103 = v83;
            if ((char)v157 == 0) {
                goto lab_0x4626_3;
            }
        }
      lab_0x4750_11:;
        int64_t v163 = function_2200(v32, (char *)v40, (int32_t)v33, (int32_t)v26, v10); // 0x4750
        *(int32_t *)v163 = 22;
        v76 = v26;
        v77 = v33;
        v79 = v40;
        goto lab_0x475b_2;
    }
  lab_0x434c:
    // 0x434c
    v126 = v8;
    v127 = v164;
    v128 = v9;
    v129 = (int64_t)"user";
    v130 = v165;
    v131 = v6;
    v132 = v7;
    goto lab_0x4353_2;
  lab_0x4916:
    // 0x4916
    *v18 = 22;
    function_21f0(v21);
    int64_t v166 = 0; // 0x4924
    int64_t v167 = v35; // 0x4924
    int64_t v168 = v25; // 0x4924
    goto lab_0x4903;
  lab_0x48fb:
    // 0x48fb
    function_21f0(v20);
    v166 = v27;
    v167 = v34;
    v168 = v24;
    goto lab_0x4903;
  lab_0x4903:
    // 0x4903
    v1 = v168;
    v76 = v166;
    v77 = v167;
    v79 = v78;
    goto lab_0x475b_2;
}

// Address range: 0x4990 - 0x4991
int64_t acl_set_fd(int64_t a1, int64_t a2) {
    // 0x4990
    int64_t result; // 0x4990
    return result;
}

// Address range: 0x4993 - 0x4a30
int64_t function_4993(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {
    int64_t v1 = __readfsqword(40); // 0x499b
    int64_t result; // 0x4993
    if (a2 == 0) {
        goto lab_0x4a10;
    } else {
        int64_t v2 = a2 - 8; // 0x49b0
        if (*(int16_t *)v2 != 0x712c) {
            goto lab_0x4a10;
        } else {
            // 0x49b8
            int64_t v3; // bp-40, 0x4993
            int64_t v4 = function_2870(v2, &v3); // 0x49c2
            result = 0xffffffff;
            if (v4 != 0) {
                int64_t v5 = function_2250(a1 & 0xffffffff, "system.posix_acl_access", v4, v3, 0); // 0x49e3
                function_21f0(v4);
                result = v5 & 0xffffffff;
            }
            goto lab_0x49f3;
        }
    }
  lab_0x4a10:;
    int64_t v6 = function_2200(a1, (char *)a2, (int32_t)a3, (int32_t)a4, a5); // 0x4a10
    *(int32_t *)v6 = 22;
    result = 0xffffffff;
    goto lab_0x49f3;
  lab_0x49f3:
    // 0x49f3
    if (v1 != __readfsqword(40)) {
        // 0x4a2b
        return function_2290();
    }
    // 0x4a03
    return result;
}

// Address range: 0x4a30 - 0x4a31
int64_t acl_set_file(int64_t a1, int64_t * a2, int64_t a3) {
    // 0x4a30
    int64_t result; // 0x4a30
    return result;
}

// Address range: 0x4a33 - 0x4b00
int64_t function_4a33(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {
    int64_t v1 = __readfsqword(40); // 0x4a3d
    int64_t v2; // 0x4a33
    int64_t v3; // 0x4a52
    if (a3 == 0) {
        goto lab_0x4a6d;
    } else {
        // 0x4a52
        v3 = a3 - 8;
        if (*(int16_t *)v3 != 0x712c) {
            goto lab_0x4a6d;
        } else {
            int32_t v4 = a2; // 0x4a5d
            v2 = (int64_t)"system.posix_acl_default";
            if (v4 == 0x4000) {
                goto lab_0x4aa7;
            } else {
                // 0x4a65
                v2 = (int64_t)"system.posix_acl_access";
                if (v4 == (int32_t)&g5) {
                    goto lab_0x4aa7;
                } else {
                    goto lab_0x4a6d;
                }
            }
        }
    }
  lab_0x4a6d:;
    int64_t v5 = function_2200(a1, (char *)a2, (int32_t)a3, (int32_t)a4, a5); // 0x4a6d
    *(int32_t *)v5 = 22;
    int64_t result = 0xffffffff; // 0x4a78
    goto lab_0x4a7e;
  lab_0x4a7e:
    // 0x4a7e
    if (v1 != __readfsqword(40)) {
        // 0x4af1
        return function_2290();
    }
    // 0x4a8e
    return result;
  lab_0x4aa7:;
    // 0x4aa7
    int64_t v6; // bp-40, 0x4a33
    int64_t v7 = function_2870(v3, &v6); // 0x4aae
    result = 0xffffffff;
    if (v7 != 0) {
        int64_t v8 = function_2370(a1, v2, v7, v6, 0); // 0x4acb
        function_21f0(v7);
        result = v8 & 0xffffffff;
    }
    goto lab_0x4a7e;
}

// Address range: 0x4b00 - 0x4b01
int64_t acl_set_permset(void) {
    // 0x4b00
    int64_t result; // 0x4b00
    return result;
}

// Address range: 0x4b03 - 0x4b5a
int64_t function_4b03(int64_t a1, int64_t a2) {
    // 0x4b03
    int64_t v1; // 0x4b03
    int64_t v2; // 0x4b03
    int64_t v3; // 0x4b03
    int64_t v4; // 0x4b48
    if (a1 != 0) {
        // 0x4b0d
        if (*(int16_t *)(a1 - 8) == -0x6295) {
            if (a2 == 0) {
                // 0x4b48
                v4 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1);
                *(int32_t *)v4 = 22;
                // 0x4b53
                return 0xffffffff;
            }
            // 0x4b1a
            if (*(int16_t *)(a2 - 8) == 0x1ed5) {
                // 0x4b22
                *(int32_t *)(a1 + 56) = (int32_t)a2;
                return 0;
            }
            // 0x4b48
            v4 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1);
            *(int32_t *)v4 = 22;
            // 0x4b53
            return 0xffffffff;
        }
    }
    int64_t v5 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1); // 0x4b30
    *(int32_t *)v5 = 22;
    if (a2 != 0) {
        // 0x4b40
        if (*(int16_t *)(a2 - 8) == 0x1ed5) {
            // 0x4b53
            return 0xffffffff;
        }
    }
    // 0x4b48
    v4 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1);
    *(int32_t *)v4 = 22;
    // 0x4b53
    return 0xffffffff;
}

// Address range: 0x4b60 - 0x4b61
int64_t acl_set_qualifier(void) {
    // 0x4b60
    int64_t result; // 0x4b60
    return result;
}

// Address range: 0x4b63 - 0x4bb5
int64_t function_4b63(int64_t a1) {
    // 0x4b63
    int64_t v1; // 0x4b63
    int64_t v2; // 0x4b63
    int64_t v3; // 0x4b63
    int64_t v4; // 0x4b63
    int64_t v5; // 0x4b82
    if (a1 == 0) {
        // 0x4b82
        v5 = function_2200(a1, (char *)v2, (int32_t)v3, (int32_t)v4, v1);
        *(int32_t *)v5 = 22;
        return 0xffffffff;
    }
    int64_t v6 = a1 - 8; // 0x4b6d
    if (*(int16_t *)v6 != -0x6295) {
        // 0x4b82
        v5 = function_2200(a1, (char *)v2, (int32_t)v3, (int32_t)v4, v1);
        *(int32_t *)v5 = 22;
        return 0xffffffff;
    }
    // 0x4b75
    switch (*(int32_t *)(a1 + 24)) {
        case 2: {
        }
        case 8: {
            // 0x4ba0
            *(int32_t *)(a1 + 40) = (int32_t)v2;
            function_2630(v6);
            return 0;
        }
    }
    // 0x4b82
    v5 = function_2200(a1, (char *)v2, (int32_t)v3, (int32_t)v4, v1);
    *(int32_t *)v5 = 22;
    return 0xffffffff;
}

// Address range: 0x4bc0 - 0x4bc1
int64_t acl_set_tag_type(void) {
    // 0x4bc0
    int64_t result; // 0x4bc0
    return result;
}

// Address range: 0x4bc3 - 0x4c16
int64_t function_4bc3(int64_t a1, uint64_t a2) {
    // 0x4bc3
    int64_t v1; // 0x4bc3
    int64_t v2; // 0x4bc3
    int64_t v3; // 0x4bc3
    int64_t v4; // 0x4bea
    if (a1 == 0) {
        // 0x4bea
        v4 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1);
        *(int32_t *)v4 = 22;
        return 0xffffffff;
    }
    int64_t v5 = a1 - 8; // 0x4bcd
    if (*(int16_t *)v5 != -0x6295) {
        // 0x4bea
        v4 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1);
        *(int32_t *)v4 = 22;
        return 0xffffffff;
    }
    uint32_t v6 = (int32_t)a2; // 0x4bd5
    if (v6 >= 33) {
        // 0x4bea
        v4 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1);
        *(int32_t *)v4 = 22;
        return 0xffffffff;
    }
    if ((1 << a2 % 64 & 0x100010116) == 0) {
        // 0x4bea
        v4 = function_2200(a1, (char *)a2, (int32_t)v2, (int32_t)v3, v1);
        *(int32_t *)v4 = 22;
        return 0xffffffff;
    }
    // 0x4c00
    *(int32_t *)(a1 + 24) = v6;
    function_2630(v5);
    return 0;
}

// Address range: 0x4c20 - 0x4c21
int64_t acl_size(void) {
    // 0x4c20
    int64_t result; // 0x4c20
    return result;
}

// Address range: 0x4c23 - 0x4c67
int64_t function_4c23(int64_t a1) {
    // 0x4c23
    int64_t v1; // 0x4c23
    int64_t v2; // 0x4c23
    int64_t v3; // 0x4c23
    int64_t v4; // 0x4c23
    int64_t v5; // 0x4c50
    if (a1 == 0) {
        // 0x4c50
        v5 = function_2200(a1, (char *)v2, (int32_t)v3, (int32_t)v4, v1);
        *(int32_t *)v5 = 22;
        return -1;
    }
    // 0x4c2d
    if (*(int16_t *)(a1 - 8) == 0x712c) {
        // 0x4c35
        return 40 * *(int64_t *)(a1 + 40) + 8;
    }
    // 0x4c50
    v5 = function_2200(a1, (char *)v2, (int32_t)v3, (int32_t)v4, v1);
    *(int32_t *)v5 = 22;
    return -1;
}

// Address range: 0x4c70 - 0x4c71
int64_t acl_to_text(void) {
    // 0x4c70
    int64_t result; // 0x4c70
    return result;
}

// Address range: 0x4c73 - 0x4c8d
int64_t function_4c73(int64_t a1, int64_t a2, int64_t a3) {
    // 0x4c73
    return function_2f60(a1, a2, 0, 10, &g2, 1, (int64_t)&g10);
}

// Address range: 0x4c90 - 0x4c91
int64_t acl_check(void) {
    // 0x4c90
    int64_t result; // 0x4c90
    return result;
}

// Address range: 0x4c93 - 0x4e14
int64_t function_4c93(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {
    int64_t v1; // 0x4dc8
    if (a1 == 0) {
        // 0x4dc8
        v1 = function_2200(a1, (char *)a2, (int32_t)a3, (int32_t)a4, a5);
        *(int32_t *)v1 = 22;
        return 0xffffffff;
    }
    int64_t v2 = a1 - 8; // 0x4ca1
    if (*(int16_t *)v2 != 0x712c) {
        // 0x4dc8
        v1 = function_2200(a1, (char *)a2, (int32_t)a3, (int32_t)a4, a5);
        *(int32_t *)v1 = 22;
        return 0xffffffff;
    }
    if (a2 != 0) {
        // 0x4cb6
        *(int32_t *)a2 = 0;
    }
    int64_t result = *(int64_t *)(a1 + 8); // 0x4cbc
    if (result == v2) {
        // 0x4ce6
        return 0x3000;
    }
    // 0x4cc5
    if (*(int32_t *)(result + 32) < 33) {
        // 0x4ce6
        return result;
    }
    // 0x4ce6
    return 0x4000;
}

// Address range: 0x4e20 - 0x4e21
int64_t acl_valid(void) {
    // 0x4e20
    int64_t result; // 0x4e20
    return result;
}

// Address range: 0x4e23 - 0x4e59
int64_t function_4e23(int64_t a1, int64_t a2) {
    int64_t result = acl_check(); // 0x4e2a
    uint32_t v1 = (int32_t)result; // 0x4e2f
    if (v1 == 0) {
        // 0x4e33
        return result;
    }
    // 0x4e40
    if (v1 >= 1) {
        // 0x4e47
        int64_t v2; // 0x4e23
        int64_t v3; // 0x4e23
        int64_t v4; // 0x4e23
        *(int32_t *)function_2200(a1, NULL, (int32_t)v3, (int32_t)v4, v2) = 22;
    }
    // 0x4e33
    return 0xffffffff;
}

// Address range: 0x4e60 - 0x4e61
int64_t acl_cmp(void) {
    // 0x4e60
    int64_t result; // 0x4e60
    return result;
}

// Address range: 0x4e63 - 0x4f24
int64_t function_4e63(int64_t a1, int64_t a2) {
    // 0x4e63
    int64_t v1; // 0x4e63
    if (a1 == 0) {
        goto lab_0x4ef0;
    } else {
        int64_t v2 = a1 - 8; // 0x4e71
        if (*(int16_t *)v2 != 0x712c) {
            goto lab_0x4ef0;
        } else {
            // 0x4e79
            v1 = v2;
            if (a2 != 0) {
                // 0x4e86
                v1 = v2;
                if (*(int16_t *)(a2 - 8) == 0x712c) {
                    // 0x4e8e
                    if (*(int64_t *)(a1 + 40) != *(int64_t *)(a2 + 40)) {
                        // 0x4ee5
                        return 1;
                    }
                    int64_t v3 = *(int64_t *)(a1 + 8); // 0x4e9d
                    if (v3 == v2) {
                        // 0x4ee5
                        return 0;
                    }
                    int64_t v4 = v3;
                    int64_t v5 = *(int64_t *)(a2 + 8);
                    int32_t v6 = *(int32_t *)(v4 + 32); // 0x4ebd
                    int64_t result = 1; // 0x4ec3
                    while (v6 == *(int32_t *)(v5 + 32)) {
                        // 0x4ec5
                        result = 1;
                        if (*(int32_t *)(v4 + 64) != *(int32_t *)(v5 + 64)) {
                            // break -> 0x4ee5
                            break;
                        }
                        if (v6 != 2 != v6 != 8) {
                            // 0x4ed7
                            result = 1;
                            if (*(int32_t *)(v4 + 48) != *(int32_t *)(v5 + 48)) {
                                // break -> 0x4ee5
                                break;
                            }
                        }
                        int64_t v7 = *(int64_t *)(v4 + 16); // 0x4eb0
                        result = 0;
                        if (v7 == v2) {
                            // break -> 0x4ee5
                            break;
                        }
                        v4 = v7;
                        v5 += 16;
                        v6 = *(int32_t *)(v4 + 32);
                        result = 1;
                    }
                    // 0x4ee5
                    return result;
                }
            }
            goto lab_0x4f08;
        }
    }
  lab_0x4ef0:;
    // 0x4ef0
    int64_t v8; // 0x4e63
    int64_t v9; // 0x4e63
    int64_t v10; // 0x4e63
    int64_t v11 = function_2200(a1, (char *)a2, (int32_t)v9, (int32_t)v10, v8); // 0x4ef0
    *(int32_t *)v11 = 22;
    v1 = 0;
    if (a2 != 0) {
        // 0x4f00
        v1 = a2;
        if (*(int16_t *)(a2 - 8) == 0x712c) {
            // 0x4ee5
            return 0xffffffff;
        }
    }
    goto lab_0x4f08;
  lab_0x4f08:;
    int64_t v12 = function_2200(a1, (char *)v1, (int32_t)v9, (int32_t)v10, v8); // 0x4f08
    *(int32_t *)v12 = 22;
    // 0x4ee5
    return 0xffffffff;
}

// Address range: 0x4f30 - 0x4f31
int64_t acl_entries(int64_t a1) {
    // 0x4f30
    int64_t result; // 0x4f30
    return result;
}

// Address range: 0x4f33 - 0x4f65
int64_t function_4f33(int64_t a1) {
    // 0x4f33
    int64_t v1; // 0x4f33
    int64_t v2; // 0x4f33
    int64_t v3; // 0x4f33
    int64_t v4; // 0x4f33
    int64_t v5; // 0x4f50
    if (a1 == 0) {
        // 0x4f50
        v5 = function_2200(a1, (char *)v2, (int32_t)v3, (int32_t)v4, v1);
        *(int32_t *)v5 = 22;
        return 0xffffffff;
    }
    // 0x4f3d
    if (*(int16_t *)(a1 - 8) == 0x712c) {
        // 0x4f45
        return (int64_t)*(int32_t *)(a1 + 40);
    }
    // 0x4f50
    v5 = function_2200(a1, (char *)v2, (int32_t)v3, (int32_t)v4, v1);
    *(int32_t *)v5 = 22;
    return 0xffffffff;
}

// Address range: 0x4f70 - 0x5060
int64_t function_4f70(int64_t * a1, int64_t a2) {
    int64_t v1 = __readfsqword(40); // 0x4f85
    int64_t v2; // bp-56, 0x4f70
    int32_t v3; // 0x4f70
    if ((int32_t)acl_entries(a2) != 3) {
        // 0x4fc4
        int64_t v4; // 0x4f70
        v3 = v4;
        int64_t v5; // bp-64, 0x4f70
        int64_t v6 = acl_get_entry(a2, 0, &v5); // 0x4fcc
        while ((int32_t)v6 == 1) {
            // 0x4fb0
            int32_t v7; // bp-68, 0x4f70
            acl_get_tag_type(v5, (int64_t *)&v7);
            if (v7 == 16) {
                // 0x5000
                acl_get_permset(v5, &v2);
                if ((int32_t)acl_get_perm(v2, 4) == 1) {
                    goto lab_0x5027;
                } else {
                    // 0x5023
                    *(int32_t *)a1 = v3 & -33;
                    goto lab_0x5027;
                }
            }
            v6 &= 0xffffffff;
        }
        // 0x4fd8
        *(int32_t *)a1 = v3 & -57;
    }
    goto lab_0x4fdc;
  lab_0x4fdc:;
    int64_t result = v1 - __readfsqword(40); // 0x4fe1
    if (result != 0) {
        // 0x5059
        return function_2290();
    }
    // 0x4fec
    return result;
  lab_0x5027:
    // 0x5027
    if ((int32_t)acl_get_perm(v2, 2) == 1) {
        goto lab_0x503f;
    } else {
        // 0x503b
        *(int32_t *)a1 = v3 & -17;
        goto lab_0x503f;
    }
  lab_0x503f:
    // 0x503f
    if ((int32_t)acl_get_perm(v2, 1) == 1) {
        goto lab_0x4fdc;
    } else {
        // 0x5053
        *(int32_t *)a1 = v3 & -9;
        goto lab_0x4fdc;
    }
}

// Address range: 0x5060 - 0x5061
int64_t acl_equiv_mode(void) {
    // 0x5060
    int64_t result; // 0x5060
    return result;
}

// Address range: 0x5063 - 0x515f
int64_t function_5063(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {
    int64_t v1 = a4; // 0x506b
    int64_t v2 = a2; // 0x506b
    int64_t v3 = 0; // 0x506b
    int64_t v4 = a5; // 0x506b
    if (a1 != 0) {
        int64_t v5 = a1 - 8; // 0x506d
        v1 = a4;
        v2 = a2;
        v3 = a1;
        v4 = a5;
        if (*(int16_t *)v5 == 0x712c) {
            int64_t result = *(int64_t *)(a1 + 8); // 0x5075
            if (result == v5) {
                // 0x5150
                if (a2 == 0) {
                    // 0x509d
                    return 0;
                }
                // 0x50f9
                *(int32_t *)a2 = 0;
                return 0;
            }
            // 0x5089
            v1 = &g4;
            v2 = 0;
            v3 = 0;
            v4 = v5;
            if (*(int32_t *)(result + 32) < 33) {
                // 0x509d
                return result;
            }
        }
    }
    int64_t v6 = function_2200(v3, (char *)v2, (int32_t)a3, (int32_t)v1, v4); // 0x50b0
    *(int32_t *)v6 = 22;
    // 0x509d
    return 0xffffffff;
}

// Address range: 0x5160 - 0x5161
int64_t acl_error(void) {
    // 0x5160
    int64_t result; // 0x5160
    return result;
}

// Address range: 0x5163 - 0x51eb
int64_t function_5163(int64_t a1) {
    int32_t v1 = a1; // 0x5164
    if (v1 == 0x3000) {
        // 0x51b8
        return function_2270(0, "Missing or wrong entry", 5);
    }
    if (v1 > 0x3000) {
        if (v1 == 0x4000) {
            // 0x51a0
            return function_2270(0, "Invalid entry type", 5);
        }
        // 0x51d0
        return 0;
    }
    if (v1 == (int32_t)&g1) {
        // 0x51d8
        return function_2270(0, "Multiple entries of same type", 5);
    }
    if (v1 == 0x2000) {
        // 0x517e
        return function_2270(0, "Duplicate entries", 5);
    }
    // 0x51d0
    return 0;
}

// Address range: 0x51f0 - 0x51f1
int64_t acl_extended_fd(void) {
    // 0x51f0
    int64_t result; // 0x51f0
    return result;
}

// Address range: 0x51f3 - 0x5267
int64_t function_51f3(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x51f3
    int64_t v1; // 0x51f3
    int32_t v2 = function_2320(a1, "system.posix_acl_access", 0, 0, v1); // 0x5207
    int64_t v3; // 0x51f3
    if (v2 < 0) {
        int32_t v4 = *(int32_t *)function_2200(a1, "system.posix_acl_access", 0, 0, v1); // 0x522b
        v3 = 0xffffffff;
        if (v4 != 61) {
            // 0x5216
            return 0xffffffff;
        }
    } else {
        // 0x520b
        v3 = 1;
        if (v2 >= 29) {
            // 0x5216
            return 1;
        }
    }
    int64_t v5 = a1 & 0xffffffff; // 0x5200
    int32_t v6 = function_2320(v5, "system.posix_acl_default", 0, 0, v3); // 0x5245
    int32_t v7 = v6 - 27; // 0x5245
    int64_t result = v7 < 0 == (26 - v6 & v6) < 0 == (v7 != 0); // 0x5248
    if (v6 >= 0) {
        // 0x5216
        return result;
    }
    int32_t v8 = *(int32_t *)function_2200(v5, "system.posix_acl_default", 0, 0, result); // 0x5259
    return v8 != 61 ? 0xffffffff : 0;
}

// Address range: 0x5270 - 0x5271
int64_t acl_extended_file(void) {
    // 0x5270
    int64_t result; // 0x5270
    return result;
}

// Address range: 0x5273 - 0x5280
int64_t function_5273(void) {
    // 0x5273
    int64_t v1; // 0x5273
    int64_t v2; // 0x5273
    int64_t v3; // 0x5273
    return function_26c0(v1, *(int64_t *)0x8320, v2, v3);
}

// Address range: 0x5280 - 0x5281
int64_t acl_extended_file_nofollow(void) {
    // 0x5280
    int64_t result; // 0x5280
    return result;
}

// Address range: 0x5283 - 0x5290
int64_t function_5283(void) {
    // 0x5283
    int64_t v1; // 0x5283
    int64_t v2; // 0x5283
    int64_t v3; // 0x5283
    return function_26c0(v1, *(int64_t *)0x8310, v2, v3);
}

// Address range: 0x5290 - 0x5291
int64_t acl_from_mode(int32_t a1) {
    // 0x5290
    int64_t result; // 0x5290
    return result;
}

// Address range: 0x5293 - 0x5346
int64_t function_5293(int64_t a1) {
    int64_t v1 = function_27e0(3); // 0x52a2
    if (v1 == 0) {
        // 0x5320
        return 0;
    }
    // 0x52af
    int64_t v2; // 0x5293
    int64_t v3 = function_2750(v1, v2); // 0x52b2
    if (v3 == 0) {
        // 0x5330
        function_28f0(v1);
        return 0;
    }
    uint32_t v4 = (int32_t)a1; // 0x52bc
    *(int32_t *)(v3 + 32) = 1;
    *(int32_t *)(v3 + 48) = -1;
    *(int32_t *)(v3 + 64) = v4 / 64 % 8;
    int64_t v5 = function_2750(v1, v2); // 0x52d8
    if (v5 == 0) {
        // 0x5330
        function_28f0(v1);
        return 0;
    }
    // 0x52e2
    *(int32_t *)(v5 + 32) = 4;
    *(int32_t *)(v5 + 48) = -1;
    *(int32_t *)(v5 + 64) = v4 / 8 % 8;
    int64_t v6 = function_2750(v1, v2); // 0x52fe
    if (v6 == 0) {
        // 0x5330
        function_28f0(v1);
        return 0;
    }
    // 0x5308
    *(int32_t *)(v6 + 32) = 32;
    *(int32_t *)(v6 + 48) = -1;
    *(int32_t *)(v6 + 64) = v4 % 8;
    // 0x5320
    return v1 + 8;
}

// Address range: 0x5350 - 0x5351
int64_t acl_get_fd(int64_t a1) {
    // 0x5350
    int64_t result; // 0x5350
    return result;
}

// Address range: 0x5353 - 0x54e0
int64_t function_5353(int64_t a1) {
    int64_t v1 = a1 & 0xffffffff; // 0x535c
    int64_t v2; // bp-200, 0x5353
    int64_t v3 = &v2; // 0x5361
    int64_t v4 = __readfsqword(40); // 0x5368
    int64_t v5 = v3 - 129 & -16; // 0x53b9
    int32_t v6 = v5; // 0x53c0
    int64_t v7; // 0x5353
    int64_t v8 = function_2320(v1, "system.posix_acl_access", v6, 132, v7); // 0x53c0
    int64_t v9 = 0x100000000 * v8 / 0x100000000; // 0x53c5
    int64_t v10 = v8; // 0x53cb
    int64_t v11 = 132; // 0x53cb
    int64_t v12 = v5; // 0x53cb
    int64_t v13 = v9; // 0x53cb
    int32_t v14; // 0x5353
    int32_t v15; // 0x5353
    int64_t v16; // 0x5353
    int64_t v17; // 0x5353
    int64_t v18; // 0x5353
    if ((int32_t)v8 == -1) {
        int32_t v19 = *(int32_t *)function_2200(v1, (char *)v9, v6, 132, v7); // 0x5425
        v15 = v19;
        if (v19 != 34) {
            goto lab_0x53e0;
        } else {
            int64_t v20 = function_2320(v1, "system.posix_acl_access", 0, 0, v7); // 0x5436
            int32_t v21 = v20; // 0x543d
            if (v21 < 1) {
                // 0x542c
                v14 = v21;
                v16 = 0;
                v17 = 0;
                v18 = v20 & 0xffffffff;
                goto lab_0x53d5;
            } else {
                int64_t v22 = v3 - 144; // 0x5392
                v11 = 0x100000000 * v20 / 0x100000000;
                int64_t v23 = v11 + 23; // 0x5447
                int64_t v24 = v23 & -0x1000; // 0x544e
                int64_t v25 = v22; // 0x545e
                if (v24 != 0) {
                    int64_t v26 = v22 - (int64_t)&g1; // 0x5460
                    int64_t v27 = v26; // 0x5473
                    v25 = v26;
                    while (v26 != v22 - v24) {
                        // 0x5460
                        v26 = v27 - (int64_t)&g1;
                        v27 = v26;
                        v25 = v26;
                    }
                }
                // 0x5475
                v12 = 15 - (v23 & (int64_t)(int32_t)&g9 & -16) + v25 & -16;
                v10 = function_2320(v1, "system.posix_acl_access", (int32_t)v12, (int32_t)v11, v7);
                v13 = 0x100000000 * v10 / 0x100000000;
                goto lab_0x53cd;
            }
        }
    } else {
        goto lab_0x53cd;
    }
  lab_0x53cd:;
    int32_t v28 = v13;
    v14 = v28;
    v16 = v11;
    v17 = v12;
    v18 = v13;
    int64_t result = v10; // 0x53cf
    if (v28 >= 0 == (v28 != 0)) {
        goto lab_0x53fe;
    } else {
        goto lab_0x53d5;
    }
  lab_0x53e0:
    // 0x53e0
    result = 0;
    if (v15 != 61) {
        goto lab_0x53fe;
    } else {
        goto lab_0x53e5;
    }
  lab_0x53fe:
    // 0x53fe
    if (v4 != __readfsqword(40)) {
        // 0x54d0
        return function_2290();
    }
    // 0x5411
    return result;
  lab_0x53d5:
    // 0x53d5
    if (v14 == 0) {
        goto lab_0x53e5;
    } else {
        int64_t v29 = function_2200(v1, (char *)v18, (int32_t)v17, (int32_t)v16, v7); // 0x53d9
        v15 = *(int32_t *)v29;
        goto lab_0x53e0;
    }
  lab_0x53e5:;
    int64_t v30 = function_2380(v1, &v2); // 0x53ef
    result = 0;
    if ((int32_t)v30 == 0) {
        // 0x54c0
        int32_t v31; // 0x5353
        result = acl_from_mode(v31);
    }
    goto lab_0x53fe;
}

// Address range: 0x54e0 - 0x54e1
int64_t acl_get_file(int64_t a1, int64_t * a2) {
    // 0x54e0
    int64_t result; // 0x54e0
    return result;
}

// Address range: 0x54e3 - 0x5710
int64_t function_54e3(int64_t a1, int64_t a2) {
    // 0x54e3
    int64_t v1; // bp-200, 0x54e3
    int64_t v2 = &v1; // 0x54f4
    int64_t v3 = __readfsqword(40); // 0x54fb
    int64_t v4 = v2 - 129 & -16; // 0x553a
    int32_t v5 = a2; // 0x5541
    int64_t v6 = (int64_t)"system.posix_acl_default"; // 0x5547
    int64_t result; // 0x54e3
    int64_t v7; // 0x54e3
    if (v5 == 0x4000) {
        goto lab_0x5597;
    } else {
        // 0x5549
        v6 = (int64_t)"system.posix_acl_access";
        if (v5 == (int32_t)&g5) {
            goto lab_0x5597;
        } else {
            // 0x5555
            int64_t v8; // 0x54e3
            int64_t v9 = function_2200(a1, (char *)a2, (int32_t)v4, (int32_t)v8, v7); // 0x5555
            *(int32_t *)v9 = 22;
            result = 0;
            goto lab_0x5563;
        }
    }
  lab_0x5597:;
    int64_t v10 = function_21d0(a1, v6, v4, 132); // 0x55a2
    int64_t v11 = 0x100000000 * v10 / 0x100000000; // 0x55a7
    int64_t v12 = v10; // 0x55ad
    int64_t v13 = 132; // 0x55ad
    int64_t v14 = v4; // 0x55ad
    int64_t v15 = v11; // 0x55ad
    int32_t v16; // 0x54e3
    int64_t v17; // 0x54e3
    int64_t v18; // 0x54e3
    int64_t v19; // 0x54e3
    int64_t v20; // 0x54e3
    int64_t v21; // 0x54e3
    if ((int32_t)v10 == -1) {
        int64_t v22 = function_2200(a1, (char *)v11, (int32_t)v4, 132, v7); // 0x5618
        result = 0;
        v18 = 132;
        v20 = v4;
        switch (*(int32_t *)v22) {
            case 34: {
                int64_t v23 = function_21d0(a1, v6, 0, 0); // 0x567a
                int32_t v24 = v23; // 0x5681
                if (v24 < 1) {
                    // 0x5670
                    v16 = v24;
                    v17 = 0;
                    v19 = 0;
                    v21 = v23 & 0xffffffff;
                    goto lab_0x55b7;
                } else {
                    int64_t v25 = v2 - 144; // 0x5525
                    int64_t v26 = 0x100000000 * v23 / 0x100000000; // 0x5689
                    int64_t v27 = v26 + 23; // 0x568f
                    int64_t v28 = v27 & -0x1000; // 0x5696
                    int64_t v29 = v25; // 0x56a6
                    if (v28 != 0) {
                        int64_t v30 = v25 - (int64_t)&g1; // 0x56a8
                        int64_t v31 = v30; // 0x56bb
                        v29 = v30;
                        while (v30 != v25 - v28) {
                            // 0x56a8
                            v30 = v31 - (int64_t)&g1;
                            v31 = v30;
                            v29 = v30;
                        }
                    }
                    int64_t v32 = 15 - (v27 & (int64_t)(int32_t)&g9 & -16) + v29 & -16; // 0x56dc
                    int64_t v33 = function_21d0(a1, v6, v32, v26); // 0x56e3
                    v12 = v33;
                    v13 = v26;
                    v14 = v32;
                    v15 = 0x100000000 * v33 / 0x100000000;
                    goto lab_0x55af;
                }
            }
            case 61: {
                goto lab_0x55bb;
            }
            default: {
                goto lab_0x5563;
            }
        }
    } else {
        goto lab_0x55af;
    }
  lab_0x55af:;
    int32_t v34 = v15;
    result = v12;
    v16 = v34;
    v17 = v13;
    v19 = v14;
    v21 = v15;
    if (v34 >= 0 == (v34 != 0)) {
        goto lab_0x5563;
    } else {
        goto lab_0x55b7;
    }
  lab_0x55bb:;
    int64_t v35 = function_22d0(a1, &v1); // 0x55c8
    result = 0;
    if ((int32_t)v35 == 0) {
        int32_t v36; // 0x54e3
        if (v5 != 0x4000) {
            // 0x5650
            result = acl_from_mode(v36);
        } else {
            uint32_t v37 = v36 & 0xf000;
            if (v37 == 0x4000) {
                // 0x56f0
                result = acl_init(0);
            } else {
                int64_t v38 = function_2200((int64_t)v37, (char *)&v1, (int32_t)v20, (int32_t)v18, v7); // 0x55f1
                *(int32_t *)v38 = 13;
                result = 0;
            }
        }
    }
    goto lab_0x5563;
  lab_0x5563:
    // 0x5563
    if (v3 != __readfsqword(40)) {
        // 0x56ff
        return function_2290();
    }
    // 0x5576
    return result;
  lab_0x55b7:
    // 0x55b7
    v18 = v17;
    v20 = v19;
    if (v16 != 0) {
        int64_t v39 = function_2200(a1, (char *)v21, (int32_t)v19, (int32_t)v17, v7); // 0x5638
        result = 0;
        v18 = v17;
        v20 = v19;
        if (*(int32_t *)v39 == 61) {
            goto lab_0x55bb;
        } else {
            goto lab_0x5563;
        }
    } else {
        goto lab_0x55bb;
    }
}

// Address range: 0x5710 - 0x5711
int64_t acl_to_any_text(void) {
    // 0x5710
    int64_t result; // 0x5710
    return result;
}

// Address range: 0x5713 - 0x5727
int64_t function_5713(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {
    int64_t result = function_2f60(a1, 0, (int32_t)a2, 0x100000000000000 * a3 / 0x100000000000000, NULL, a4 & 0xffffffff, (int64_t)&g10); // 0x5722
    return result;
}

// Address range: 0x5730 - 0x5731
int64_t perm_copy_fd(void) {
    // 0x5730
    int64_t result; // 0x5730
    return result;
}

// Address range: 0x5733 - 0x5a50
int64_t function_5733(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {
    int64_t v1 = a2 & 0xffffffff; // 0x5749
    int64_t v2 = __readfsqword(40); // 0x5755
    int64_t v3; // bp-216, 0x5733
    int64_t v4 = function_2380(v1, &v3); // 0x576d
    int64_t v5 = 0xffffffff; // 0x5774
    int64_t v6; // 0x5733
    int64_t v7; // 0x5733
    int64_t v8; // 0x5733
    int32_t v9; // bp-192, 0x5733
    int32_t * v10; // 0x57e8
    int32_t v11; // 0x57e8
    int64_t v12; // 0x57f3
    int64_t v13; // 0x57fa
    int64_t v14; // 0x5740
    int64_t v15; // 0x577c
    int32_t * v16; // 0x5888
    if ((int32_t)v4 != 0) {
        goto lab_0x57a7;
    } else {
        // 0x577a
        v14 = a4 & 0xffffffff;
        v15 = acl_get_fd(v1);
        if (v15 == 0) {
            int64_t v17 = function_2200(v1, (char *)&v3, (int32_t)a3, (int32_t)a4, a5); // 0x5880
            v16 = (int32_t *)v17;
            v5 = 0xffffffff;
            switch (*v16) {
                case 38: {
                    goto lab_0x5900;
                }
                case 95: {
                    goto lab_0x5900;
                }
                default: {
                    goto lab_0x57a7;
                }
            }
        } else {
            int64_t v18 = acl_set_fd(v14, v15); // 0x5793
            v7 = v15;
            v8 = v15;
            v6 = v18 & 0xffffffff;
            if ((int32_t)v18 != 0) {
                // 0x57d8
                v10 = (int32_t *)function_2200(v14, (char *)v15, (int32_t)a3, (int32_t)a4, a5);
                v11 = *v10;
                function_4f70((int64_t *)&v9, v15);
                v12 = v9;
                v13 = function_2340(v14, v12);
                switch (*v10) {
                    case 38: {
                        goto lab_0x58e8;
                    }
                    case 95: {
                        goto lab_0x58e8;
                    }
                    default: {
                        goto lab_0x5816;
                    }
                }
            } else {
                goto lab_0x579f;
            }
        }
    }
  lab_0x57a7:
    // 0x57a7
    if (v2 != __readfsqword(40)) {
        // 0x5a46
        return function_2290();
    }
    // 0x57be
    return v5 & 0xffffffff;
  lab_0x5900:;
    int64_t v19 = acl_from_mode(v9); // 0x590a
    v5 = 0xffffffff;
    int64_t v20; // 0x5733
    int64_t v21; // 0x5733
    int64_t v22; // 0x5733
    if (v19 == 0) {
        goto lab_0x57a7;
    } else {
        int64_t v23 = acl_set_fd(v14, v19); // 0x5921
        v7 = v19;
        v8 = v19;
        v6 = v23 & 0xffffffff;
        if ((int32_t)v23 == 0) {
            goto lab_0x579f;
        } else {
            // 0x5931
            switch (*v16) {
                case 95: {
                    goto lab_0x5998;
                }
                case 38: {
                    goto lab_0x5998;
                }
                default: {
                    // 0x593d
                    v7 = v19;
                    v8 = v19;
                    v6 = 0xffffffff;
                    if (a5 == 0) {
                        goto lab_0x579f;
                    } else {
                        int64_t v24 = *(int64_t *)(a5 + 8); // 0x5946
                        v21 = v19;
                        v22 = (int64_t)"setting permissions for %s";
                        v20 = v24 == 0 ? a3 : v24;
                        goto lab_0x5863;
                    }
                }
            }
        }
    }
  lab_0x579f:
    // 0x579f
    acl_free(v7, v8);
    v5 = v6;
    goto lab_0x57a7;
  lab_0x58e8:;
    int64_t v25 = acl_entries(v15); // 0x58eb
    v7 = v15;
    v8 = v12;
    v6 = v13 & 0xffffffff;
    if ((int32_t)v25 != 3) {
        goto lab_0x5816;
    } else {
        goto lab_0x579f;
    }
  lab_0x5816:
    if (a5 == 0) {
        // 0x5980
        *v10 = v11;
        v7 = v15;
        v8 = v12;
        v6 = 0xffffffff;
        goto lab_0x579f;
    } else {
        int64_t v26 = *(int64_t *)(a5 + 8); // 0x581f
        *v10 = v11;
        v21 = v15;
        v22 = (int64_t)"preserving permissions for %s";
        v20 = v26 == 0 ? a3 : v26;
        goto lab_0x5863;
    }
  lab_0x5998:
    // 0x5998
    acl_free(v19, v19);
    int64_t v27 = function_2340(v14, (int64_t)v9); // 0x59a7
    int64_t v28 = v27 & 0xffffffff; // 0x59ac
    v5 = v28;
    if (a5 != 0 && (int32_t)v27 != 0) {
        // 0x59c0
        function_2270(0, "setting permissions for %s", 5);
        v5 = v28;
    }
    goto lab_0x57a7;
  lab_0x5863:;
    int64_t v29 = function_2270(0, (char *)v22, 5); // 0x5851
    v7 = v21;
    v8 = *(int64_t *)(a5 + 16) == 0 ? v29 : v20;
    v6 = 0xffffffff;
    goto lab_0x579f;
}

// Address range: 0x5a50 - 0x5a51
int64_t perm_copy_file(void) {
    // 0x5a50
    int64_t result; // 0x5a50
    return result;
}

// Address range: 0x5a53 - 0x5f03
int64_t function_5a53(int64_t a1, int64_t a2, int64_t a3) {
    int64_t v1 = __readfsqword(40); // 0x5a6e
    int64_t v2; // bp-216, 0x5a53
    int64_t v3 = function_22d0(a1, &v2); // 0x5a86
    int64_t result = 0xffffffff; // 0x5a8d
    int32_t v4; // bp-192, 0x5a53
    int32_t * v5; // 0x5bc8
    int32_t * v6; // 0x5b20
    int32_t v7; // 0x5b20
    int64_t v8; // 0x5b2b
    int64_t v9; // 0x5b32
    int64_t v10; // 0x5a9b
    int64_t v11; // 0x5a9e
    if ((int32_t)v3 != 0) {
        goto lab_0x5adf;
    } else {
        // 0x5a93
        v10 = v3 & 0xffffffff;
        v11 = acl_get_file(a1, (int64_t *)&g5);
        int64_t v12; // 0x5a53
        int64_t v13; // 0x5a53
        if (v11 == 0) {
            int64_t v14 = function_2200(a1, g5, (int32_t)a3, (int32_t)v13, v12); // 0x5bc0
            v5 = (int32_t *)v14;
            result = 0xffffffff;
            switch (*v5) {
                case 38: {
                    goto lab_0x5c90;
                }
                case 95: {
                    goto lab_0x5c90;
                }
                default: {
                    goto lab_0x5adf;
                }
            }
        } else {
            // 0x5aaf
            if ((int32_t)acl_set_file(a2, (int64_t *)&g5, v11) != 0) {
                int64_t v15 = function_2200(a2, g5, (int32_t)v11, (int32_t)v13, v12); // 0x5b10
                v6 = (int32_t *)v15;
                v7 = *v6;
                function_4f70((int64_t *)&v4, v11);
                v8 = v4;
                v9 = function_2350(a2, v4);
                switch (*v6) {
                    case 38: {
                        goto lab_0x5c50;
                    }
                    case 95: {
                        goto lab_0x5c50;
                    }
                    default: {
                        goto lab_0x5b4d;
                    }
                }
            } else {
                // 0x5ac3
                acl_free(v11, (int64_t)&g5);
                goto lab_0x5acb;
            }
        }
    }
  lab_0x5adf:
    // 0x5adf
    if (v1 != __readfsqword(40)) {
        // 0x5efe
        return function_2290();
    }
    // 0x5af6
    return result;
  lab_0x5c90:;
    int64_t v16 = acl_from_mode(v4); // 0x5c98
    result = 0xffffffff;
    int64_t v17; // 0x5a53
    int64_t v18; // 0x5a53
    int64_t v19; // 0x5a53
    int64_t v20; // 0x5a53
    int64_t v21; // 0x5a53
    int64_t v22; // 0x5a53
    if (v16 == 0) {
        goto lab_0x5adf;
    } else {
        // 0x5ca9
        if ((int32_t)acl_set_file(a2, (int64_t *)&g5, v16) == 0) {
            // 0x5d10
            acl_free(v16, (int64_t)&g5);
            result = v10;
            if ((v4 & 0xf000) != 0x4000) {
                goto lab_0x5adf;
            } else {
                int64_t v23 = acl_delete_def_file(a2); // 0x5d2f
                result = v10;
                v20 = v23;
                if ((int32_t)v23 == 0) {
                    goto lab_0x5adf;
                } else {
                    goto lab_0x5d3e;
                }
            }
        } else {
            // 0x5cbd
            switch (*v5) {
                case 95: {
                    goto lab_0x5eb0;
                }
                case 38: {
                    goto lab_0x5eb0;
                }
                default: {
                    // 0x5cd1
                    v19 = v16;
                    v22 = (int64_t)&g5;
                    if (a3 == 0) {
                        goto lab_0x5c36;
                    } else {
                        int64_t v24 = *(int64_t *)(a3 + 8); // 0x5cda
                        v18 = v16;
                        v21 = (int64_t)"setting permissions for %s";
                        v17 = v24 == 0 ? a2 : v24;
                        goto lab_0x5b98;
                    }
                }
            }
        }
    }
  lab_0x5c50:
    // 0x5c50
    if ((int32_t)acl_entries(v11) != 3) {
        goto lab_0x5b4d;
    } else {
        // 0x5c69
        acl_free(v11, v8);
        result = v9 & 0xffffffff;
        if ((int32_t)v9 == 0) {
            goto lab_0x5acb;
        } else {
            goto lab_0x5adf;
        }
    }
  lab_0x5b4d:
    if (a3 == 0) {
        // 0x5c30
        *v6 = v7;
        v19 = v11;
        v22 = v8;
        goto lab_0x5c36;
    } else {
        int64_t v25 = *(int64_t *)(a3 + 8); // 0x5b56
        *v6 = v7;
        v18 = v11;
        v21 = (int64_t)"preserving permissions for %s";
        v17 = v25 == 0 ? a2 : v25;
        goto lab_0x5b98;
    }
  lab_0x5acb:
    // 0x5acb
    result = v10;
    if ((v4 & 0xf000) == 0x4000) {
        int64_t v26 = acl_get_file(a1, (int64_t *)0x4000); // 0x5db8
        result = 0xffffffff;
        if (v26 != 0) {
            // 0x5dc9
            int64_t v27; // 0x5a53
            if ((int32_t)acl_entries(v26) == 0) {
                // 0x5e50
                v27 = acl_delete_def_file(a2);
            } else {
                // 0x5dd5
                v27 = acl_set_file(a2, (int64_t *)0x4000, v26);
            }
            int64_t v28 = 0x4000; // 0x5deb
            if (a3 != 0 && (int32_t)v27 != 0) {
                int64_t v29 = *(int64_t *)(a3 + 8); // 0x5df2
                int64_t v30 = function_2270(0, "preserving permissions for %s", 5); // 0x5e1c
                v28 = *(int64_t *)(a3 + 16) == 0 ? v30 : v29 == 0 ? a2 : v29;
            }
            // 0x5e3f
            acl_free(v26, v28);
            result = v27 & 0xffffffff;
        }
    }
    goto lab_0x5adf;
  lab_0x5eb0:
    // 0x5eb0
    acl_free(v16, (int64_t)&g5);
    int64_t v31 = function_2350(a2, v4); // 0x5ebe
    result = v10;
    v20 = v31;
    if ((int32_t)v31 != 0) {
        goto lab_0x5d3e;
    } else {
        goto lab_0x5adf;
    }
  lab_0x5c36:
    // 0x5c36
    acl_free(v19, v22);
    result = 0xffffffff;
    goto lab_0x5adf;
  lab_0x5b98:
    // 0x5b98
    v19 = v18;
    v22 = function_2270(0, (char *)v21, 5);
    if (*(int64_t *)(a3 + 16) == 0) {
        goto lab_0x5c36;
    } else {
        // 0x5ba5
        acl_free(v18, v17);
        result = 0xffffffff;
        goto lab_0x5adf;
    }
  lab_0x5d3e:;
    int64_t v32 = v20 & 0xffffffff;
    result = v32;
    if (a3 != 0) {
        // 0x5d66
        function_2270(0, "setting permissions for %s", 5);
        result = v32;
    }
    goto lab_0x5adf;
}

// Address range: 0x5f07 - 0x5f11
int64_t function_5f07(void) {
    // 0x5f07
    int64_t result; // 0x5f07
    return result;
}

// --------------- Dynamically Linked Functions ---------------

// void __cxa_finalize(void * d);
// int * __errno_location(void);
// void __gmon_start__(void);
// void __stack_chk_fail(void);
// int chmod(const char * file, __mode_t mode);
// char * dcgettext(const char * domainname, const char * msgid, int category);
// int fchmod(int fd, __mode_t mode);
// ssize_t fgetxattr(int fd, const char * name, void * value, size_t size);
// void free(void * ptr);
// int fsetxattr(int fd, const char * name, const void * value, size_t size, int flags);
// int fstat(int fd, struct stat * buf);
// struct group * getgrgid(__gid_t gid);
// struct group * getgrnam(const char * name);
// struct passwd * getpwnam(const char * name);
// struct passwd * getpwuid(__uid_t uid);
// ssize_t getxattr(const char * path, const char * name, void * value, size_t size);
// void * malloc(size_t size);
// void * memcpy(void * restrict dest, const void * restrict src, size_t n);
// void qsort(void * base, size_t nmemb, size_t size, __compar_fn_t compar);
// void * realloc(void * ptr, size_t size);
// int removexattr(const char * path, const char * name);
// int setxattr(const char * path, const char * name, const void * value, size_t size, int flags);
// int stat(const char * restrict file, struct stat * restrict buf);
// char * strchr(char * s, int c);
// char * strcpy(char * restrict dest, const char * restrict src);
// size_t strlen(const char * s);
// int strncmp(const char * s1, const char * s2, size_t n);
// char * strncpy(char * restrict dest, const char * restrict src, size_t n);
// long int strtol(const char * restrict nptr, char ** restrict endptr, int base);

// --------------------- Meta-Information ---------------------

// Detected functions: 159
