digraph "Control-flow graph for function 'function_5733(a1, a2, a3, a4, a5)'." {
  label="Control-flow graph for function 'function_5733(a1, a2, a3, a4, a5)'.";
  node [shape=record];

  Node081A8270 [label="{entry:\l  a1\l  a2\l  a3\l  a4\l  a5\l}"];
  Node081A8270 -> Node081A8588;
  Node081A8588 [label="{  v1 = (a2 & 4294967295)\l  v2 = __readfsqword(40)\l  v3\l  v4 = function_2380(v1, &(v3))\l  v5 = 4294967295\l  v6\l  v7\l  v8\l  v9\l  v10\l  v11\l  v12\l  v13\l  v14\l  v15\l  v16\l}"];
  Node081A8588 -> Node081A8078;
  Node081A8078 [label="{  if (TruncCastExpr\<int32\>(v4) != 0):\l  else:\l}"];
  Node081A8078 -> Node081A84B0 [label="TruncCastExpr\<int32\>(v4) != 0"];
  Node081A8078 -> Node081A8C90 [label="TruncCastExpr\<int32\>(v4) == 0"];
  Node081A84B0 [label="{  goto 0x57a7\l}"];
  Node081A84B0 -> Node081A8108;
  Node081A8C90 [label="{0x577a:\l  v14 = (a4 & 4294967295)\l  v15 = acl_get_fd(v1)\l}"];
  Node081A8C90 -> Node081A8C00;
  Node081A8108 [label="{0x57a7:\l  if (v2 != __readfsqword(40)):\l}"];
  Node081A8108 -> Node081A8AE0 [label="v2 != __readfsqword(40)"];
  Node081A8108 -> Node081A8198 [label="v2 == __readfsqword(40)"];
  Node081A8C00 [label="{  if (v15 == 0):\l  else:\l}"];
  Node081A8C00 -> Node081A8E40 [label="v15 == 0"];
  Node081A8C00 -> Node081A8A98 [label="v15 != 0"];
  Node081A8AE0 [label="{0x5a46:\l  return function_2290()\l}"];
  Node081A8AE0 -> Node081A84F8;
  Node081A8198 [label="{0x57be:\l  return (v5 & 4294967295)\l}"];
  Node081A8198 -> Node081A84F8;
  Node081A8E40 [label="{0x5880:\l  v17 = function_2200(v1, BitCastExpr\<ptr\>(&(v3)), TruncCastExpr\<int32\>(a3), TruncCastExpr\<int32\>(a4), a5)\l  v16 = IntToPtrCastExpr\<ptr\>(v17)\l  v5 = 4294967295\l}"];
  Node081A8E40 -> Node081A8C48;
  Node081A8A98 [label="{0x578d:\l  v18 = acl_set_fd(v14, v15)\l  v7 = v15\l  v8 = v15\l  v6 = (v18 & 4294967295)\l}"];
  Node081A8A98 -> Node081A8CD8;
  Node081A84F8 [label="{exit:\l}"];
  Node081A8C48 [label="{  switch *(v16):\l  case 38:\l  case 95:\l  default:\l}"];
  Node081A8C48 -> Node081A8B28 [label="*(v16) == 38"];
  Node081A8C48 -> Node081A8BB8 [label="*(v16) == 95"];
  Node081A8C48 -> Node081A8DB0 [label="(*(v16) != 38) and (*(v16) != 95)"];
  Node081A8CD8 [label="{  if (TruncCastExpr\<int32\>(v18) != 0):\l  else:\l}"];
  Node081A8CD8 -> Node081A9110 [label="TruncCastExpr\<int32\>(v18) != 0"];
  Node081A8CD8 -> Node081A8A50 [label="TruncCastExpr\<int32\>(v18) == 0"];
  Node081A8B28 [label="{  goto 0x5900\l}"];
  Node081A8B28 -> Node081A8D20;
  Node081A8BB8 [label="{  goto 0x5900\l}"];
  Node081A8BB8 -> Node081A8D20;
  Node081A8DB0 [label="{  goto 0x57a7\l}"];
  Node081A8DB0 -> Node081A8108;
  Node081A9110 [label="{0x57d8:\l  v10 = IntToPtrCastExpr\<ptr\>(function_2200(v14, IntToPtrCastExpr\<ptr\>(v15), TruncCastExpr\<int32\>(a3), TruncCastExpr\<int32\>(a4), a5))\l  v11 = *(v10)\l  function_4f70(BitCastExpr\<ptr\>(&(v9)), v15)\l  v12 = v9\l  v13 = function_2340(v14, v12)\l}"];
  Node081A9110 -> Node081A88A0;
  Node081A8A50 [label="{  goto 0x579f\l}"];
  Node081A8A50 -> Node081A8F60;
  Node081A8D20 [label="{0x5900:\l  v19 = acl_from_mode(v9)\l  v5 = 4294967295\l  v20\l  v21\l  v22\l}"];
  Node081A8D20 -> Node081A8858;
  Node081A88A0 [label="{  switch *(v10):\l  case 38:\l  case 95:\l  default:\l}"];
  Node081A88A0 -> Node081A8E88 [label="*(v10) == 38"];
  Node081A88A0 -> Node081A8ED0 [label="*(v10) == 95"];
  Node081A88A0 -> Node081A8F18 [label="(*(v10) != 38) and (*(v10) != 95)"];
  Node081A8F60 [label="{0x579f:\l  acl_free(v7, v8)\l  v5 = v6\l  goto 0x57a7\l}"];
  Node081A8F60 -> Node081A8108;
  Node081A8858 [label="{  if (v19 == 0):\l  else:\l}"];
  Node081A8858 -> Node081A8FF0 [label="v19 == 0"];
  Node081A8858 -> Node081A88E8 [label="v19 != 0"];
  Node081A8E88 [label="{  goto 0x58e8\l}"];
  Node081A8E88 -> Node081A90C8;
  Node081A8ED0 [label="{  goto 0x58e8\l}"];
  Node081A8ED0 -> Node081A90C8;
  Node081A8F18 [label="{  goto 0x5816\l}"];
  Node081A8F18 -> Node081A89C0;
  Node081A8FF0 [label="{  goto 0x57a7\l}"];
  Node081A8FF0 -> Node081A8108;
  Node081A88E8 [label="{0x591b:\l  v23 = acl_set_fd(v14, v19)\l  v7 = v19\l  v8 = v19\l  v6 = (v23 & 4294967295)\l}"];
  Node081A88E8 -> Node081A9038;
  Node081A90C8 [label="{0x58e8:\l  v25 = acl_entries(v15)\l  v7 = v15\l  v8 = v12\l  v6 = (v13 & 4294967295)\l}"];
  Node081A90C8 -> Node081A8930;
  Node081A89C0 [label="{0x5816:\l  if (a5 == 0):\l  else:\l}"];
  Node081A89C0 -> Node081A9500 [label="a5 == 0"];
  Node081A89C0 -> Node081A9668 [label="a5 != 0"];
  Node081A9038 [label="{  if (TruncCastExpr\<int32\>(v23) == 0):\l  else:\l}"];
  Node081A9038 -> Node081A91E8 [label="TruncCastExpr\<int32\>(v23) == 0"];
  Node081A9038 -> Node081A95D8 [label="TruncCastExpr\<int32\>(v23) != 0"];
  Node081A8930 [label="{  if (TruncCastExpr\<int32\>(v25) != 3):\l  else:\l}"];
  Node081A8930 -> Node081A9428 [label="TruncCastExpr\<int32\>(v25) != 3"];
  Node081A8930 -> Node081A9548 [label="TruncCastExpr\<int32\>(v25) == 3"];
  Node081A9500 [label="{0x5980:\l  *(v10) = v11\l  v7 = v15\l  v8 = v12\l  v6 = 4294967295\l  goto 0x579f\l}"];
  Node081A9500 -> Node081A8F60;
  Node081A9668 [label="{0x581f:\l  v26 = *(IntToPtrCastExpr\<ptr\>((a5 + 8)))\l  *(v10) = v11\l  v21 = v15\l  v22 = PtrToIntCastExpr\<int64\>(\"preserving permissions for %s\")\l  v20 = (a3 if (v26 == 0) else v26)\l  goto 0x5863\l}"];
  Node081A9668 -> Node081A9818;
  Node081A91E8 [label="{  goto 0x579f\l}"];
  Node081A91E8 -> Node081A8F60;
  Node081A95D8 [label="{0x5931:\l  switch *(v16):\l  case 95:\l  case 38:\l  default:\l}"];
  Node081A95D8 -> Node081A9740 [label="*(v16) == 95"];
  Node081A95D8 -> Node081A98F0 [label="*(v16) == 38"];
  Node081A95D8 -> Node081A9590 [label="(*(v16) != 95) and (*(v16) != 38)"];
  Node081A9428 [label="{  goto 0x5816\l}"];
  Node081A9428 -> Node081A89C0;
  Node081A9548 [label="{  goto 0x579f\l}"];
  Node081A9548 -> Node081A8F60;
  Node081A9818 [label="{0x5863:\l  v29 = function_2270(0, IntToPtrCastExpr\<ptr\>(v22), 5)\l  v7 = v21\l  v8 = (v29 if (*(IntToPtrCastExpr\<ptr\>((a5 + 16))) == 0) else v20)\l  v6 = 4294967295\l  goto 0x579f\l}"];
  Node081A9818 -> Node081A8F60;
  Node081A9740 [label="{  goto 0x5998\l}"];
  Node081A9740 -> Node081A8A08;
  Node081A98F0 [label="{  goto 0x5998\l}"];
  Node081A98F0 -> Node081A8A08;
  Node081A9590 [label="{0x593d:\l  v7 = v19\l  v8 = v19\l  v6 = 4294967295\l}"];
  Node081A9590 -> Node081A9788;
  Node081A8A08 [label="{0x5998:\l  acl_free(v19, v19)\l  v27 = function_2340(v14, ExtCastExpr\<int64\>(v9))\l  v28 = (v27 & 4294967295)\l  v5 = v28\l}"];
  Node081A8A08 -> Node081A9470;
  Node081A9788 [label="{  if (a5 == 0):\l  else:\l}"];
  Node081A9788 -> Node081A99C8 [label="a5 == 0"];
  Node081A9788 -> Node081A9A10 [label="a5 != 0"];
  Node081A9470 [label="{  if ((a5 != 0) and (TruncCastExpr\<int32\>(v27) != 0)):\l}"];
  Node081A9470 -> Node081A94B8 [label="(a5 != 0) and (TruncCastExpr\<int32\>(v27) != 0)"];
  Node081A9470 -> Node081A9938 [label="(a5 == 0) or (TruncCastExpr\<int32\>(v27) == 0)"];
  Node081A99C8 [label="{  goto 0x579f\l}"];
  Node081A99C8 -> Node081A8F60;
  Node081A9A10 [label="{0x5946:\l  v24 = *(IntToPtrCastExpr\<ptr\>((a5 + 8)))\l  v21 = v19\l  v22 = PtrToIntCastExpr\<int64\>(\"setting permissions for %s\")\l  v20 = (a3 if (v24 == 0) else v24)\l  goto 0x5863\l}"];
  Node081A9A10 -> Node081A9818;
  Node081A94B8 [label="{0x59c0:\l  function_2270(0, \"setting permissions for %s\", 5)\l  v5 = v28\l}"];
  Node081A94B8 -> Node081A9938;
  Node081A9938 [label="{  goto 0x57a7\l}"];
  Node081A9938 -> Node081A8108;

}
