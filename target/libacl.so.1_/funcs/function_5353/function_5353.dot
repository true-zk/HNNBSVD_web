digraph "Control-flow graph for function 'function_5353(a1)'." {
  label="Control-flow graph for function 'function_5353(a1)'.";
  node [shape=record];

  Node081A6848 [label="{entry:\l  a1\l}"];
  Node081A6848 -> Node081A6BF0;
  Node081A6BF0 [label="{  v1 = (a1 & 4294967295)\l  v2\l  v3 = &(v2)\l  v4 = __readfsqword(40)\l  v5 = ((v3 - 129) & -16)\l  v6 = v5\l  v7\l  v8 = function_2320(v1, \"system.posix_acl_access\", v6, 132, v7)\l  v9 = ((4294967296 * v8) / 4294967296)\l  v10 = v8\l  v11 = 132\l  v12 = v5\l  v13 = v9\l  v14\l  v15\l  v16\l  v17\l  v18\l}"];
  Node081A6BF0 -> Node081A6458;
  Node081A6458 [label="{  if (TruncCastExpr\<int32\>(v8) == -1):\l  else:\l}"];
  Node081A6458 -> Node081A6A40 [label="TruncCastExpr\<int32\>(v8) == -1"];
  Node081A6458 -> Node081A6A88 [label="TruncCastExpr\<int32\>(v8) != -1"];
  Node081A6A40 [label="{0x5420:\l  v19 = *(IntToPtrCastExpr\<ptr\>(function_2200(v1, IntToPtrCastExpr\<ptr\>(v9), v6, 132, v7)))\l  v15 = v19\l}"];
  Node081A6A40 -> Node081A6D10;
  Node081A6A88 [label="{  goto 0x53cd\l}"];
  Node081A6A88 -> Node081A6920;
  Node081A6D10 [label="{  if (v19 != 34):\l  else:\l}"];
  Node081A6D10 -> Node081A7388 [label="v19 != 34"];
  Node081A6D10 -> Node081A7100 [label="v19 == 34"];
  Node081A6920 [label="{0x53cd:\l  v28 = v13\l  v14 = v28\l  v16 = v11\l  v17 = v12\l  v18 = v13\l  result = v10\l}"];
  Node081A6920 -> Node081A6608;
  Node081A7388 [label="{  goto 0x53e0\l}"];
  Node081A7388 -> Node081A69B0;
  Node081A7100 [label="{0x542c:\l  v20 = function_2320(v1, \"system.posix_acl_access\", 0, 0, v7)\l  v21 = v20\l}"];
  Node081A7100 -> Node081A6F98;
  Node081A6608 [label="{  if ((v28 \>= 0) == (v28 != 0)):\l  else:\l}"];
  Node081A6608 -> Node081A6AD0 [label="(v28 \>= 0) == (v28 != 0)"];
  Node081A6608 -> Node081A6B18 [label="(v28 \>= 0) != (v28 != 0)"];
  Node081A69B0 [label="{0x53e0:\l  result = 0\l}"];
  Node081A69B0 -> Node081A65C0;
  Node081A6F98 [label="{  if (v21 \< 1):\l  else:\l}"];
  Node081A6F98 -> Node081A6D58 [label="v21 \< 1"];
  Node081A6F98 -> Node081A7610 [label="v21 \>= 1"];
  Node081A6AD0 [label="{  goto 0x53fe\l}"];
  Node081A6AD0 -> Node081A6650;
  Node081A6B18 [label="{  goto 0x53d5\l}"];
  Node081A6B18 -> Node081A7028;
  Node081A65C0 [label="{  if (v15 != 61):\l  else:\l}"];
  Node081A65C0 -> Node081A6B60 [label="v15 != 61"];
  Node081A65C0 -> Node081A7268 [label="v15 == 61"];
  Node081A6D58 [label="{0x542c_2:\l  v14 = v21\l  v16 = 0\l  v17 = 0\l  v18 = (v20 & 4294967295)\l  goto 0x53d5\l}"];
  Node081A6D58 -> Node081A7028;
  Node081A7610 [label="{0x5441:\l  v22 = (v3 - 144)\l  v11 = ((4294967296 * v20) / 4294967296)\l  v23 = (v11 + 23)\l  v24 = (v23 & -4096)\l  v25 = v22\l}"];
  Node081A7610 -> Node081A6DE8;
  Node081A6650 [label="{0x53fe:\l  if (v4 != __readfsqword(40)):\l}"];
  Node081A6650 -> Node081A6E78 [label="v4 != __readfsqword(40)"];
  Node081A6650 -> Node081A69F8 [label="v4 == __readfsqword(40)"];
  Node081A7028 [label="{0x53d5:\l  if (v14 == 0):\l  else:\l}"];
  Node081A7028 -> Node081A7460 [label="v14 == 0"];
  Node081A7028 -> Node081A6E30 [label="v14 != 0"];
  Node081A6B60 [label="{  goto 0x53fe\l}"];
  Node081A6B60 -> Node081A6650;
  Node081A7268 [label="{  goto 0x53e5\l}"];
  Node081A7268 -> Node081A7070;
  Node081A6DE8 [label="{  if (v24 != 0):\l}"];
  Node081A6DE8 -> Node081A7418 [label="v24 != 0"];
  Node081A6DE8 -> Node081A70B8 [label="v24 == 0"];
  Node081A6E78 [label="{0x54d0:\l  return function_2290()\l}"];
  Node081A6E78 -> Node081A6968;
  Node081A69F8 [label="{0x5411:\l  return result\l}"];
  Node081A69F8 -> Node081A6968;
  Node081A7460 [label="{  goto 0x53e5\l}"];
  Node081A7460 -> Node081A7070;
  Node081A6E30 [label="{0x53d9:\l  v29 = function_2200(v1, IntToPtrCastExpr\<ptr\>(v18), TruncCastExpr\<int32\>(v17), TruncCastExpr\<int32\>(v16), v7)\l  v15 = *(IntToPtrCastExpr\<ptr\>(v29))\l  goto 0x53e0\l}"];
  Node081A6E30 -> Node081A69B0;
  Node081A7070 [label="{0x53e5:\l  v30 = function_2380(v1, &(v2))\l  result = 0\l}"];
  Node081A7070 -> Node081A73D0;
  Node081A7418 [label="{  v26 = (v22 - PtrToIntCastExpr\<int64\>(&(g1)))\l  v27 = v26\l  v25 = v26\l}"];
  Node081A7418 -> Node081A7580;
  Node081A70B8 [label="{0x5475:\l  v12 = (((15 - (v23 & (ExtCastExpr\<int64\>(PtrToIntCastExpr\<int32\>(&(g9))) & -16))) + v25) & -16)\l  v10 = function_2320(v1, \"system.posix_acl_access\", TruncCastExpr\<int32\>(v12), TruncCastExpr\<int32\>(v11), v7)\l  v13 = ((4294967296 * v10) / 4294967296)\l  goto 0x53cd\l}"];
  Node081A70B8 -> Node081A6920;
  Node081A6968 [label="{exit:\l}"];
  Node081A73D0 [label="{  if (TruncCastExpr\<int32\>(v30) == 0):\l}"];
  Node081A73D0 -> Node081A7538 [label="TruncCastExpr\<int32\>(v30) == 0"];
  Node081A73D0 -> Node081A71D8 [label="TruncCastExpr\<int32\>(v30) != 0"];
  Node081A7580 [label="{  while (v26 != (v22 - v24)):\l}"];
  Node081A7580 -> Node081A75C8 [label="v26 != (v22 - v24)"];
  Node081A7580 -> Node081A70B8 [label="v26 == (v22 - v24)"];
  Node081A7538 [label="{0x54c0:\l  v31\l  result = acl_from_mode(v31)\l}"];
  Node081A7538 -> Node081A71D8;
  Node081A71D8 [label="{  goto 0x53fe\l}"];
  Node081A71D8 -> Node081A6650;
  Node081A75C8 [label="{0x5460:\l  v26 = (v27 - PtrToIntCastExpr\<int64\>(&(g1)))\l  v27 = v26\l  v25 = v26\l}"];
  Node081A75C8 -> Node081A7580;

}
