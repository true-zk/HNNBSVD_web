digraph "Control-flow graph for function 'function_5a53(a1, a2, a3)'." {
  label="Control-flow graph for function 'function_5a53(a1, a2, a3)'.";
  node [shape=record];

  Node081A9D70 [label="{entry:\l  a1\l  a2\l  a3\l}"];
  Node081A9D70 -> Node081A9AA0;
  Node081A9AA0 [label="{  v1 = __readfsqword(40)\l  v2\l  v3 = function_22d0(a1, &(v2))\l  result = 4294967295\l  v4\l  v5\l  v6\l  v7\l  v8\l  v9\l  v10\l  v11\l}"];
  Node081A9AA0 -> Node081A97D0;
  Node081A97D0 [label="{  if (TruncCastExpr\<int32\>(v3) != 0):\l  else:\l}"];
  Node081A97D0 -> Node081A9980 [label="TruncCastExpr\<int32\>(v3) != 0"];
  Node081A97D0 -> Node081A92C0 [label="TruncCastExpr\<int32\>(v3) == 0"];
  Node081A9980 [label="{  goto 0x5adf\l}"];
  Node081A9980 -> Node081A9158;
  Node081A92C0 [label="{0x5a93:\l  v10 = (v3 & 4294967295)\l  v11 = acl_get_file(a1, BitCastExpr\<ptr\>(&(g5)))\l  v12\l  v13\l}"];
  Node081A92C0 -> Node081A91A0;
  Node081A9158 [label="{0x5adf:\l  if (v1 != __readfsqword(40)):\l}"];
  Node081A9158 -> Node081A9308 [label="v1 != __readfsqword(40)"];
  Node081A9158 -> Node081A9278 [label="v1 == __readfsqword(40)"];
  Node081A91A0 [label="{  if (v11 == 0):\l  else:\l}"];
  Node081A91A0 -> Node081A93E0 [label="v11 == 0"];
  Node081A91A0 -> Node081A96B0 [label="v11 != 0"];
  Node081A9308 [label="{0x5efe:\l  return function_2290()\l}"];
  Node081A9308 -> Node081A9E48;
  Node081A9278 [label="{0x5af6:\l  return result\l}"];
  Node081A9278 -> Node081A9E48;
  Node081A93E0 [label="{0x5bc0:\l  v14 = function_2200(a1, g5, TruncCastExpr\<int32\>(a3), TruncCastExpr\<int32\>(v13), v12)\l  v5 = IntToPtrCastExpr\<ptr\>(v14)\l  result = 4294967295\l}"];
  Node081A93E0 -> Node081A9620;
  Node081A96B0 [label="{0x5aaf:\l  if (TruncCastExpr\<int32\>(acl_set_file(a2, BitCastExpr\<ptr\>(&(g5)), v11)) != 0):\l  else:\l}"];
  Node081A96B0 -> Node081AA118 [label="TruncCastExpr\<int32\>(acl_set_file(a2, BitCastExpr\<ptr\>(&(g5)), v11)) != 0"];
  Node081A96B0 -> Node081AA0D0 [label="TruncCastExpr\<int32\>(acl_set_file(a2, BitCastExpr\<ptr\>(&(g5)), v11)) == 0"];
  Node081A9E48 [label="{exit:\l}"];
  Node081A9620 [label="{  switch *(v5):\l  case 38:\l  case 95:\l  default:\l}"];
  Node081A9620 -> Node081A9B30 [label="*(v5) == 38"];
  Node081A9620 -> Node081A9FF8 [label="*(v5) == 95"];
  Node081A9620 -> Node081AA088 [label="(*(v5) != 38) and (*(v5) != 95)"];
  Node081AA118 [label="{0x5b10:\l  v15 = function_2200(a2, g5, TruncCastExpr\<int32\>(v11), TruncCastExpr\<int32\>(v13), v12)\l  v6 = IntToPtrCastExpr\<ptr\>(v15)\l  v7 = *(v6)\l  function_4f70(BitCastExpr\<ptr\>(&(v4)), v11)\l  v8 = v4\l  v9 = function_2350(a2, v4)\l}"];
  Node081AA118 -> Node081A9C98;
  Node081AA0D0 [label="{0x5ac3:\l  acl_free(v11, PtrToIntCastExpr\<int64\>(&(g5)))\l  goto 0x5acb\l}"];
  Node081AA0D0 -> Node081A9DB8;
  Node081A9B30 [label="{  goto 0x5c90\l}"];
  Node081A9B30 -> Node081A9E90;
  Node081A9FF8 [label="{  goto 0x5c90\l}"];
  Node081A9FF8 -> Node081A9E90;
  Node081AA088 [label="{  goto 0x5adf\l}"];
  Node081AA088 -> Node081A9158;
  Node081A9C98 [label="{  switch *(v6):\l  case 38:\l  case 95:\l  default:\l}"];
  Node081A9C98 -> Node081A9C50 [label="*(v6) == 38"];
  Node081A9C98 -> Node081A9F68 [label="*(v6) == 95"];
  Node081A9C98 -> Node081A9D28 [label="(*(v6) != 38) and (*(v6) != 95)"];
  Node081A9DB8 [label="{0x5acb:\l  result = v10\l}"];
  Node081A9DB8 -> Node081A9FB0;
  Node081A9E90 [label="{0x5c90:\l  v16 = acl_from_mode(v4)\l  result = 4294967295\l  v17\l  v18\l  v19\l  v20\l  v21\l  v22\l}"];
  Node081A9E90 -> Node081A9E00;
  Node081A9C50 [label="{  goto 0x5c50\l}"];
  Node081A9C50 -> Node081AA040;
  Node081A9F68 [label="{  goto 0x5c50\l}"];
  Node081A9F68 -> Node081AA040;
  Node081A9D28 [label="{  goto 0x5b4d\l}"];
  Node081A9D28 -> Node081AA238;
  Node081A9FB0 [label="{  if ((v4 & 61440) == 16384):\l}"];
  Node081A9FB0 -> Node081AAB80 [label="(v4 & 61440) == 16384"];
  Node081A9FB0 -> Node081A9ED8 [label="(v4 & 61440) != 16384"];
  Node081A9E00 [label="{  if (v16 == 0):\l  else:\l}"];
  Node081A9E00 -> Node081AA1F0 [label="v16 == 0"];
  Node081A9E00 -> Node081AA280 [label="v16 != 0"];
  Node081AA040 [label="{0x5c50:\l  if (TruncCastExpr\<int32\>(acl_entries(v11)) != 3):\l  else:\l}"];
  Node081AA040 -> Node081AA310 [label="TruncCastExpr\<int32\>(acl_entries(v11)) != 3"];
  Node081AA040 -> Node081A9A58 [label="TruncCastExpr\<int32\>(acl_entries(v11)) == 3"];
  Node081AA238 [label="{0x5b4d:\l  if (a3 == 0):\l  else:\l}"];
  Node081AA238 -> Node081A9BC0 [label="a3 == 0"];
  Node081AA238 -> Node081A9C08 [label="a3 != 0"];
  Node081AAB80 [label="{  v26 = acl_get_file(a1, IntToPtrCastExpr\<ptr\>(16384))\l  result = 4294967295\l}"];
  Node081AAB80 -> Node081AA988;
  Node081A9ED8 [label="{  goto 0x5adf\l}"];
  Node081A9ED8 -> Node081A9158;
  Node081AA1F0 [label="{  goto 0x5adf\l}"];
  Node081AA1F0 -> Node081A9158;
  Node081AA280 [label="{0x5ca9:\l  if (TruncCastExpr\<int32\>(acl_set_file(a2, BitCastExpr\<ptr\>(&(g5)), v16)) == 0):\l  else:\l}"];
  Node081AA280 -> Node081AA358 [label="TruncCastExpr\<int32\>(acl_set_file(a2, BitCastExpr\<ptr\>(&(g5)), v16)) == 0"];
  Node081AA280 -> Node081AA3E8 [label="TruncCastExpr\<int32\>(acl_set_file(a2, BitCastExpr\<ptr\>(&(g5)), v16)) != 0"];
  Node081AA310 [label="{  goto 0x5b4d\l}"];
  Node081AA310 -> Node081AA238;
  Node081A9A58 [label="{0x5c69:\l  acl_free(v11, v8)\l  result = (v9 & 4294967295)\l}"];
  Node081A9A58 -> Node081A9AE8;
  Node081A9BC0 [label="{0x5c30:\l  *(v6) = v7\l  v19 = v11\l  v22 = v8\l  goto 0x5c36\l}"];
  Node081A9BC0 -> Node081AA9D0;
  Node081A9C08 [label="{0x5b56:\l  v25 = *(IntToPtrCastExpr\<ptr\>((a3 + 8)))\l  *(v6) = v7\l  v18 = v11\l  v21 = PtrToIntCastExpr\<int64\>(\"preserving permissions for %s\")\l  v17 = (a2 if (v25 == 0) else v25)\l  goto 0x5b98\l}"];
  Node081A9C08 -> Node081AA508;
  Node081AA988 [label="{  if (v26 != 0):\l}"];
  Node081AA988 -> Node081AA868 [label="v26 != 0"];
  Node081AA988 -> Node081A9ED8 [label="v26 == 0"];
  Node081AA358 [label="{0x5d10:\l  acl_free(v16, PtrToIntCastExpr\<int64\>(&(g5)))\l  result = v10\l}"];
  Node081AA358 -> Node081AABC8;
  Node081AA3E8 [label="{0x5cbd:\l  switch *(v5):\l  case 95:\l  case 38:\l  default:\l}"];
  Node081AA3E8 -> Node081AA478 [label="*(v5) == 95"];
  Node081AA3E8 -> Node081AA598 [label="*(v5) == 38"];
  Node081AA3E8 -> Node081AA6B8 [label="(*(v5) != 95) and (*(v5) != 38)"];
  Node081A9AE8 [label="{  if (TruncCastExpr\<int32\>(v9) == 0):\l  else:\l}"];
  Node081A9AE8 -> Node081AAA18 [label="TruncCastExpr\<int32\>(v9) == 0"];
  Node081A9AE8 -> Node081AAAF0 [label="TruncCastExpr\<int32\>(v9) != 0"];
  Node081AA9D0 [label="{0x5c36:\l  acl_free(v19, v22)\l  result = 4294967295\l  goto 0x5adf\l}"];
  Node081AA9D0 -> Node081A9158;
  Node081AA508 [label="{0x5b98:\l  v19 = v18\l  v22 = function_2270(0, IntToPtrCastExpr\<ptr\>(v21), 5)\l}"];
  Node081AA508 -> Node081AA7D8;
  Node081AA868 [label="{0x5dc9:\l  v27\l}"];
  Node081AA868 -> Node081AA8F8;
  Node081AABC8 [label="{  if ((v4 & 61440) != 16384):\l  else:\l}"];
  Node081AABC8 -> Node081AA4C0 [label="(v4 & 61440) != 16384"];
  Node081AABC8 -> Node081AA3A0 [label="(v4 & 61440) == 16384"];
  Node081AA478 [label="{  goto 0x5eb0\l}"];
  Node081AA478 -> Node081AAE50;
  Node081AA598 [label="{  goto 0x5eb0\l}"];
  Node081AA598 -> Node081AAE50;
  Node081AA6B8 [label="{0x5cd1:\l  v19 = v16\l  v22 = PtrToIntCastExpr\<int64\>(&(g5))\l}"];
  Node081AA6B8 -> Node081AA700;
  Node081AAA18 [label="{  goto 0x5acb\l}"];
  Node081AAA18 -> Node081A9DB8;
  Node081AAAF0 [label="{  goto 0x5adf\l}"];
  Node081AAAF0 -> Node081A9158;
  Node081AA7D8 [label="{  if (*(IntToPtrCastExpr\<ptr\>((a3 + 16))) == 0):\l  else:\l}"];
  Node081AA7D8 -> Node081AB1B0 [label="*(IntToPtrCastExpr\<ptr\>((a3 + 16))) == 0"];
  Node081AA7D8 -> Node081AAF28 [label="*(IntToPtrCastExpr\<ptr\>((a3 + 16))) != 0"];
  Node081AA8F8 [label="{  if (TruncCastExpr\<int32\>(acl_entries(v26)) == 0):\l  else:\l}"];
  Node081AA8F8 -> Node081AB318 [label="TruncCastExpr\<int32\>(acl_entries(v26)) == 0"];
  Node081AA8F8 -> Node081AB360 [label="TruncCastExpr\<int32\>(acl_entries(v26)) != 0"];
  Node081AA4C0 [label="{  goto 0x5adf\l}"];
  Node081AA4C0 -> Node081A9158;
  Node081AA3A0 [label="{0x5d2c:\l  v23 = acl_delete_def_file(a2)\l  result = v10\l  v20 = v23\l}"];
  Node081AA3A0 -> Node081AA430;
  Node081AAE50 [label="{0x5eb0:\l  acl_free(v16, PtrToIntCastExpr\<int64\>(&(g5)))\l  v31 = function_2350(a2, v4)\l  result = v10\l  v20 = v31\l}"];
  Node081AAE50 -> Node081AACA0;
  Node081AA700 [label="{  if (a3 == 0):\l  else:\l}"];
  Node081AA700 -> Node081AAD30 [label="a3 == 0"];
  Node081AA700 -> Node081AAD78 [label="a3 != 0"];
  Node081AB1B0 [label="{  goto 0x5c36\l}"];
  Node081AB1B0 -> Node081AA9D0;
  Node081AAF28 [label="{0x5ba5:\l  acl_free(v18, v17)\l  result = 4294967295\l  goto 0x5adf\l}"];
  Node081AAF28 -> Node081A9158;
  Node081AB318 [label="{0x5e50:\l  v27 = acl_delete_def_file(a2)\l}"];
  Node081AB318 -> Node081AA790;
  Node081AB360 [label="{0x5dd5:\l  v27 = acl_set_file(a2, IntToPtrCastExpr\<ptr\>(16384), v26)\l}"];
  Node081AB360 -> Node081AA790;
  Node081AA430 [label="{  if (TruncCastExpr\<int32\>(v23) == 0):\l  else:\l}"];
  Node081AA430 -> Node081AB090 [label="TruncCastExpr\<int32\>(v23) == 0"];
  Node081AA430 -> Node081AB0D8 [label="TruncCastExpr\<int32\>(v23) != 0"];
  Node081AACA0 [label="{  if (TruncCastExpr\<int32\>(v31) != 0):\l  else:\l}"];
  Node081AACA0 -> Node081AB3F0 [label="TruncCastExpr\<int32\>(v31) != 0"];
  Node081AACA0 -> Node081AB480 [label="TruncCastExpr\<int32\>(v31) == 0"];
  Node081AAD30 [label="{  goto 0x5c36\l}"];
  Node081AAD30 -> Node081AA9D0;
  Node081AAD78 [label="{0x5cda:\l  v24 = *(IntToPtrCastExpr\<ptr\>((a3 + 8)))\l  v18 = v16\l  v21 = PtrToIntCastExpr\<int64\>(\"setting permissions for %s\")\l  v17 = (a2 if (v24 == 0) else v24)\l  goto 0x5b98\l}"];
  Node081AAD78 -> Node081AA508;
  Node081AA790 [label="{  v28 = 16384\l}"];
  Node081AA790 -> Node081AA8B0;
  Node081AB090 [label="{  goto 0x5adf\l}"];
  Node081AB090 -> Node081A9158;
  Node081AB0D8 [label="{  goto 0x5d3e\l}"];
  Node081AB0D8 -> Node081AAC10;
  Node081AB3F0 [label="{  goto 0x5d3e\l}"];
  Node081AB3F0 -> Node081AAC10;
  Node081AB480 [label="{  goto 0x5adf\l}"];
  Node081AB480 -> Node081A9158;
  Node081AA8B0 [label="{  if ((a3 != 0) and (TruncCastExpr\<int32\>(v27) != 0)):\l}"];
  Node081AA8B0 -> Node081AB288 [label="(a3 != 0) and (TruncCastExpr\<int32\>(v27) != 0)"];
  Node081AA8B0 -> Node081AA940 [label="(a3 == 0) or (TruncCastExpr\<int32\>(v27) == 0)"];
  Node081AAC10 [label="{0x5d3e:\l  v32 = (v20 & 4294967295)\l  result = v32\l}"];
  Node081AAC10 -> Node081AAB38;
  Node081AB288 [label="{  v29 = *(IntToPtrCastExpr\<ptr\>((a3 + 8)))\l  v30 = function_2270(0, \"preserving permissions for %s\", 5)\l  v28 = (v30 if (*(IntToPtrCastExpr\<ptr\>((a3 + 16))) == 0) else (a2 if (v29 == 0) else v29))\l}"];
  Node081AB288 -> Node081AA940;
  Node081AA940 [label="{0x5e3f:\l  acl_free(v26, v28)\l  result = (v27 & 4294967295)\l}"];
  Node081AA940 -> Node081A9ED8;
  Node081AAB38 [label="{  if (a3 != 0):\l}"];
  Node081AAB38 -> Node081AB1F8 [label="a3 != 0"];
  Node081AAB38 -> Node081AA670 [label="a3 == 0"];
  Node081AB1F8 [label="{0x5d66:\l  function_2270(0, \"setting permissions for %s\", 5)\l  result = v32\l}"];
  Node081AB1F8 -> Node081AA670;
  Node081AA670 [label="{  goto 0x5adf\l}"];
  Node081AA670 -> Node081A9158;

}
