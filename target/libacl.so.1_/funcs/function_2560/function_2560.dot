digraph "Control-flow graph for function 'function_2560(result)'." {
  label="Control-flow graph for function 'function_2560(result)'.";
  node [shape=record];

  Node07C807C8 [label="{entry:\l  result\l}"];
  Node07C807C8 -> Node07C80228;
  Node07C80228 [label="{  v1 = result\l  v2 = v1\l}"];
  Node07C80228 -> Node07C808E8;
  Node07C808E8 [label="{  if ((result == 0) or (v1 == 0)):\l}"];
  Node07C808E8 -> Node07C80ED0 [label="(result == 0) or (v1 == 0)"];
  Node07C808E8 -> Node07C80A08 [label="(result != 0) and (v1 != 0)"];
  Node07C80ED0 [label="{0x2601:\l  return result\l}"];
  Node07C80ED0 -> Node07C806A8;
  Node07C80A08 [label="{  v3 = result\l  v4 = v3\l  v5 = v3\l}"];
  Node07C80A08 -> Node07C80270;
  Node07C806A8 [label="{exit:\l}"];
  Node07C80270 [label="{  while (v2 != 92):\l}"];
  Node07C80270 -> Node07C80E88 [label="v2 != 92"];
  Node07C80270 -> Node07C802B8 [label="v2 == 92"];
  Node07C80E88 [label="{0x2580:\l  v3 = (v3 + 1)\l  v2 = *(IntToPtrCastExpr\<ptr\>(v3))\l}"];
  Node07C80E88 -> Node07C80D20;
  Node07C802B8 [label="{  v6\l  v7\l  v8\l  v9\l  v10\l}"];
  Node07C802B8 -> Node07C80780;
  Node07C80D20 [label="{  if (v2 == 0):\l}"];
  Node07C80D20 -> Node07C80C48 [label="v2 == 0"];
  Node07C80D20 -> Node07C80DB0 [label="v2 != 0"];
  Node07C80780 [label="{  while True:\l}"];
  Node07C80780 -> Node07C80B70 [label="True"];
  Node07C80C48 [label="{0x2601:\l  return result\l}"];
  Node07C80C48 -> Node07C806A8;
  Node07C80DB0 [label="{  v4 = v3\l  v5 = v3\l}"];
  Node07C80DB0 -> Node07C80270;
  Node07C80B70 [label="{0x25ad_2:\l  v9 = v5\l  v11 = v4\l  v12 = IntToPtrCastExpr\<ptr\>(v11)\l  v10 = *(v12)\l  v6 = v12\l  v8 = v11\l}"];
  Node07C80B70 -> Node07C80DF8;
  Node07C80DF8 [label="{  if (v10 != 92):\l  else:\l}"];
  Node07C80DF8 -> Node07C80BB8 [label="v10 != 92"];
  Node07C80DF8 -> Node07C80E40 [label="v10 == 92"];
  Node07C80BB8 [label="{  goto 0x25a0\l}"];
  Node07C80BB8 -> Node07C80C00;
  Node07C80E40 [label="{0x25be:\l  v13 = *(IntToPtrCastExpr\<ptr\>((v11 + 1)))\l  v14 = (ExtCastExpr\<int64\>(v13) + 4294967248)\l}"];
  Node07C80E40 -> Node07C80B28;
  Node07C80C00 [label="{0x25a0:\l  *(IntToPtrCastExpr\<ptr\>(v9)) = v10\l  v7 = (v8 + 1)\l}"];
  Node07C80C00 -> Node07C80C90;
  Node07C80B28 [label="{  if (TruncCastExpr\<int8\>(v14) \< 8):\l  else:\l}"];
  Node07C80B28 -> Node07C80F18 [label="TruncCastExpr\<int8\>(v14) \< 8"];
  Node07C80B28 -> Node07C80FA8 [label="TruncCastExpr\<int8\>(v14) \>= 8"];
  Node07C80C90 [label="{  if (*(v6) == 0):\l}"];
  Node07C80C90 -> Node07C61178 [label="*(v6) == 0"];
  Node07C80C90 -> Node07C80D68 [label="*(v6) != 0"];
  Node07C80F18 [label="{0x25cb:\l  v15 = (ExtCastExpr\<int64\>(*(IntToPtrCastExpr\<ptr\>((v11 + 2)))) + 4294967248)\l  v6 = v12\l  v8 = v11\l}"];
  Node07C80F18 -> Node07C80F60;
  Node07C80FA8 [label="{0x2608:\l  v18 = (v11 + ExtCastExpr\<int64\>((v13 == 92)))\l  v6 = IntToPtrCastExpr\<ptr\>(v18)\l  v8 = v18\l  goto 0x25a0\l}"];
  Node07C80FA8 -> Node07C80C00;
  Node07C61178 [label="{  return result\l}"];
  Node07C61178 -> Node07C806A8;
  Node07C80D68 [label="{  goto 0x25ad\l}"];
  Node07C80D68 -> Node07C60BD8;
  Node07C80F60 [label="{  if (TruncCastExpr\<int8\>(v15) \< 8):\l  else:\l}"];
  Node07C80F60 -> Node07C611C0 [label="TruncCastExpr\<int8\>(v15) \< 8"];
  Node07C80F60 -> Node07C61B08 [label="TruncCastExpr\<int8\>(v15) \>= 8"];
  Node07C60BD8 [label="{0x25ad:\l  v4 = v7\l  v5 = (v9 + 1)\l  goto 0x25ad_2\l}"];
  Node07C60BD8 -> Node07C80B70;
  Node07C611C0 [label="{0x25d7:\l  v16 = IntToPtrCastExpr\<ptr\>((v11 + 3))\l  v17 = (ExtCastExpr\<int64\>(*(v16)) + 4294967248)\l  v6 = v12\l  v8 = v11\l}"];
  Node07C611C0 -> Node07C61AC0;
  Node07C61B08 [label="{  goto 0x25a0\l}"];
  Node07C61B08 -> Node07C80C00;
  Node07C61AC0 [label="{  if (TruncCastExpr\<int8\>(v17) \< 8):\l  else:\l}"];
  Node07C61AC0 -> Node07C61880 [label="TruncCastExpr\<int8\>(v17) \< 8"];
  Node07C61AC0 -> Node07C65CD8 [label="TruncCastExpr\<int8\>(v17) \>= 8"];
  Node07C61880 [label="{0x25e6:\l  *(IntToPtrCastExpr\<ptr\>(v9)) = TruncCastExpr\<int8\>((((8 * v15) + (64 * v14)) + v17))\l  v7 = (v11 + 4)\l}"];
  Node07C61880 -> Node07C61688;
  Node07C65CD8 [label="{  goto 0x25a0\l}"];
  Node07C65CD8 -> Node07C80C00;
  Node07C61688 [label="{  if (*(v16) == 0):\l}"];
  Node07C61688 -> Node07C65FA8 [label="*(v16) == 0"];
  Node07C61688 -> Node07C65C48 [label="*(v16) != 0"];
  Node07C65FA8 [label="{break -\> 0x2601:\l  break\l}"];
  Node07C65FA8 -> Node07C80300;
  Node07C65C48 [label="{  goto 0x25ad\l}"];
  Node07C65C48 -> Node07C60BD8;
  Node07C80300 [label="{0x2601:\l  return result\l}"];
  Node07C80300 -> Node07C806A8;

}
