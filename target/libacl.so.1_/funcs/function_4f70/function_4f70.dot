digraph "Control-flow graph for function 'function_4f70(*a1, a2)'." {
  label="Control-flow graph for function 'function_4f70(*a1, a2)'.";
  node [shape=record];

  Node081A4328 [label="{entry:\l  a1\l  a2\l}"];
  Node081A4328 -> Node081A4EB0;
  Node081A4EB0 [label="{  v1 = __readfsqword(40)\l  v2\l  v3\l}"];
  Node081A4EB0 -> Node081A4C70;
  Node081A4C70 [label="{  if (TruncCastExpr\<int32\>(acl_entries(a2)) != 3):\l}"];
  Node081A4C70 -> Node081A49E8 [label="TruncCastExpr\<int32\>(acl_entries(a2)) != 3"];
  Node081A4C70 -> Node081A50A8 [label="TruncCastExpr\<int32\>(acl_entries(a2)) == 3"];
  Node081A49E8 [label="{0x4fc4:\l  v4\l  v3 = v4\l  v5\l  v6 = acl_get_entry(a2, 0, &(v5))\l}"];
  Node081A49E8 -> Node081A5210;
  Node081A50A8 [label="{  goto 0x4fdc\l}"];
  Node081A50A8 -> Node081A4C28;
  Node081A5210 [label="{  while (TruncCastExpr\<int32\>(v6) == 1):\l}"];
  Node081A5210 -> Node081A4D48 [label="TruncCastExpr\<int32\>(v6) == 1"];
  Node081A5210 -> Node081A5180 [label="TruncCastExpr\<int32\>(v6) != 1"];
  Node081A4C28 [label="{0x4fdc:\l  result = (v1 - __readfsqword(40))\l}"];
  Node081A4C28 -> Node081A4BE0;
  Node081A4D48 [label="{0x4fb0:\l  v7\l  acl_get_tag_type(v5, BitCastExpr\<ptr\>(&(v7)))\l}"];
  Node081A4D48 -> Node081A4B98;
  Node081A5180 [label="{0x4fd8:\l  *(BitCastExpr\<ptr\>(a1)) = (v3 & -57)\l}"];
  Node081A5180 -> Node081A48C8;
  Node081A4BE0 [label="{  if (result != 0):\l}"];
  Node081A4BE0 -> Node081A4D90 [label="result != 0"];
  Node081A4BE0 -> Node081A4B50 [label="result == 0"];
  Node081A4B98 [label="{  if (v7 == 16):\l}"];
  Node081A4B98 -> Node081A4F40 [label="v7 == 16"];
  Node081A4B98 -> Node081A4E20 [label="v7 != 16"];
  Node081A48C8 [label="{exit:\l}"];
  Node081A4D90 [label="{0x5059:\l  return function_2290()\l}"];
  Node081A4D90 -> Node081A48C8;
  Node081A4B50 [label="{0x4fec:\l  return result\l}"];
  Node081A4B50 -> Node081A48C8;
  Node081A4F40 [label="{0x5000:\l  acl_get_permset(v5, &(v2))\l}"];
  Node081A4F40 -> Node081A4D00;
  Node081A4E20 [label="{  v6 = acl_get_entry(a2, (v6 & 4294967295), &(v5))\l}"];
  Node081A4E20 -> Node081A48C8;
  Node081A4D00 [label="{  if (TruncCastExpr\<int32\>(acl_get_perm(v2, 4)) == 1):\l  else:\l}"];
  Node081A4D00 -> Node081A4E68 [label="TruncCastExpr\<int32\>(acl_get_perm(v2, 4)) == 1"];
  Node081A4D00 -> Node081A4EF8 [label="TruncCastExpr\<int32\>(acl_get_perm(v2, 4)) != 1"];
  Node081A4E68 [label="{  goto 0x5027\l}"];
  Node081A4E68 -> Node081A49A0;
  Node081A4EF8 [label="{0x5023:\l  *(BitCastExpr\<ptr\>(a1)) = (v3 & -33)\l  goto 0x5027\l}"];
  Node081A4EF8 -> Node081A49A0;
  Node081A49A0 [label="{0x5027:\l  if (TruncCastExpr\<int32\>(acl_get_perm(v2, 2)) == 1):\l  else:\l}"];
  Node081A49A0 -> Node081A4B08 [label="TruncCastExpr\<int32\>(acl_get_perm(v2, 2)) == 1"];
  Node081A49A0 -> Node081A4CB8 [label="TruncCastExpr\<int32\>(acl_get_perm(v2, 2)) != 1"];
  Node081A4B08 [label="{  goto 0x503f\l}"];
  Node081A4B08 -> Node081A4958;
  Node081A4CB8 [label="{0x503b:\l  *(BitCastExpr\<ptr\>(a1)) = (v3 & -17)\l  goto 0x503f\l}"];
  Node081A4CB8 -> Node081A4958;
  Node081A4958 [label="{0x503f:\l  if (TruncCastExpr\<int32\>(acl_get_perm(v2, 1)) == 1):\l  else:\l}"];
  Node081A4958 -> Node081A4F88 [label="TruncCastExpr\<int32\>(acl_get_perm(v2, 1)) == 1"];
  Node081A4958 -> Node081A51C8 [label="TruncCastExpr\<int32\>(acl_get_perm(v2, 1)) != 1"];
  Node081A4F88 [label="{  goto 0x4fdc\l}"];
  Node081A4F88 -> Node081A4C28;
  Node081A51C8 [label="{0x5053:\l  *(BitCastExpr\<ptr\>(a1)) = (v3 & -9)\l  goto 0x4fdc\l}"];
  Node081A51C8 -> Node081A4C28;

}
