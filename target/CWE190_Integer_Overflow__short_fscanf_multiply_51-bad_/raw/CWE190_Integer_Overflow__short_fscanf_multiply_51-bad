//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
// Copyright (c) Retargetable Decompiler <info@retdec.com>
//

#include <ctype.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <wchar.h>
#include <wctype.h>

// ---------------- Integer Types Definitions -----------------

typedef int64_t int128_t;

// ----------------- Float Types Definitions ------------------

typedef double float64_t;

// ------------------------ Structures ------------------------

struct _IO_FILE {
    int32_t e0;
};

// ------------------- Function Prototypes --------------------

int64_t __do_global_dtors_aux(void);
int64_t __libc_csu_fini(void);
int64_t __libc_csu_init(int64_t a1, int64_t a2, int64_t a3);
int64_t _fini(void);
int64_t _init(void);
int64_t _start(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t bad1(void);
int64_t bad2(void);
int64_t bad3(void);
int64_t bad4(void);
int64_t bad5(void);
int64_t bad6(void);
int64_t bad7(void);
int64_t bad8(void);
int64_t bad9(void);
int64_t CWE190_Integer_Overflow__short_fscanf_multiply_51_bad(void);
int64_t CWE190_Integer_Overflow__short_fscanf_multiply_51b_badSink(int64_t a1);
int64_t decodeHexChars(int64_t a1, uint64_t a2, int64_t a3);
int64_t decodeHexWChars(int64_t a1, uint64_t a2, int64_t a3);
int64_t deregister_tm_clones(void);
int64_t frame_dummy(void);
int32_t function_840(struct _IO_FILE * stream, char * format, ...);
int32_t function_850(char * s);
int32_t function_860(int32_t wc);
void function_870(void);
int32_t function_880(char * format, ...);
void function_890(int32_t seed);
int32_t function_8a0(int32_t * s, int32_t * format, ...);
int32_t function_8b0(int32_t * timer);
int32_t function_8c0(int32_t * format, ...);
int32_t function_8d0(char * s, char * format, ...);
int32_t function_8e0(void);
int16_t ** function_8f0(void);
void function_900(int64_t * d);
int64_t globalReturnsFalse(void);
int64_t globalReturnsTrue(void);
int64_t globalReturnsTrueOrFalse(void);
int64_t good1(void);
int64_t good2(void);
int64_t good3(void);
int64_t good4(void);
int64_t good5(void);
int64_t good6(void);
int64_t good7(void);
int64_t good8(void);
int64_t good9(void);
int64_t printBytesLine(int64_t a1, int64_t a2);
int64_t printDoubleLine(void);
int64_t printFloatLine(void);
int64_t printHexCharLine(int64_t a1);
int64_t printHexUnsignedCharLine(int64_t a1);
int64_t printIntLine(int64_t a1);
int64_t printLine(char * str);
int64_t printLongLine(int64_t a1);
int64_t printLongLongLine(int64_t a1);
int64_t printShortLine(int64_t a1);
int64_t printSizeTLine(int64_t a1);
int64_t printStructLine(int64_t a1);
int64_t printUnsignedLine(int64_t a1);
int64_t printWcharLine(int64_t a1);
int64_t printWLine(int64_t a1);
int64_t register_tm_clones(void);

// --------------------- Global Variables ---------------------

char * g1; // 0x1125
int64_t g2 = 2576; // 0x201d60
int64_t g3 = 2512; // 0x201d68
struct _IO_FILE * g4 = NULL; // 0x202020
char g5 = 0; // 0x202028
int32_t g6;

// ------------------------ Functions -------------------------

// Address range: 0x810 - 0x827
int64_t _init(void) {
    int64_t result = 0; // 0x81e
    if (*(int64_t *)0x201fe8 != 0) {
        // 0x820
        __gmon_start__();
        result = &g6;
    }
    // 0x822
    return result;
}

// Address range: 0x840 - 0x846
int32_t function_840(struct _IO_FILE * stream, char * format, ...) {
    // 0x840
    return fscanf(stream, format);
}

// Address range: 0x850 - 0x856
int32_t function_850(char * s) {
    // 0x850
    return puts(s);
}

// Address range: 0x860 - 0x866
int32_t function_860(int32_t wc) {
    // 0x860
    return iswxdigit(wc);
}

// Address range: 0x870 - 0x876
void function_870(void) {
    // 0x870
    __stack_chk_fail();
}

// Address range: 0x880 - 0x886
int32_t function_880(char * format, ...) {
    // 0x880
    return printf(format);
}

// Address range: 0x890 - 0x896
void function_890(int32_t seed) {
    // 0x890
    srand(seed);
}

// Address range: 0x8a0 - 0x8a6
int32_t function_8a0(int32_t * s, int32_t * format, ...) {
    // 0x8a0
    return swscanf(s, format);
}

// Address range: 0x8b0 - 0x8b6
int32_t function_8b0(int32_t * timer) {
    // 0x8b0
    return time(timer);
}

// Address range: 0x8c0 - 0x8c6
int32_t function_8c0(int32_t * format, ...) {
    // 0x8c0
    return wprintf(format);
}

// Address range: 0x8d0 - 0x8d6
int32_t function_8d0(char * s, char * format, ...) {
    // 0x8d0
    return sscanf(s, format);
}

// Address range: 0x8e0 - 0x8e6
int32_t function_8e0(void) {
    // 0x8e0
    return rand();
}

// Address range: 0x8f0 - 0x8f6
int16_t ** function_8f0(void) {
    // 0x8f0
    return __ctype_b_loc();
}

// Address range: 0x900 - 0x906
void function_900(int64_t * d) {
    // 0x900
    __cxa_finalize(d);
}

// Address range: 0x910 - 0x93b
int64_t _start(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x910
    int64_t v1; // 0x910
    __libc_start_main(2681, (int32_t)a4, (char **)&v1, (void (*)())0x1030, (void (*)())0x10a0, (void (*)())a3);
    __asm_hlt();
    // UNREACHABLE
}

// Address range: 0x940 - 0x972
int64_t deregister_tm_clones(void) {
    // 0x940
    return 0x202018;
}

// Address range: 0x980 - 0x9c2
int64_t register_tm_clones(void) {
    // 0x980
    return 0;
}

// Address range: 0x9d0 - 0xa0a
int64_t __do_global_dtors_aux(void) {
    // 0x9d0
    if (g5 != 0) {
        // 0xa08
        int64_t result; // 0x9d0
        return result;
    }
    // 0x9d9
    if (*(int64_t *)0x201ff8 != 0) {
        // 0x9e7
        __cxa_finalize((int64_t *)*(int64_t *)0x202008);
    }
    int64_t result2 = deregister_tm_clones(); // 0x9f3
    g5 = 1;
    return result2;
}

// Address range: 0xa10 - 0xa1a
int64_t frame_dummy(void) {
    // 0xa10
    return register_tm_clones();
}

// Address range: 0xa1a - 0xa79
int64_t CWE190_Integer_Overflow__short_fscanf_multiply_51_bad(void) {
    int64_t v1 = __readfsqword(40); // 0xa22
    int16_t v2 = 0; // bp-18, 0xa31
    fscanf(g4, "%hd", &v2);
    CWE190_Integer_Overflow__short_fscanf_multiply_51b_badSink((int64_t)v2 & 0xffffffff);
    int64_t result = 0; // 0xa70
    if (v1 != __readfsqword(40)) {
        // 0xa72
        __stack_chk_fail();
        result = &g6;
    }
    // 0xa77
    return result;
}

// Address range: 0xa79 - 0xac2
int main(int argc, char ** argv) {
    // 0xa79
    srand(time(NULL));
    printLine("Calling bad()...");
    CWE190_Integer_Overflow__short_fscanf_multiply_51_bad();
    printLine("Finished bad()");
    return 0;
}

// Address range: 0xac2 - 0xaef
int64_t CWE190_Integer_Overflow__short_fscanf_multiply_51b_badSink(int64_t a1) {
    int64_t result = a1 & 0xffffffff; // 0xad5
    if ((int16_t)a1 >= 1) {
        // 0xad7
        result = printIntLine((int64_t)(0x20000 * (int32_t)a1 / 0x10000));
    }
    // 0xaec
    return result;
}

// Address range: 0xaef - 0xb11
int64_t printLine(char * str) {
    int64_t puts_rc; // 0xaef
    if (str != NULL) {
        // 0xb02
        puts_rc = puts(str);
    }
    // 0xb0e
    return puts_rc;
}

// Address range: 0xb11 - 0xb3f
int64_t printWLine(int64_t a1) {
    int64_t result; // 0xb11
    if (a1 != 0) {
        // 0xb24
        result = wprintf(L"%ls\n");
    }
    // 0xb3c
    return result;
}

// Address range: 0xb3f - 0xb63
int64_t printIntLine(int64_t a1) {
    // 0xb3f
    return printf("%d\n", a1 & 0xffffffff);
}

// Address range: 0xb63 - 0xb8b
int64_t printShortLine(int64_t a1) {
    // 0xb63
    return printf("%hd\n", (int16_t)a1);
}

// Address range: 0xb8b - 0xbb1
int64_t printFloatLine(void) {
    // 0xb8b
    int128_t v1; // 0xb8b
    int128_t v2 = __asm_cvtss2sd((int32_t)__asm_movss(v1)); // 0xb98
    return printf("%f\n", (float64_t)(int64_t)v2);
}

// Address range: 0xbb1 - 0xbd8
int64_t printLongLine(int64_t a1) {
    // 0xbb1
    return printf("%ld\n", (int32_t)a1);
}

// Address range: 0xbd8 - 0xbff
int64_t printLongLongLine(int64_t a1) {
    // 0xbd8
    return printf("%ld\n", (int32_t)a1);
}

// Address range: 0xbff - 0xc26
int64_t printSizeTLine(int64_t a1) {
    // 0xbff
    return printf("%zu\n", a1);
}

// Address range: 0xc26 - 0xc4d
int64_t printHexCharLine(int64_t a1) {
    // 0xc26
    return printf("%02x\n", 0x1000000 * (int32_t)a1 / 0x1000000);
}

// Address range: 0xc4d - 0xca3
int64_t printWcharLine(int64_t a1) {
    int64_t v1 = __readfsqword(40); // 0xc58
    int64_t v2 = 0x100000000 * a1 / 0x100000000; // bp-24, 0xc6a
    printf("%ls\n", &v2);
    int64_t result = 0; // 0xc9a
    if (v1 != __readfsqword(40)) {
        // 0xc9c
        __stack_chk_fail();
        result = &g6;
    }
    // 0xca1
    return result;
}

// Address range: 0xca3 - 0xcc7
int64_t printUnsignedLine(int64_t a1) {
    // 0xca3
    return printf("%u\n", (int32_t)a1);
}

// Address range: 0xcc7 - 0xcee
int64_t printHexUnsignedCharLine(int64_t a1) {
    // 0xcc7
    return printf("%02x\n", (uint32_t)(int32_t)a1 % 256);
}

// Address range: 0xcee - 0xd1c
int64_t printDoubleLine(void) {
    // 0xcee
    int128_t v1; // 0xcee
    return printf("%g\n", (float64_t)(int64_t)__asm_movsd_1(__asm_movsd(v1)));
}

// Address range: 0xd1c - 0xd4b
int64_t printStructLine(int64_t a1) {
    uint32_t v1 = *(int32_t *)(a1 + 4); // 0xd2c
    int64_t v2; // 0xd1c
    return printf("%d -- %d\n", v2 & 0xffffffff, (int64_t)v1);
}

// Address range: 0xd4b - 0xda7
int64_t printBytesLine(int64_t a1, int64_t a2) {
    // 0xd4b
    if (a2 == 0) {
        // 0xd98
        return puts((char *)&g1);
    }
    int64_t v1 = 0; // 0xd96
    printf("%02x", (int32_t)*(char *)(v1 + a1));
    v1++;
    while (v1 != a2) {
        // 0xd65
        printf("%02x", (int32_t)*(char *)(v1 + a1));
        v1++;
    }
    // 0xd98
    return puts((char *)&g1);
}

// Address range: 0xda7 - 0xea5
int64_t decodeHexChars(int64_t a1, uint64_t a2, int64_t a3) {
    int64_t v1 = __readfsqword(40); // 0xdbb
    int64_t v2 = 0; // 0xe1c
    int64_t v3 = 0; // 0xe1c
    if (a2 != 0) {
        int16_t * v4 = *__ctype_b_loc(); // 0xe23
        int64_t v5 = 2 * v2; // 0xe2a
        char * str = (char *)(v5 + a3); // 0xe35
        v3 = v2;
        while ((*(int16_t *)(2 * (int64_t)*str + (int64_t)v4) & 0x1000) != 0) {
            int16_t ** v6 = __ctype_b_loc(); // 0xe51
            char v7 = *(char *)((v5 | 1) + a3); // 0xe6b
            v3 = v2;
            if ((*(int16_t *)(2 * (int64_t)v7 + (int64_t)*v6) & 0x1000) == 0) {
                // break -> 0xe8b
                break;
            }
            // 0xdd4
            int32_t v8; // bp-28, 0xda7
            sscanf(str, "%02x", &v8);
            *(char *)(v2 + a1) = (char)v8;
            v2++;
            v3 = v2;
            if (v2 >= a2) {
                // break -> 0xe8b
                break;
            }
            v4 = *__ctype_b_loc();
            v5 = 2 * v2;
            str = (char *)(v5 + a3);
            v3 = v2;
        }
    }
    int64_t result = v3; // 0xe9c
    if (v1 != __readfsqword(40)) {
        // 0xe9e
        __stack_chk_fail();
        result = &g6;
    }
    // 0xea3
    return result;
}

// Address range: 0xea5 - 0xf7e
int64_t decodeHexWChars(int64_t a1, uint64_t a2, int64_t a3) {
    int64_t v1 = __readfsqword(40); // 0xeb9
    int64_t v2 = 0; // 0xf1e
    if (a2 != 0) {
        int64_t v3 = 0; // 0xf11
        int64_t v4 = 8 * v3; // 0xf24
        int32_t * wc = (int32_t *)(v4 + a3); // 0xf33
        v2 = v3;
        while (iswxdigit(*wc) != 0) {
            // 0xf40
            v2 = v3;
            if (iswxdigit(*(int32_t *)((v4 || 4) + a3)) == 0) {
                // break -> 0xf64
                break;
            }
            // 0xed2
            swscanf(wc, L"%02x");
            int32_t v5; // 0xea5
            *(char *)(v3 + a1) = (char)v5;
            v3++;
            v2 = v3;
            if (v3 >= a2) {
                // break -> 0xf64
                break;
            }
            v4 = 8 * v3;
            wc = (int32_t *)(v4 + a3);
            v2 = v3;
        }
    }
    int64_t result = v2; // 0xf75
    if (v1 != __readfsqword(40)) {
        // 0xf77
        __stack_chk_fail();
        result = &g6;
    }
    // 0xf7c
    return result;
}

// Address range: 0xf7e - 0xf89
int64_t globalReturnsTrue(void) {
    // 0xf7e
    return 1;
}

// Address range: 0xf89 - 0xf94
int64_t globalReturnsFalse(void) {
    // 0xf89
    return 0;
}

// Address range: 0xf94 - 0xfb2
int64_t globalReturnsTrueOrFalse(void) {
    // 0xf94
    return rand() % 2;
}

// Address range: 0xfb2 - 0xfb9
int64_t good1(void) {
    // 0xfb2
    int64_t result; // 0xfb2
    return result;
}

// Address range: 0xfb9 - 0xfc0
int64_t good2(void) {
    // 0xfb9
    int64_t result; // 0xfb9
    return result;
}

// Address range: 0xfc0 - 0xfc7
int64_t good3(void) {
    // 0xfc0
    int64_t result; // 0xfc0
    return result;
}

// Address range: 0xfc7 - 0xfce
int64_t good4(void) {
    // 0xfc7
    int64_t result; // 0xfc7
    return result;
}

// Address range: 0xfce - 0xfd5
int64_t good5(void) {
    // 0xfce
    int64_t result; // 0xfce
    return result;
}

// Address range: 0xfd5 - 0xfdc
int64_t good6(void) {
    // 0xfd5
    int64_t result; // 0xfd5
    return result;
}

// Address range: 0xfdc - 0xfe3
int64_t good7(void) {
    // 0xfdc
    int64_t result; // 0xfdc
    return result;
}

// Address range: 0xfe3 - 0xfea
int64_t good8(void) {
    // 0xfe3
    int64_t result; // 0xfe3
    return result;
}

// Address range: 0xfea - 0xff1
int64_t good9(void) {
    // 0xfea
    int64_t result; // 0xfea
    return result;
}

// Address range: 0xff1 - 0xff8
int64_t bad1(void) {
    // 0xff1
    int64_t result; // 0xff1
    return result;
}

// Address range: 0xff8 - 0xfff
int64_t bad2(void) {
    // 0xff8
    int64_t result; // 0xff8
    return result;
}

// Address range: 0xfff - 0x1006
int64_t bad3(void) {
    // 0xfff
    int64_t result; // 0xfff
    return result;
}

// Address range: 0x1006 - 0x100d
int64_t bad4(void) {
    // 0x1006
    int64_t result; // 0x1006
    return result;
}

// Address range: 0x100d - 0x1014
int64_t bad5(void) {
    // 0x100d
    int64_t result; // 0x100d
    return result;
}

// Address range: 0x1014 - 0x101b
int64_t bad6(void) {
    // 0x1014
    int64_t result; // 0x1014
    return result;
}

// Address range: 0x101b - 0x1022
int64_t bad7(void) {
    // 0x101b
    int64_t result; // 0x101b
    return result;
}

// Address range: 0x1022 - 0x1029
int64_t bad8(void) {
    // 0x1022
    int64_t result; // 0x1022
    return result;
}

// Address range: 0x1029 - 0x1030
int64_t bad9(void) {
    // 0x1029
    int64_t result; // 0x1029
    return result;
}

// Address range: 0x1030 - 0x1095
int64_t __libc_csu_init(int64_t a1, int64_t a2, int64_t a3) {
    int64_t result = _init(); // 0x105c
    if ((int64_t)&g3 - (int64_t)&g2 >> 3 == 0) {
        // 0x1086
        return result;
    }
    int64_t v1 = 0; // 0x1064
    while (v1 + 1 != (int64_t)&g3 - (int64_t)&g2 >> 3) {
        // 0x1070
        v1++;
    }
    // 0x1086
    return result;
}

// Address range: 0x10a0 - 0x10a2
int64_t __libc_csu_fini(void) {
    // 0x10a0
    int64_t result; // 0x10a0
    return result;
}

// Address range: 0x10a4 - 0x10ad
int64_t _fini(void) {
    // 0x10a4
    int64_t result; // 0x10a4
    return result;
}

// --------------- Dynamically Linked Functions ---------------

// const unsigned short int ** __ctype_b_loc(void);
// void __cxa_finalize(void * d);
// void __gmon_start__(void);
// int __libc_start_main(int *(main)(int, char **, char **), int argc, char ** ubp_av, void(* init)(void), void(* fini)(void), void(* rtld_fini)(void), void(* stack_end));
// void __stack_chk_fail(void);
// int fscanf(FILE * restrict stream, const char * restrict format, ...);
// int iswxdigit(wint_t wc);
// int printf(const char * restrict format, ...);
// int puts(const char * s);
// int rand(void);
// void srand(unsigned int seed);
// int sscanf(const char * restrict s, const char * restrict format, ...);
// int swscanf(const wchar_t * restrict s, const wchar_t * restrict format, ...);
// time_t time(time_t * timer);
// int wprintf(const wchar_t * restrict format, ...);

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: gcc (7.5.0)
// Detected functions: 63
