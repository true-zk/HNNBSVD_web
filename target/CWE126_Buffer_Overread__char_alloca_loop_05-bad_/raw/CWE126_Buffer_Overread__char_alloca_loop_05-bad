//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
// Copyright (c) Retargetable Decompiler <info@retdec.com>
//

#include <ctype.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <wchar.h>
#include <wctype.h>

// ---------------- Integer Types Definitions -----------------

typedef int64_t int128_t;

// ----------------- Float Types Definitions ------------------

typedef double float64_t;

// ------------------- Function Prototypes --------------------

int64_t __do_global_dtors_aux(void);
int64_t __libc_csu_fini(void);
int64_t __libc_csu_init(int64_t a1, int64_t a2, int64_t a3);
int64_t _fini(void);
int64_t _init(void);
int64_t _start(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t bad1(void);
int64_t bad2(void);
int64_t bad3(void);
int64_t bad4(void);
int64_t bad5(void);
int64_t bad6(void);
int64_t bad7(void);
int64_t bad8(void);
int64_t bad9(void);
int64_t CWE126_Buffer_Overread__char_alloca_loop_05_bad(void);
int64_t decodeHexChars(int64_t a1, uint64_t a2, int64_t a3);
int64_t decodeHexWChars(int64_t a1, uint64_t a2, int64_t a3);
int64_t deregister_tm_clones(void);
int64_t frame_dummy(void);
int32_t function_830(char * s);
int32_t function_840(int32_t wc);
int32_t function_850(char * s);
void function_860(void);
int32_t function_870(char * format, ...);
int64_t * function_880(int64_t * s, int32_t c, int32_t n);
void function_890(int32_t seed);
int32_t function_8a0(int32_t * s, int32_t * format, ...);
int32_t function_8b0(int32_t * timer);
int32_t function_8c0(int32_t * format, ...);
int32_t function_8d0(char * s, char * format, ...);
int32_t function_8e0(void);
int16_t ** function_8f0(void);
void function_900(int64_t * d);
int64_t globalReturnsFalse(void);
int64_t globalReturnsTrue(void);
int64_t globalReturnsTrueOrFalse(void);
int64_t good1(void);
int64_t good2(void);
int64_t good3(void);
int64_t good4(void);
int64_t good5(void);
int64_t good6(void);
int64_t good7(void);
int64_t good8(void);
int64_t good9(void);
int64_t printBytesLine(int64_t a1, int64_t a2);
int64_t printDoubleLine(void);
int64_t printFloatLine(void);
int64_t printHexCharLine(int64_t a1);
int64_t printHexUnsignedCharLine(int64_t a1);
int64_t printIntLine(int64_t a1);
int64_t printLine(int64_t * str);
int64_t printLongLine(int64_t a1);
int64_t printLongLongLine(int64_t a1);
int64_t printShortLine(int64_t a1);
int64_t printSizeTLine(int64_t a1);
int64_t printStructLine(int64_t a1);
int64_t printUnsignedLine(int64_t a1);
int64_t printWcharLine(int64_t a1);
int64_t printWLine(int64_t a1);
int64_t register_tm_clones(void);

// --------------------- Global Variables ---------------------

char * g1; // 0x1211
int64_t g2 = 2576; // 0x201d58
int64_t g3 = 2512; // 0x201d60
int32_t g4 = 1; // 0x202010
int64_t g5 = 0; // 0x202020
int32_t g6;

// ------------------------ Functions -------------------------

// Address range: 0x800 - 0x817
int64_t _init(void) {
    int64_t result = 0; // 0x80e
    if (*(int64_t *)0x201fe8 != 0) {
        // 0x810
        __gmon_start__();
        result = &g6;
    }
    // 0x812
    return result;
}

// Address range: 0x830 - 0x836
int32_t function_830(char * s) {
    // 0x830
    return puts(s);
}

// Address range: 0x840 - 0x846
int32_t function_840(int32_t wc) {
    // 0x840
    return iswxdigit(wc);
}

// Address range: 0x850 - 0x856
int32_t function_850(char * s) {
    // 0x850
    return strlen(s);
}

// Address range: 0x860 - 0x866
void function_860(void) {
    // 0x860
    __stack_chk_fail();
}

// Address range: 0x870 - 0x876
int32_t function_870(char * format, ...) {
    // 0x870
    return printf(format);
}

// Address range: 0x880 - 0x886
int64_t * function_880(int64_t * s, int32_t c, int32_t n) {
    // 0x880
    return memset(s, c, n);
}

// Address range: 0x890 - 0x896
void function_890(int32_t seed) {
    // 0x890
    srand(seed);
}

// Address range: 0x8a0 - 0x8a6
int32_t function_8a0(int32_t * s, int32_t * format, ...) {
    // 0x8a0
    return swscanf(s, format);
}

// Address range: 0x8b0 - 0x8b6
int32_t function_8b0(int32_t * timer) {
    // 0x8b0
    return time(timer);
}

// Address range: 0x8c0 - 0x8c6
int32_t function_8c0(int32_t * format, ...) {
    // 0x8c0
    return wprintf(format);
}

// Address range: 0x8d0 - 0x8d6
int32_t function_8d0(char * s, char * format, ...) {
    // 0x8d0
    return sscanf(s, format);
}

// Address range: 0x8e0 - 0x8e6
int32_t function_8e0(void) {
    // 0x8e0
    return rand();
}

// Address range: 0x8f0 - 0x8f6
int16_t ** function_8f0(void) {
    // 0x8f0
    return __ctype_b_loc();
}

// Address range: 0x900 - 0x906
void function_900(int64_t * d) {
    // 0x900
    __cxa_finalize(d);
}

// Address range: 0x910 - 0x93b
int64_t _start(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x910
    int64_t v1; // 0x910
    __libc_start_main(2966, (int32_t)a4, (char **)&v1, (void (*)())0x1120, (void (*)())0x1190, (void (*)())a3);
    __asm_hlt();
    // UNREACHABLE
}

// Address range: 0x940 - 0x972
int64_t deregister_tm_clones(void) {
    // 0x940
    return &g5;
}

// Address range: 0x980 - 0x9c2
int64_t register_tm_clones(void) {
    // 0x980
    return 0;
}

// Address range: 0x9d0 - 0xa0a
int64_t __do_global_dtors_aux(void) {
    // 0x9d0
    if (*(char *)&g5 != 0) {
        // 0xa08
        int64_t result; // 0x9d0
        return result;
    }
    // 0x9d9
    if (*(int64_t *)0x201ff8 != 0) {
        // 0x9e7
        __cxa_finalize((int64_t *)*(int64_t *)0x202008);
    }
    int64_t result2 = deregister_tm_clones(); // 0x9f3
    *(char *)&g5 = 1;
    return result2;
}

// Address range: 0xa10 - 0xa1a
int64_t frame_dummy(void) {
    // 0xa10
    return register_tm_clones();
}

// Address range: 0xa1a - 0xb96
int64_t CWE126_Buffer_Overread__char_alloca_loop_05_bad(void) {
    // 0xa1a
    int64_t v1; // bp-168, 0xa1a
    int64_t v2 = &v1; // 0xa1e
    int64_t v3 = __readfsqword(40); // 0xa25
    int64_t v4 = v2 - 65 & -16; // 0xa5c
    int64_t v5 = v2 - 193 & -16; // 0xa93
    memset((int64_t *)v4, 65, 49);
    *(char *)(v4 + 49) = 0;
    memset((int64_t *)v5, 65, 99);
    *(char *)(v5 + 99) = 0;
    int64_t str; // bp-120, 0xa1a
    memset(&str, 67, 99);
    for (int64_t i = 0; i < (int64_t)strlen((char *)&str); i++) {
        // 0xb36
        int64_t v6; // 0xa1a
        char v7 = *(char *)(i + (g4 == 0 ? v6 : v4)); // 0xb47
        *(char *)(i + (int64_t)&str) = v7;
    }
    // 0xb6f
    printLine(&str);
    int64_t result = 0; // 0xb8d
    if (v3 != __readfsqword(40)) {
        // 0xb8f
        __stack_chk_fail();
        result = &g6;
    }
    // 0xb94
    return result;
}

// Address range: 0xb96 - 0xbdf
int main(int argc, char ** argv) {
    // 0xb96
    srand(time(NULL));
    printLine((int64_t *)"Calling bad()...");
    CWE126_Buffer_Overread__char_alloca_loop_05_bad();
    printLine((int64_t *)"Finished bad()");
    return 0;
}

// Address range: 0xbdf - 0xc01
int64_t printLine(int64_t * str) {
    int64_t puts_rc; // 0xbdf
    if (str != NULL) {
        // 0xbf2
        puts_rc = puts((char *)str);
    }
    // 0xbfe
    return puts_rc;
}

// Address range: 0xc01 - 0xc2f
int64_t printWLine(int64_t a1) {
    int64_t result; // 0xc01
    if (a1 != 0) {
        // 0xc14
        result = wprintf(L"%ls\n");
    }
    // 0xc2c
    return result;
}

// Address range: 0xc2f - 0xc53
int64_t printIntLine(int64_t a1) {
    // 0xc2f
    return printf("%d\n", a1 & 0xffffffff);
}

// Address range: 0xc53 - 0xc7b
int64_t printShortLine(int64_t a1) {
    // 0xc53
    return printf("%hd\n", (int16_t)a1);
}

// Address range: 0xc7b - 0xca1
int64_t printFloatLine(void) {
    // 0xc7b
    int128_t v1; // 0xc7b
    int128_t v2 = __asm_cvtss2sd((int32_t)__asm_movss(v1)); // 0xc88
    return printf("%f\n", (float64_t)(int64_t)v2);
}

// Address range: 0xca1 - 0xcc8
int64_t printLongLine(int64_t a1) {
    // 0xca1
    return printf("%ld\n", (int32_t)a1);
}

// Address range: 0xcc8 - 0xcef
int64_t printLongLongLine(int64_t a1) {
    // 0xcc8
    return printf("%ld\n", (int32_t)a1);
}

// Address range: 0xcef - 0xd16
int64_t printSizeTLine(int64_t a1) {
    // 0xcef
    return printf("%zu\n", a1);
}

// Address range: 0xd16 - 0xd3d
int64_t printHexCharLine(int64_t a1) {
    // 0xd16
    return printf("%02x\n", 0x1000000 * (int32_t)a1 / 0x1000000);
}

// Address range: 0xd3d - 0xd93
int64_t printWcharLine(int64_t a1) {
    int64_t v1 = __readfsqword(40); // 0xd48
    int64_t v2 = 0x100000000 * a1 / 0x100000000; // bp-24, 0xd5a
    printf("%ls\n", &v2);
    int64_t result = 0; // 0xd8a
    if (v1 != __readfsqword(40)) {
        // 0xd8c
        __stack_chk_fail();
        result = &g6;
    }
    // 0xd91
    return result;
}

// Address range: 0xd93 - 0xdb7
int64_t printUnsignedLine(int64_t a1) {
    // 0xd93
    return printf("%u\n", (int32_t)a1);
}

// Address range: 0xdb7 - 0xdde
int64_t printHexUnsignedCharLine(int64_t a1) {
    // 0xdb7
    return printf("%02x\n", (uint32_t)(int32_t)a1 % 256);
}

// Address range: 0xdde - 0xe0c
int64_t printDoubleLine(void) {
    // 0xdde
    int128_t v1; // 0xdde
    return printf("%g\n", (float64_t)(int64_t)__asm_movsd_1(__asm_movsd(v1)));
}

// Address range: 0xe0c - 0xe3b
int64_t printStructLine(int64_t a1) {
    uint32_t v1 = *(int32_t *)(a1 + 4); // 0xe1c
    int64_t v2; // 0xe0c
    return printf("%d -- %d\n", v2 & 0xffffffff, (int64_t)v1);
}

// Address range: 0xe3b - 0xe97
int64_t printBytesLine(int64_t a1, int64_t a2) {
    // 0xe3b
    if (a2 == 0) {
        // 0xe88
        return puts((char *)&g1);
    }
    int64_t v1 = 0; // 0xe86
    printf("%02x", (int32_t)*(char *)(v1 + a1));
    v1++;
    while (v1 != a2) {
        // 0xe55
        printf("%02x", (int32_t)*(char *)(v1 + a1));
        v1++;
    }
    // 0xe88
    return puts((char *)&g1);
}

// Address range: 0xe97 - 0xf95
int64_t decodeHexChars(int64_t a1, uint64_t a2, int64_t a3) {
    int64_t v1 = __readfsqword(40); // 0xeab
    int64_t v2 = 0; // 0xf0c
    int64_t v3 = 0; // 0xf0c
    if (a2 != 0) {
        int16_t * v4 = *__ctype_b_loc(); // 0xf13
        int64_t v5 = 2 * v2; // 0xf1a
        char * str = (char *)(v5 + a3); // 0xf25
        v3 = v2;
        while ((*(int16_t *)(2 * (int64_t)*str + (int64_t)v4) & 0x1000) != 0) {
            int16_t ** v6 = __ctype_b_loc(); // 0xf41
            char v7 = *(char *)((v5 | 1) + a3); // 0xf5b
            v3 = v2;
            if ((*(int16_t *)(2 * (int64_t)v7 + (int64_t)*v6) & 0x1000) == 0) {
                // break -> 0xf7b
                break;
            }
            // 0xec4
            int32_t v8; // bp-28, 0xe97
            sscanf(str, "%02x", &v8);
            *(char *)(v2 + a1) = (char)v8;
            v2++;
            v3 = v2;
            if (v2 >= a2) {
                // break -> 0xf7b
                break;
            }
            v4 = *__ctype_b_loc();
            v5 = 2 * v2;
            str = (char *)(v5 + a3);
            v3 = v2;
        }
    }
    int64_t result = v3; // 0xf8c
    if (v1 != __readfsqword(40)) {
        // 0xf8e
        __stack_chk_fail();
        result = &g6;
    }
    // 0xf93
    return result;
}

// Address range: 0xf95 - 0x106e
int64_t decodeHexWChars(int64_t a1, uint64_t a2, int64_t a3) {
    int64_t v1 = __readfsqword(40); // 0xfa9
    int64_t v2 = 0; // 0x100e
    if (a2 != 0) {
        int64_t v3 = 0; // 0x1001
        int64_t v4 = 8 * v3; // 0x1014
        int32_t * wc = (int32_t *)(v4 + a3); // 0x1023
        v2 = v3;
        while (iswxdigit(*wc) != 0) {
            // 0x1030
            v2 = v3;
            if (iswxdigit(*(int32_t *)((v4 || 4) + a3)) == 0) {
                // break -> 0x1054
                break;
            }
            // 0xfc2
            swscanf(wc, L"%02x");
            int32_t v5; // 0xf95
            *(char *)(v3 + a1) = (char)v5;
            v3++;
            v2 = v3;
            if (v3 >= a2) {
                // break -> 0x1054
                break;
            }
            v4 = 8 * v3;
            wc = (int32_t *)(v4 + a3);
            v2 = v3;
        }
    }
    int64_t result = v2; // 0x1065
    if (v1 != __readfsqword(40)) {
        // 0x1067
        __stack_chk_fail();
        result = &g6;
    }
    // 0x106c
    return result;
}

// Address range: 0x106e - 0x1079
int64_t globalReturnsTrue(void) {
    // 0x106e
    return 1;
}

// Address range: 0x1079 - 0x1084
int64_t globalReturnsFalse(void) {
    // 0x1079
    return 0;
}

// Address range: 0x1084 - 0x10a2
int64_t globalReturnsTrueOrFalse(void) {
    // 0x1084
    return rand() % 2;
}

// Address range: 0x10a2 - 0x10a9
int64_t good1(void) {
    // 0x10a2
    int64_t result; // 0x10a2
    return result;
}

// Address range: 0x10a9 - 0x10b0
int64_t good2(void) {
    // 0x10a9
    int64_t result; // 0x10a9
    return result;
}

// Address range: 0x10b0 - 0x10b7
int64_t good3(void) {
    // 0x10b0
    int64_t result; // 0x10b0
    return result;
}

// Address range: 0x10b7 - 0x10be
int64_t good4(void) {
    // 0x10b7
    int64_t result; // 0x10b7
    return result;
}

// Address range: 0x10be - 0x10c5
int64_t good5(void) {
    // 0x10be
    int64_t result; // 0x10be
    return result;
}

// Address range: 0x10c5 - 0x10cc
int64_t good6(void) {
    // 0x10c5
    int64_t result; // 0x10c5
    return result;
}

// Address range: 0x10cc - 0x10d3
int64_t good7(void) {
    // 0x10cc
    int64_t result; // 0x10cc
    return result;
}

// Address range: 0x10d3 - 0x10da
int64_t good8(void) {
    // 0x10d3
    int64_t result; // 0x10d3
    return result;
}

// Address range: 0x10da - 0x10e1
int64_t good9(void) {
    // 0x10da
    int64_t result; // 0x10da
    return result;
}

// Address range: 0x10e1 - 0x10e8
int64_t bad1(void) {
    // 0x10e1
    int64_t result; // 0x10e1
    return result;
}

// Address range: 0x10e8 - 0x10ef
int64_t bad2(void) {
    // 0x10e8
    int64_t result; // 0x10e8
    return result;
}

// Address range: 0x10ef - 0x10f6
int64_t bad3(void) {
    // 0x10ef
    int64_t result; // 0x10ef
    return result;
}

// Address range: 0x10f6 - 0x10fd
int64_t bad4(void) {
    // 0x10f6
    int64_t result; // 0x10f6
    return result;
}

// Address range: 0x10fd - 0x1104
int64_t bad5(void) {
    // 0x10fd
    int64_t result; // 0x10fd
    return result;
}

// Address range: 0x1104 - 0x110b
int64_t bad6(void) {
    // 0x1104
    int64_t result; // 0x1104
    return result;
}

// Address range: 0x110b - 0x1112
int64_t bad7(void) {
    // 0x110b
    int64_t result; // 0x110b
    return result;
}

// Address range: 0x1112 - 0x1119
int64_t bad8(void) {
    // 0x1112
    int64_t result; // 0x1112
    return result;
}

// Address range: 0x1119 - 0x1120
int64_t bad9(void) {
    // 0x1119
    int64_t result; // 0x1119
    return result;
}

// Address range: 0x1120 - 0x1185
int64_t __libc_csu_init(int64_t a1, int64_t a2, int64_t a3) {
    int64_t result = _init(); // 0x114c
    if ((int64_t)&g3 - (int64_t)&g2 >> 3 == 0) {
        // 0x1176
        return result;
    }
    int64_t v1 = 0; // 0x1154
    while (v1 + 1 != (int64_t)&g3 - (int64_t)&g2 >> 3) {
        // 0x1160
        v1++;
    }
    // 0x1176
    return result;
}

// Address range: 0x1190 - 0x1192
int64_t __libc_csu_fini(void) {
    // 0x1190
    int64_t result; // 0x1190
    return result;
}

// Address range: 0x1194 - 0x119d
int64_t _fini(void) {
    // 0x1194
    int64_t result; // 0x1194
    return result;
}

// --------------- Dynamically Linked Functions ---------------

// const unsigned short int ** __ctype_b_loc(void);
// void __cxa_finalize(void * d);
// void __gmon_start__(void);
// int __libc_start_main(int *(main)(int, char **, char **), int argc, char ** ubp_av, void(* init)(void), void(* fini)(void), void(* rtld_fini)(void), void(* stack_end));
// void __stack_chk_fail(void);
// int iswxdigit(wint_t wc);
// void * memset(void * s, int c, size_t n);
// int printf(const char * restrict format, ...);
// int puts(const char * s);
// int rand(void);
// void srand(unsigned int seed);
// int sscanf(const char * restrict s, const char * restrict format, ...);
// size_t strlen(const char * s);
// int swscanf(const wchar_t * restrict s, const wchar_t * restrict format, ...);
// time_t time(time_t * timer);
// int wprintf(const wchar_t * restrict format, ...);

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: gcc (7.5.0)
// Detected functions: 63
